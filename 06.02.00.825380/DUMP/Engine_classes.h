// Class Engine.Actor
// Size: 0x3d0 (Inherited: 0x30)
struct AActor : UObject {
	struct FActorTickFunction PrimaryActorTick; // 0x30(0x30)
	char bLocallyHidden : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FMulticastInlineDelegate OnActorHiddenChanged; // 0x68(0x10)
	char pad_78[0xa4]; // 0x78(0xa4)
	char bNetTemporary : 1; // 0x11c(0x01)
	char bNetStartup : 1; // 0x11c(0x01)
	char bOnlyRelevantToOwner : 1; // 0x11c(0x01)
	char bAlwaysRelevant : 1; // 0x11c(0x01)
	char bReplicateMovement : 1; // 0x11c(0x01)
	char bHidden : 1; // 0x11c(0x01)
	char bTearOff : 1; // 0x11c(0x01)
	char bExchangedRoles : 1; // 0x11c(0x01)
	char bNetLoadOnClient : 1; // 0x11d(0x01)
	char bNetUseOwnerRelevancy : 1; // 0x11d(0x01)
	char bRelevantForNetworkReplays : 1; // 0x11d(0x01)
	char bRelevantForLevelBounds : 1; // 0x11d(0x01)
	char bReplayRewindable : 1; // 0x11d(0x01)
	char bAllowTickBeforeBeginPlay : 1; // 0x11d(0x01)
	char bAutoDestroyWhenFinished : 1; // 0x11d(0x01)
	char bCanBeDamaged : 1; // 0x11d(0x01)
	char bBlockInput : 1; // 0x11e(0x01)
	char bCollideWhenPlacing : 1; // 0x11e(0x01)
	char bFindCameraComponentWhenViewTarget : 1; // 0x11e(0x01)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x11e(0x01)
	char bIgnoresOriginShifting : 1; // 0x11e(0x01)
	char bEnableAutoLODGeneration : 1; // 0x11e(0x01)
	char bIsEditorOnlyActor : 1; // 0x11e(0x01)
	char bActorSeamlessTraveled : 1; // 0x11e(0x01)
	char bReplicates : 1; // 0x11f(0x01)
	char bCanBeInCluster : 1; // 0x11f(0x01)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x11f(0x01)
	char pad_11F_3 : 5; // 0x11f(0x01)
	char pad_120_0 : 2; // 0x120(0x01)
	char bActorEnableCollision : 1; // 0x120(0x01)
	char bActorIsBeingDestroyed : 1; // 0x120(0x01)
	char pad_120_4 : 4; // 0x120(0x01)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x121(0x01)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x122(0x01)
	enum class ENetRole RemoteRole; // 0x123(0x01)
	struct FRepMovement ReplicatedMovement; // 0x124(0x48)
	float InitialLifeSpan; // 0x16c(0x04)
	float CustomTimeDilation; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct FRepAttachment AttachmentReplication; // 0x178(0x40)
	struct AActor* Owner; // 0x1b8(0x08)
	struct FName NetDriverName; // 0x1c0(0x0c)
	enum class ENetRole Role; // 0x1cc(0x01)
	enum class ENetDormancy NetDormancy; // 0x1cd(0x01)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x1ce(0x01)
	enum class EAutoReceiveInput AutoReceiveInput; // 0x1cf(0x01)
	int32_t InputPriority; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
	struct UInputComponent* InputComponent; // 0x1d8(0x08)
	float NetCullDistanceSquared; // 0x1e0(0x04)
	int32_t NetTag; // 0x1e4(0x04)
	float NetUpdateFrequency; // 0x1e8(0x04)
	float MinNetUpdateFrequency; // 0x1ec(0x04)
	float NetPriority; // 0x1f0(0x04)
	char pad_1F4[0x24]; // 0x1f4(0x24)
	struct APawn* Instigator; // 0x218(0x08)
	struct TArray<struct AActor*> Children; // 0x220(0x10)
	struct USceneComponent* RootComponent; // 0x230(0x08)
	struct TArray<struct AMatineeActor*> ControllingMatineeActors; // 0x238(0x10)
	struct FTimerHandle TimerHandle_LifeSpanExpired; // 0x248(0x08)
	struct TArray<struct FName> Layers; // 0x250(0x10)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)
	struct TArray<struct FName> Tags; // 0x270(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x280(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x281(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x282(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x283(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x284(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x285(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x286(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x287(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x288(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x289(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x28a(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x28b(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x28c(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	struct FMulticastInlineDelegate PostActorBeginPlay; // 0x290(0x10)
	struct FMulticastSparseDelegate OnDestroyed; // 0x2a0(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x2a1(0x01)
	char pad_2A2[0x6]; // 0x2a2(0x06)
	struct FMulticastInlineDelegate OnForceNetUpdate; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnClientRoleChanged; // 0x2b8(0x10)
	char pad_2C8[0xd8]; // 0x2c8(0xd8)
	struct TArray<struct UActorComponent*> InstanceComponents; // 0x3a0(0x10)
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents; // 0x3b0(0x10)
	char pad_3C0[0x10]; // 0x3c0(0x10)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5128410
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void TearOff(); // Function Engine.Actor.TearOff // (Native|Public|BlueprintCallable) // @ game+0x2cab080
	void SnapRootComponentTo(struct AActor* InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x5128320
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x5128210
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x5128290
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x5128180
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement // (Native|Public|BlueprintCallable) // @ game+0x51280e0
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner // (Native|Public|BlueprintCallable) // @ game+0x5128050
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x5127fd0
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan // (Native|Public|BlueprintCallable) // @ game+0x5127f40
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x5127eb0
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x5127e30
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x5127da0
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5127d10
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5127c80
	void SetActorLocallyHidden(bool NewHidden, struct FName Tag); // Function Engine.Actor.SetActorLocallyHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x5127b80
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0x5127ae0
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x5127a50
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x51279c0
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x5127930
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x5127810
	void OnRep_Role(); // Function Engine.Actor.OnRep_Role // (Native|Public) // @ game+0x2be7660
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement // (Native|Public) // @ game+0x2c302c0
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement // (Native|Public) // @ game+0x2ec0810
	void OnRep_OwnerWithPrevOwner(struct AActor* PrevOwner); // Function Engine.Actor.OnRep_OwnerWithPrevOwner // (Native|Protected) // @ game+0x30325c0
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner // (Final|Native|Private) // @ game+0x2c58cb0
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator // (Native|Public) // @ game+0x2bc6cb0
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication // (Native|Public) // @ game+0x1cc6a10
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5127650
	struct UMaterialInstanceDynamic* MakeMIDForMaterial(struct UMaterialInterface* Parent); // Function Engine.Actor.MakeMIDForMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2bbbfb0
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5127560
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5127350
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5127260
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5127050
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5126ea0
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5126cf0
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5126ad0
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5126910
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51268f0
	struct FTimerHandle K2_GetLifeSpanTimer(); // Function Engine.Actor.K2_GetLifeSpanTimer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51268d0
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51267e0
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5126720
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51266a0
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor // (Final|Native|Public|BlueprintCallable) // @ game+0x5126590
	void K2_DestroyComponent(struct UActorComponent* Component); // Function Engine.Actor.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x5126500
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor // (Native|Public|BlueprintCallable) // @ game+0x51264d0
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x51262e0
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x51260f0
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x5125f70
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x5125df0
	void K2_AddActorWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5125be0
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51259d0
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5125820
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5125670
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5125460
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51252b0
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5125100
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5125060
	bool IsChildActor(); // Function Engine.Actor.IsChildActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5125030
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5125000
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124fd0
	bool HasAuthority(); // Function Engine.Actor.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124fa0
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124f00
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124eb0
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124e60
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x5124e30
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124d90
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124d70
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124d40
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124d10
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124cf0
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124c40
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.Actor.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124b40
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124b00
	bool GetLocallyHidden(); // Function Engine.Actor.GetLocallyHidden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124b20
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124ac0
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124a90
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d90e10
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124960
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51248b0
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124790
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51246f0
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124650
	bool GetHiddenInGame(); // Function Engine.Actor.GetHiddenInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124620
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51245f0
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124550
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51244b0
	struct TArray<struct UActorComponent*> GetComponentsByTag(struct UActorComponent* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124370
	struct TArray<struct UActorComponent*> GetComponentsByInterface(struct UInterface* Interface); // Function Engine.Actor.GetComponentsByInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124280
	struct UActorComponent* GetComponentByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.GetComponentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51241e0
	struct AActor* GetAttachRootActor(); // Function Engine.Actor.GetAttachRootActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51240b0
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124070
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124040
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray); // Function Engine.Actor.GetAttachedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x51240e0
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123f40
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123ed0
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123ea0
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123e70
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123e30
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123dc0
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123d80
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123d10
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123c20
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123bf0
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5123a60
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate // (Native|Public|BlueprintCallable) // @ game+0x5123a30
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x5123a10
	void FinishAddComponent(struct UActorComponent* Component, bool bManualAttachment, struct FTransform& RelativeTransform); // Function Engine.Actor.FinishAddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51238b0
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput // (Native|Public|BlueprintCallable) // @ game+0x45f3c20
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput // (Native|Public|BlueprintCallable) // @ game+0x5123820
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x5123790
	void ClearActorLocallyHidden(); // Function Engine.Actor.ClearActorLocallyHidden // (Final|Native|Public) // @ game+0x5123770
	void AuthSetActorGameplayHidden(bool NewHidden, struct FName Tag); // Function Engine.Actor.AuthSetActorGameplayHidden // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x5123670
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x51235e0
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x5123550
	struct UActorComponent* AddComponentByClass(struct UActorComponent* Class, bool bManualAttachment, struct FTransform& RelativeTransform, bool bDeferredFinish); // Function Engine.Actor.AddComponentByClass // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5123390
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext, bool bDeferredFinish); // Function Engine.Actor.AddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5123180
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51230d0
};

// Class Engine.ActorComponent
// Size: 0xe8 (Inherited: 0x30)
struct UActorComponent : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct FActorComponentTickFunction PrimaryComponentTick; // 0x48(0x30)
	struct TArray<struct FName> ComponentTags; // 0x78(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x88(0x10)
	char pad_98[0x4]; // 0x98(0x04)
	int32_t UCSSerializationIndex; // 0x9c(0x04)
	char pad_A0_0 : 3; // 0xa0(0x01)
	char bNetAddressable : 1; // 0xa0(0x01)
	char bReplicates : 1; // 0xa0(0x01)
	char pad_A0_5 : 3; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	uint64_t TickTimingsAccumulatedTotal; // 0xa8(0x08)
	uint64_t TickTimingsAccumulatedBP; // 0xb0(0x08)
	uint64_t TickTimingsStart; // 0xb8(0x08)
	char pad_C0[0x1]; // 0xc0(0x01)
	char pad_C1_0 : 3; // 0xc1(0x01)
	char bAutoActivate : 1; // 0xc1(0x01)
	char bIsActive : 1; // 0xc1(0x01)
	char bEditableWhenInherited : 1; // 0xc1(0x01)
	char pad_C1_6 : 1; // 0xc1(0x01)
	char bCanEverAffectNavigation : 1; // 0xc1(0x01)
	char pad_C2_0 : 1; // 0xc2(0x01)
	char bIsEditorOnly : 1; // 0xc2(0x01)
	char pad_C2_2 : 6; // 0xc2(0x01)
	char pad_C3[0x1]; // 0xc3(0x01)
	enum class EComponentCreationMethod CreationMethod; // 0xc4(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0xc5(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0xc6(0x01)
	char pad_C7[0x1]; // 0xc7(0x01)
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties; // 0xc8(0x10)
	char pad_D8[0x10]; // 0xd8(0x10)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // @ game+0x2c58cb0
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x512f330
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x512f3b0
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated // (Final|Native|Public|BlueprintCallable) // @ game+0x512f2a0
	void SetComponentTickIntervalAndCooldown(float TickInterval); // Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x512f220
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x512f1a0
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled // (Native|Public|BlueprintCallable) // @ game+0x512f100
	void SetCanEverAffectNavigation(bool bRelevant); // Function Engine.ActorComponent.SetCanEverAffectNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x512f070
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate // (Native|Public|BlueprintCallable) // @ game+0x512efd0
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive // (Native|Public|BlueprintCallable) // @ game+0x512eef0
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x512ee60
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x512edd0
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive // (Native|Public) // @ game+0x2c302c0
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x512ecc0
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x512ec80
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x512ec50
	bool IsActive(); // Function Engine.ActorComponent.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x512ec20
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e93610
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x512ebf0
	void Deactivate(); // Function Engine.ActorComponent.Deactivate // (Native|Public|BlueprintCallable) // @ game+0x2c57f60
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x512e9a0
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x512e840
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x512e7b0
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate // (Native|Public|BlueprintCallable) // @ game+0x461cba0
};

// Class Engine.SceneComponent
// Size: 0x290 (Inherited: 0xe8)
struct USceneComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0xf0(0x08)
	struct USceneComponent* AttachParent; // 0xf8(0x08)
	struct FName AttachSocketName; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct USceneComponent*> AttachChildren; // 0x110(0x10)
	struct TArray<struct USceneComponent*> ClientAttachedChildren; // 0x120(0x10)
	char pad_130[0x34]; // 0x130(0x34)
	struct FVector RelativeLocation; // 0x164(0x0c)
	struct FRotator RelativeRotation; // 0x170(0x0c)
	struct FVector RelativeScale3D; // 0x17c(0x0c)
	struct FVector ComponentVelocity; // 0x188(0x0c)
	char bComponentToWorldUpdated : 1; // 0x194(0x01)
	char pad_194_1 : 1; // 0x194(0x01)
	char bAbsoluteLocation : 1; // 0x194(0x01)
	char bAbsoluteRotation : 1; // 0x194(0x01)
	char bAbsoluteScale : 1; // 0x194(0x01)
	char bVisible : 1; // 0x194(0x01)
	char pad_194_6 : 2; // 0x194(0x01)
	char pad_195[0x4b]; // 0x195(0x4b)
	char bRenderInTargetViewMode : 1; // 0x1e0(0x01)
	char bSkipChildTransformPropagation : 1; // 0x1e0(0x01)
	char bForceSkipUpdateOverlaps : 1; // 0x1e0(0x01)
	char bIgnoreTransformUpdatesFromParent : 1; // 0x1e0(0x01)
	char bShouldBeAttached : 1; // 0x1e0(0x01)
	char bShouldSnapLocationWhenAttached : 1; // 0x1e0(0x01)
	char bShouldSnapRotationWhenAttached : 1; // 0x1e0(0x01)
	char bShouldUpdatePhysicsVolume : 1; // 0x1e0(0x01)
	char bHiddenInGame : 1; // 0x1e1(0x01)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x1e1(0x01)
	char bUseAttachParentBound : 1; // 0x1e1(0x01)
	char pad_1E1_3 : 5; // 0x1e1(0x01)
	enum class EComponentMobility Mobility; // 0x1e2(0x01)
	enum class EDetailMode DetailMode; // 0x1e3(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x1e4(0x01)
	char pad_1E5[0xab]; // 0x1e5(0xab)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0910
	bool SnapTo(struct USceneComponent* InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0820
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53c0630
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0560
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x53c04d0
	void SetRenderInTargetViewMode(bool bValue); // Function Engine.SceneComponent.SetRenderInTargetViewMode // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0440
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53c03b0
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility // (Native|Public|BlueprintCallable) // @ game+0x53c0320
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0250
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0090
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0070
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility // (Final|Native|Private) // @ game+0x53bfe80
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform // (Final|Native|Private) // @ game+0x53bfe60
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName // (Final|Native|Private) // @ game+0x53bfe40
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent // (Final|Native|Private) // @ game+0x53bfe40
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren // (Final|Native|Private) // @ game+0x53bfe20
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bfc10
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bfa60
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bf850
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bf6a0
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bf490
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bf2e0
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bf0d0
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bef20
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53beec0
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bee80
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bee40
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bee00
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53beca0
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53beab0
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo // (Final|Native|Public|BlueprintCallable) // @ game+0x53be920
	void K2_AddWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53be710
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53be500
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53be350
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53be1a0
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bdff0
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bde40
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bdc30
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bda80
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53bd8d0
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd890
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd7d0
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c79e50
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd630
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd4f0
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd420
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd350
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd280
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd250
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd210
	bool GetRenderInTargetViewMode(); // Function Engine.SceneComponent.GetRenderInTargetViewMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd1e0
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd180
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd150
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd0a0
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b33760
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f7e0
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bd050
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bcf40
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bcea0
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bce70
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ff5c70
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bcde0
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53bcd20
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent // (Native|Public|BlueprintCallable) // @ game+0x53bcc40
	bool AreTexturesFullyStreamedIn(); // Function Engine.SceneComponent.AreTexturesFullyStreamedIn // (Native|Public|BlueprintCallable) // @ game+0x53bcba0
};

// Class Engine.PrimitiveComponent
// Size: 0x550 (Inherited: 0x290)
struct UPrimitiveComponent : USceneComponent {
	enum class EUmbraComponentMode UmbraCullingMode; // 0x290(0x01)
	enum class EPrepassCullMode PrepassCullMode; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	float MinDrawDistance; // 0x294(0x04)
	float LDMaxDrawDistance; // 0x298(0x04)
	float CachedMaxDrawDistance; // 0x29c(0x04)
	float CachedVertexFogIntensityFromVolumes; // 0x2a0(0x04)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2a4(0x01)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2a5(0x01)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2a6(0x01)
	enum class ELightmapType LightmapType; // 0x2a7(0x01)
	char bUseMaxLODAsImposter : 1; // 0x2a8(0x01)
	char bBatchImpostersAsInstances : 1; // 0x2a8(0x01)
	char pad_2A8_2 : 6; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	char bIsFirstPerson : 1; // 0x2ac(0x01)
	char bIgnoreFOVChanges : 1; // 0x2ac(0x01)
	char pad_2AC_2 : 6; // 0x2ac(0x01)
	char pad_2AD[0x3]; // 0x2ad(0x03)
	char bNeverDistanceCull : 1; // 0x2b0(0x01)
	char pad_2B0_1 : 7; // 0x2b0(0x01)
	char pad_2B1[0x17]; // 0x2b1(0x17)
	char bAlwaysCreatePhysicsState : 1; // 0x2c8(0x01)
	char bGenerateOverlapEvents : 1; // 0x2c8(0x01)
	char bMultiBodyOverlap : 1; // 0x2c8(0x01)
	char bTraceComplexOnMove : 1; // 0x2c8(0x01)
	char bReturnMaterialOnMove : 1; // 0x2c8(0x01)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2c8(0x01)
	char bAllowCullDistanceVolume : 1; // 0x2c8(0x01)
	char bHasMotionBlurVelocityMeshes : 1; // 0x2c8(0x01)
	char bVisibleInReflectionCaptures : 1; // 0x2c9(0x01)
	char bVisibleInRealTimeSkyCaptures : 1; // 0x2c9(0x01)
	char bVisibleInRayTracing : 1; // 0x2c9(0x01)
	char bRenderInMainPass : 1; // 0x2c9(0x01)
	char bRenderInDepthPass : 1; // 0x2c9(0x01)
	char bReceivesDecals : 1; // 0x2c9(0x01)
	char bReceivesFloorOnlyDecals : 1; // 0x2c9(0x01)
	char bDisableRGBAWrite : 1; // 0x2c9(0x01)
	char bEnableAlphaWrite : 1; // 0x2ca(0x01)
	char bOwnerNoSee : 1; // 0x2ca(0x01)
	char bOnlyOwnerSee : 1; // 0x2ca(0x01)
	char bTreatAsBackgroundForOcclusion : 1; // 0x2ca(0x01)
	char bUseAsOccluder : 1; // 0x2ca(0x01)
	char bSelectable : 1; // 0x2ca(0x01)
	char bForceMipStreaming : 1; // 0x2ca(0x01)
	char bHasPerInstanceHitProxies : 1; // 0x2ca(0x01)
	char CastShadow : 1; // 0x2cb(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2cb(0x01)
	char bAffectDistanceFieldLighting : 1; // 0x2cb(0x01)
	char bCastDynamicShadow : 1; // 0x2cb(0x01)
	char bCastStaticShadow : 1; // 0x2cb(0x01)
	char bCastVolumetricTranslucentShadow : 1; // 0x2cb(0x01)
	char bCastContactShadow : 1; // 0x2cb(0x01)
	char bSelfShadowOnly : 1; // 0x2cb(0x01)
	char bCastFarShadow : 1; // 0x2cc(0x01)
	char bCastInsetShadow : 1; // 0x2cc(0x01)
	char bCastCinematicShadow : 1; // 0x2cc(0x01)
	char bCastHiddenShadow : 1; // 0x2cc(0x01)
	char bCastShadowAsTwoSided : 1; // 0x2cc(0x01)
	char bLightAsIfStatic : 1; // 0x2cc(0x01)
	char bLightAttachmentsAsGroup : 1; // 0x2cc(0x01)
	char bExcludeFromLightAttachmentGroup : 1; // 0x2cc(0x01)
	char bReceiveMobileCSMShadows : 1; // 0x2cd(0x01)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x2cd(0x01)
	char bIgnoreRadialImpulse : 1; // 0x2cd(0x01)
	char bIgnoreRadialForce : 1; // 0x2cd(0x01)
	char bApplyImpulseOnDamage : 1; // 0x2cd(0x01)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x2cd(0x01)
	char bFillCollisionUnderneathForNavmesh : 1; // 0x2cd(0x01)
	char AlwaysLoadOnClient : 1; // 0x2cd(0x01)
	char AlwaysLoadOnServer : 1; // 0x2ce(0x01)
	char bUseEditorCompositing : 1; // 0x2ce(0x01)
	char bRenderCustomDepth : 1; // 0x2ce(0x01)
	char pad_2CE_3 : 5; // 0x2ce(0x01)
	char pad_2CF[0x1]; // 0x2cf(0x01)
	char bEarlyZPassAggregatedMesh : 1; // 0x2d0(0x01)
	char bTranslucencyPreDecal : 1; // 0x2d0(0x01)
	char bOverrideCubemapSource : 1; // 0x2d0(0x01)
	char pad_2D0_3 : 5; // 0x2d0(0x01)
	char pad_2D1[0x2f]; // 0x2d1(0x2f)
	enum class ELHMMirroringIgnoreType MirroringIgnoreType; // 0x300(0x01)
	char pad_301[0x1]; // 0x301(0x01)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x302(0x01)
	char pad_303[0x1]; // 0x303(0x01)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x304(0x01)
	struct FLightingChannels LightingChannels; // 0x305(0x01)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x306(0x01)
	char pad_307[0x1]; // 0x307(0x01)
	int32_t CustomDepthStencilValue; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x310(0x10)
	struct FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x320(0x10)
	char pad_330[0x10]; // 0x330(0x10)
	int32_t TranslucencySortPriority; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	enum class EMaterialCubemapSource CubemapSourceOverride; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	int32_t VisibilityId; // 0x34c(0x04)
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x350(0x10)
	int8_t VirtualTextureLodBias; // 0x360(0x01)
	int8_t VirtualTextureCullMips; // 0x361(0x01)
	int8_t VirtualTextureMinCoverage; // 0x362(0x01)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x363(0x01)
	char pad_364[0x4]; // 0x364(0x04)
	float LpvBiasMultiplier; // 0x368(0x04)
	char pad_36C[0x8]; // 0x36c(0x08)
	float BoundsScale; // 0x374(0x04)
	char pad_378[0x10]; // 0x378(0x10)
	struct TArray<struct AActor*> MoveIgnoreActors; // 0x388(0x10)
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents; // 0x398(0x10)
	char pad_3A8[0x10]; // 0x3a8(0x10)
	struct FBodyInstance BodyInstance; // 0x3b8(0x160)
	struct FMulticastSparseDelegate OnComponentHit; // 0x518(0x01)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x519(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x51a(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x51b(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x51c(0x01)
	char pad_51D[0x1]; // 0x51d(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x51e(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x51f(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x520(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x521(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x522(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x523(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x524(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x525(0x01)
	char pad_526[0x1a]; // 0x526(0x1a)
	struct UPrimitiveComponent* LODParentPrimitive; // 0x540(0x08)
	char pad_548[0x8]; // 0x548(0x08)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x539a5b0
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody // (Native|Public|BlueprintCallable) // @ game+0x539a500
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies // (Native|Public|BlueprintCallable) // @ game+0x539a4d0
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x539a410
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD // (Native|Public|BlueprintCallable) // @ game+0x539a310
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x539a280
	void SetTranslucencyPreDecal(bool bNewTranslucencyPreDecal); // Function Engine.PrimitiveComponent.SetTranslucencyPreDecal // (Final|Native|Public|BlueprintCallable) // @ game+0x539a1f0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights // (Final|Native|Public|BlueprintCallable) // @ game+0x539a160
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics // (Native|Public|BlueprintCallable) // @ game+0x539a0c0
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass // (Final|Native|Public|BlueprintCallable) // @ game+0x539a030
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x5399fa0
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals // (Final|Native|Public|BlueprintCallable) // @ game+0x5399f10
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride // (Native|Public|BlueprintCallable) // @ game+0x53997c0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians // (Final|Native|Public|BlueprintCallable) // @ game+0x5399de0
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees // (Final|Native|Public|BlueprintCallable) // @ game+0x5399ca0
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x5399ca0
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5399b40
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53999e0
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5399850
	void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5399850
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee // (Final|Native|Public|BlueprintCallable) // @ game+0x5399730
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee // (Final|Native|Public|BlueprintCallable) // @ game+0x53996a0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x2b71110
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName // (Native|Public|BlueprintCallable) // @ game+0x53995b0
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial // (Native|Public|BlueprintCallable) // @ game+0x53994d0
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale // (Native|Public|BlueprintCallable) // @ game+0x53993d0
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg // (Native|Public|BlueprintCallable) // @ game+0x5399290
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping // (Native|Public|BlueprintCallable) // @ game+0x5399200
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x53990d0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x5399040
	void SetIsFirstPerson(bool bValue); // Function Engine.PrimitiveComponent.SetIsFirstPerson // (Final|Native|Public|BlueprintCallable) // @ game+0x5398fb0
	void SetIgnoreFOVChanges(bool bValue); // Function Engine.PrimitiveComponent.SetIgnoreFOVChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x5398f20
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x5398e90
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x5398e00
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity // (Native|Public|BlueprintCallable) // @ game+0x5398d60
	void SetEnableAlphaWrite(bool bInEnableAlphaWrite); // Function Engine.PrimitiveComponent.SetEnableAlphaWrite // (Final|Native|Public|BlueprintCallable) // @ game+0x2bf80c0
	void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398c80
	void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398ba0
	void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398ad0
	void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x5398a00
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398920
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398840
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398770
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x53986a0
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask // (Final|Native|Public|BlueprintCallable) // @ game+0x5398620
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5398590
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x5398510
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode // (Native|Public|BlueprintCallable) // @ game+0x5398480
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel // (Native|Public|BlueprintCallable) // @ game+0x53983b0
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels // (Native|Public|BlueprintCallable) // @ game+0x5398320
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName // (Native|Public|BlueprintCallable) // @ game+0x5398230
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType // (Native|Public|BlueprintCallable) // @ game+0x53981a0
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled // (Native|Public|BlueprintCallable) // @ game+0x5398110
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5398010
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x5397f80
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x5397ef0
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale // (Final|Native|Public|BlueprintCallable) // @ game+0x5397e70
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping // (Native|Public|BlueprintCallable) // @ game+0x5397de0
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD // (Native|Public|BlueprintCallable) // @ game+0x5370980
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5397cf0
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5397c00
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5397ad0
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale // (Native|Public|BlueprintCallable) // @ game+0x5397a40
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5397910
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep // (Final|Native|Public|BlueprintCallable) // @ game+0x5397870
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53974c0
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5397160
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5396df0
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396db0
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396d70
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396d30
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53969b0
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396910
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396870
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396830
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x51f8600
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x5396760
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x5396690
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396660
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5396540
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5396480
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53963c0
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53962e0
	struct FVector GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53962e0
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396230
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396130
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53960f0
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5396010
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395f70
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395eb0
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395e70
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395e30
	bool GetIsFirstPerson(); // Function Engine.PrimitiveComponent.GetIsFirstPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395e00
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395d30
	bool GetIgnoreFOVChanges(); // Function Engine.PrimitiveComponent.GetIgnoreFOVChanges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395d00
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395cd0
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395c30
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395bf0
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395bb0
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395b70
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395a20
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395960
	enum class EAresOutlineMode GetAresOutlineMode(); // Function Engine.PrimitiveComponent.GetAresOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395930
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53958f0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x53957b0
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x53956d0
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic // (Native|Public|BlueprintCallable) // @ game+0x5395630
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53955a0
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x5395510
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53954e0
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x53954c0
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5395410
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5395130
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5395290
	void AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorque // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5395130
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394f50
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394d70
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394c20
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394ac0
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394970
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394820
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53946c0
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394560
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53943e0
	void AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5394280
};

// Class Engine.MeshComponent
// Size: 0x590 (Inherited: 0x550)
struct UMeshComponent : UPrimitiveComponent {
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x548(0x10)
	char bOverrideDisableOcclusionQuery : 1; // 0x558(0x01)
	struct FLinearColor OverlayColor; // 0x55c(0x10)
	char pad_570_1 : 7; // 0x570(0x01)
	char pad_571[0xf]; // 0x571(0x0f)
	char bEnableMaterialParameterCaching : 1; // 0x580(0x01)
	char pad_580_1 : 7; // 0x580(0x01)
	char pad_581[0xf]; // 0x581(0x0f)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x532a0d0
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x5329f50
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x5329a50
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329410
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329150
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53291e0
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329090
	void EmptyOverrideMaterials(); // Function Engine.MeshComponent.EmptyOverrideMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x5329030
};

// Class Engine.SkinnedMeshComponent
// Size: 0x7b0 (Inherited: 0x590)
struct USkinnedMeshComponent : UMeshComponent {
	struct USkeletalMesh* SkeletalMesh; // 0x590(0x08)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x598(0x08)
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage; // 0x5a0(0x10)
	struct TArray<struct FVertexOffsetUsage> VertexOffsetUsage; // 0x5b0(0x10)
	char pad_5C0[0xf8]; // 0x5c0(0xf8)
	struct UPhysicsAsset* PhysicsAssetOverride; // 0x6b8(0x08)
	int32_t ForcedLodModel; // 0x6c0(0x04)
	int32_t MinLodModel; // 0x6c4(0x04)
	char pad_6C8[0xc]; // 0x6c8(0x0c)
	float StreamingDistanceMultiplier; // 0x6d4(0x04)
	char pad_6D8[0x8]; // 0x6d8(0x08)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x6e0(0x10)
	char pad_6F0[0x24]; // 0x6f0(0x24)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x714(0x01)
	char pad_715[0x1]; // 0x715(0x01)
	char pad_716_0 : 3; // 0x716(0x01)
	char bOverrideMinLod : 1; // 0x716(0x01)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x716(0x01)
	char bForceWireframe : 1; // 0x716(0x01)
	char bDisplayBones : 1; // 0x716(0x01)
	char bDisableMorphTarget : 1; // 0x716(0x01)
	char bHideSkin : 1; // 0x717(0x01)
	char bPerBoneMotionBlur : 1; // 0x717(0x01)
	char bComponentUseFixedSkelBounds : 1; // 0x717(0x01)
	char bConsiderAllBodiesForBounds : 1; // 0x717(0x01)
	char bSyncAttachParentLOD : 1; // 0x717(0x01)
	char bCanHighlightSelectedSections : 1; // 0x717(0x01)
	char bRecentlyRendered : 1; // 0x717(0x01)
	char bForceNonRenderedAnimUpdateRate : 1; // 0x717(0x01)
	char bCastCapsuleDirectShadow : 1; // 0x718(0x01)
	char bCastCapsuleIndirectShadow : 1; // 0x718(0x01)
	char bCPUSkinning : 1; // 0x718(0x01)
	char bEnableUpdateRateOptimizations : 1; // 0x718(0x01)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x718(0x01)
	char bRenderStatic : 1; // 0x718(0x01)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x718(0x01)
	char pad_718_7 : 1; // 0x718(0x01)
	char pad_719_0 : 1; // 0x719(0x01)
	char bCachedLocalBoundsUpToDate : 1; // 0x719(0x01)
	char pad_719_2 : 1; // 0x719(0x01)
	char bForceMeshObjectUpdate : 1; // 0x719(0x01)
	char pad_719_4 : 4; // 0x719(0x01)
	char pad_71A[0x2]; // 0x71a(0x02)
	float CapsuleIndirectShadowMinVisibility; // 0x71c(0x04)
	char pad_720[0x14]; // 0x720(0x14)
	struct FBoxSphereBounds CachedWorldSpaceBounds; // 0x734(0x1c)
	struct FMatrix CachedWorldToLocalTransform; // 0x750(0x40)
	enum class EDedicatedServerAnimationStatus DedicatedServerAnimationStatus; // 0x790(0x01)
	char pad_791[0x1f]; // 0x791(0x1f)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x53e23c0
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x53e2320
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e2130
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53e1f40
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1df0
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1d60
	void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1c90
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53e1b90
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1ae0
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53e19e0
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh // (Native|Public|BlueprintCallable) // @ game+0x53e1900
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1870
	void SetPreSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1730
	void SetPostSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x53e15f0
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x53e1510
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1480
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53e13b0
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1320
	void SetEnableShadowPhysicsAsset(bool bInCastCapsuleDirectShadow, bool bInCastCapsuleIndirectShadow); // Function Engine.SkinnedMeshComponent.SetEnableShadowPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x53e1240
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x53e11b0
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x53e1120
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x53e10a0
	void ServerOverrideServerAnimUpdateRate(int32_t Value); // Function Engine.SkinnedMeshComponent.ServerOverrideServerAnimUpdateRate // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x53e1010
	void ServerOverrideServerAnimAlwaysUpdateHumanControlled(bool Value); // Function Engine.SkinnedMeshComponent.ServerOverrideServerAnimAlwaysUpdateHumanControlled // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x535ea30
	void ServerOverrideNonRenderedAnimUpdateRate(int32_t Value); // Function Engine.SkinnedMeshComponent.ServerOverrideNonRenderedAnimUpdateRate // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x53e0f80
	void OverrideServerAnimUpdateRateFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function Engine.SkinnedMeshComponent.OverrideServerAnimUpdateRateFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2be5720
	void OverrideServerAnimAlwaysUpdateHumanControlledFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function Engine.SkinnedMeshComponent.OverrideServerAnimAlwaysUpdateHumanControlledFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2be5720
	void OverrideNonRenderedAnimUpdateRateFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function Engine.SkinnedMeshComponent.OverrideNonRenderedAnimUpdateRateFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2be5720
	void MulticastOverrideNonRenderedAnimUpdateRate(int32_t Value); // Function Engine.SkinnedMeshComponent.MulticastOverrideNonRenderedAnimUpdateRate // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x53e0ef0
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0ec0
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown // (Final|Native|Public|BlueprintCallable) // @ game+0x53e0df0
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName // (Final|Native|Public|BlueprintCallable) // @ game+0x53e0d40
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x53e0b20
	int32_t GetVertexOffsetUsage(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0a80
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0930
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e07c0
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e0710
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0650
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0620
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e05f0
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e05c0
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0480
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0450
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e03a0
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e02f0
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0140
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x53e00b0
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x53e0090
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x53e0000
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53dfef0
};

// Class Engine.StreamableRenderAsset
// Size: 0x68 (Inherited: 0x30)
struct UStreamableRenderAsset : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	double ForceMipLevelsToBeResidentTimestamp; // 0x48(0x08)
	int32_t NumCinematicMipLevels; // 0x50(0x04)
	int32_t StreamingIndex; // 0x54(0x04)
	int32_t CachedCombinedLODBias; // 0x58(0x04)
	char NeverStream : 1; // 0x5c(0x01)
	char bGlobalForceMipLevelsToBeResident : 1; // 0x5c(0x01)
	char bHasStreamingUpdatePending : 1; // 0x5c(0x01)
	char bForceMiplevelsToBeResident : 1; // 0x5c(0x01)
	char bIgnoreStreamingMipBias : 1; // 0x5c(0x01)
	char bUseCinematicMipLevels : 1; // 0x5c(0x01)
	char pad_5C_6 : 2; // 0x5c(0x01)
	char pad_5D[0xb]; // 0x5d(0x0b)
};

// Class Engine.SkeletalMesh
// Size: 0x3a8 (Inherited: 0x68)
struct USkeletalMesh : UStreamableRenderAsset {
	char pad_68[0x20]; // 0x68(0x20)
	struct USkeleton* Skeleton; // 0x88(0x08)
	struct FBoxSphereBounds ImportedBounds; // 0x90(0x1c)
	struct FBoxSphereBounds ExtendedBounds; // 0xac(0x1c)
	struct FVector PositiveBoundsExtension; // 0xc8(0x0c)
	struct FVector NegativeBoundsExtension; // 0xd4(0x0c)
	struct TArray<struct FSkeletalMaterial> Materials; // 0xe0(0x10)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0xf0(0x10)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0x100(0x10)
	char pad_110[0x50]; // 0x110(0x50)
	struct FPerPlatformInt MinLOD; // 0x160(0x04)
	struct FPerPlatformInt MaxLod; // 0x164(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x168(0x01)
	enum class EAxis SkelMirrorAxis; // 0x169(0x01)
	enum class EAxis SkelMirrorFlipAxis; // 0x16a(0x01)
	char bUseFullPrecisionUVs : 1; // 0x16b(0x01)
	char bUseHighPrecisionTangentBasis : 1; // 0x16b(0x01)
	char bHasBeenSimplified : 1; // 0x16b(0x01)
	char bHasVertexColors : 1; // 0x16b(0x01)
	char pad_16B_4 : 1; // 0x16b(0x01)
	char bEnablePerPolyCollision : 1; // 0x16b(0x01)
	char pad_16B_6 : 2; // 0x16b(0x01)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct UBodySetup* BodySetup; // 0x170(0x08)
	struct UPhysicsAsset* PhysicsAsset; // 0x178(0x08)
	struct UPhysicsAsset* ShadowPhysicsAsset; // 0x180(0x08)
	struct TArray<struct UNodeMappingContainer*> NodeMappingData; // 0x188(0x10)
	struct TArray<struct UMorphTarget*> MorphTargets; // 0x198(0x10)
	char pad_1A8[0x178]; // 0x1a8(0x178)
	struct UAnimInstance* PostProcessAnimBlueprint; // 0x320(0x08)
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets; // 0x328(0x10)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x338(0x30)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x368(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x378(0x10)
	char pad_388[0x10]; // 0x388(0x10)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x398(0x10)

	void SetMinimumLODForPlatform(struct FName& PlatformName, int32_t Value); // Function Engine.SkeletalMesh.SetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x53cb0f0
	void SetMaximumLODForPlatform(struct FName& PlatformName, int32_t Value); // Function Engine.SkeletalMesh.SetMaximumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x53cb0f0
	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x2b329d0
	void SetDefaultAnimatingRig(struct TSoftObjectPtr<UObject> InAnimatingRig); // Function Engine.SkeletalMesh.SetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable) // @ game+0x53cafe0
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cafb0
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53caec0
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cadf0
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cad50
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cacb0
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.SkeletalMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cabc0
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.SkeletalMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cab40
	int32_t GetMaximumLODForPlatform(struct FName& PlatformName); // Function Engine.SkeletalMesh.GetMaximumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cab40
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53caaf0
	struct TSoftObjectPtr<UObject> GetDefaultAnimatingRig(); // Function Engine.SkeletalMesh.GetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x53caa70
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53caa20
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53ca850
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53ca750
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53ca6a0
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintFunctionLibrary : UObject {
};

// Class Engine.HUD
// Size: 0x4d0 (Inherited: 0x3d0)
struct AHUD : AActor {
	struct APlayerController* PlayerOwner; // 0x3d0(0x08)
	char bLostFocusPaused : 1; // 0x3d8(0x01)
	char bShowHUD : 1; // 0x3d8(0x01)
	char bShowDebugInfo : 1; // 0x3d8(0x01)
	char pad_3D8_3 : 5; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	int32_t CurrentTargetIndex; // 0x3dc(0x04)
	char bShowHitBoxDebugInfo : 1; // 0x3e0(0x01)
	char bShowOverlays : 1; // 0x3e0(0x01)
	char bEnableDebugTextShadow : 1; // 0x3e0(0x01)
	char pad_3E0_3 : 5; // 0x3e0(0x01)
	char pad_3E1[0x7]; // 0x3e1(0x07)
	struct TArray<struct AActor*> PostRenderedActors; // 0x3e8(0x10)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct TArray<struct FName> DebugDisplay; // 0x400(0x10)
	struct TArray<struct FName> ToggledDebugCategories; // 0x410(0x10)
	struct TArray<struct FName> DisabledInstanceNames; // 0x420(0x10)
	struct UCanvas* Canvas; // 0x430(0x08)
	struct UCanvas* DebugCanvas; // 0x438(0x08)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x440(0x10)
	struct AActor* ShowDebugTargetDesiredClass; // 0x450(0x08)
	struct AActor* ShowDebugTargetActor; // 0x458(0x08)
	char pad_460[0x70]; // 0x460(0x70)

	void ShowHUD(); // Function Engine.HUD.ShowHUD // (Exec|Native|Public) // @ game+0x2beff70
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory // (Final|Exec|Native|Public) // @ game+0x5218360
	void ShowDebugToggleDisableInstanceName(struct FName InstanceName); // Function Engine.HUD.ShowDebugToggleDisableInstanceName // (Final|Exec|Native|Public) // @ game+0x52182c0
	void ShowDebugForReticleTargetToggle(struct AActor* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle // (Final|Exec|Native|Public) // @ game+0x5218230
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug // (Exec|Native|Public) // @ game+0x5218180
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5217f60
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5217f40
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x33d1d50
	struct FVector Project(struct FVector Location); // Function Engine.HUD.Project // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5217e90
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget // (Exec|Native|Public) // @ game+0x2b931b0
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget // (Exec|Native|Public) // @ game+0x1d87150
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5217b60
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7d520
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5217b30
	void GetActorsInSelectionRectangle(struct AActor* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5217900
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x5217750
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52172f0
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5217090
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5216ed0
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5216be0
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x52169c0
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52165f0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52163f0
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5216270
	void AddHitBox(struct FVector2D Position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52160c0
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x5215ce0
};

// Class Engine.Pawn
// Size: 0x430 (Inherited: 0x3d0)
struct APawn : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	char bUseControllerRotationPitch : 1; // 0x3d8(0x01)
	char bUseControllerRotationYaw : 1; // 0x3d8(0x01)
	char bUseControllerRotationRoll : 1; // 0x3d8(0x01)
	char bCanAffectNavigationGeneration : 1; // 0x3d8(0x01)
	char pad_3D8_4 : 4; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float BaseEyeHeight; // 0x3dc(0x04)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x3e0(0x01)
	enum class EAutoPossessAI AutoPossessAI; // 0x3e1(0x01)
	uint16_t RemoteViewPitch; // 0x3e2(0x02)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct AController* AIControllerClass; // 0x3e8(0x08)
	struct APlayerState* PlayerState; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct AController* LastHitBy; // 0x400(0x08)
	struct AController* Controller; // 0x408(0x08)
	char pad_410[0x4]; // 0x410(0x04)
	struct FVector ControlInputVector; // 0x414(0x0c)
	struct FVector LastControlInputVector; // 0x420(0x0c)
	char pad_42C[0x4]; // 0x42c(0x04)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // @ game+0x53642f0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration // (Final|Native|Public|BlueprintCallable) // @ game+0x5364110
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5363f80
	void OnRep_PlayerState(struct APlayerState* PreviousPlayerState); // Function Engine.Pawn.OnRep_PlayerState // (Native|Public) // @ game+0x5363ef0
	void OnRep_Controller(struct AController* OldController); // Function Engine.Pawn.OnRep_Controller // (Native|Public) // @ game+0x5363e60
	void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Pawn.LaunchPawn // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5363c10
	struct FVector K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363ab0
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5bd0
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363be0
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363b60
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b92420
	bool IsControlled(); // Function Engine.Pawn.IsControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363b30
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363af0
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363ab0
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363a20
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4dc0
	struct AActor* GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5363990
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363950
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53638a0
	struct AController* GetController(); // Function Engine.Pawn.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53638f0
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363770
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy // (Native|Public|BlueprintCallable) // @ game+0x2b936b0
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5363720
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53631b0
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput // (Native|Public|BlueprintCallable) // @ game+0x5363030
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput // (Native|Public|BlueprintCallable) // @ game+0x5362fa0
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput // (Native|Public|BlueprintCallable) // @ game+0x5362f10
};

// Class Engine.DefaultPawn
// Size: 0x458 (Inherited: 0x430)
struct ADefaultPawn : APawn {
	float BaseTurnRate; // 0x430(0x04)
	float BaseLookUpRate; // 0x434(0x04)
	struct UPawnMovementComponent* MovementComponent; // 0x438(0x08)
	struct USphereComponent* CollisionComponent; // 0x440(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x448(0x08)
	char bAddDefaultMovementBindings : 1; // 0x450(0x01)
	char pad_450_1 : 7; // 0x450(0x01)
	char pad_451[0x7]; // 0x451(0x07)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // @ game+0x51b5660
	void ToggleCollision(); // Function Engine.DefaultPawn.ToggleCollision // (Final|Native|Public) // @ game+0x1cc6720
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World // (Native|Public|BlueprintCallable) // @ game+0x51b50e0
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x51b5050
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x51b4fc0
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate // (Native|Public|BlueprintCallable) // @ game+0x51b4f30
};

// Class Engine.BlueprintCore
// Size: 0x58 (Inherited: 0x30)
struct UBlueprintCore : UObject {
	struct UObject* SkeletonGeneratedClass; // 0x30(0x08)
	struct UObject* GeneratedClass; // 0x38(0x08)
	bool bLegacyNeedToPurgeSkelRefs; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FGuid BlueprintGuid; // 0x44(0x10)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.Blueprint
// Size: 0xa8 (Inherited: 0x58)
struct UBlueprint : UBlueprintCore {
	struct UObject* ParentClass; // 0x58(0x08)
	enum class EBlueprintType BlueprintType; // 0x60(0x01)
	char bRecompileOnLoad : 1; // 0x61(0x01)
	char bHasBeenRegenerated : 1; // 0x61(0x01)
	char bIsRegeneratingOnLoad : 1; // 0x61(0x01)
	char pad_61_3 : 5; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	int32_t BlueprintSystemVersion; // 0x64(0x04)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x68(0x08)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x70(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x80(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x90(0x10)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0xa0(0x08)
};

// Class Engine.DataAsset
// Size: 0x38 (Inherited: 0x30)
struct UDataAsset : UObject {
	struct UDataAsset* NativeClass; // 0x30(0x08)
};

// Class Engine.GameInstance
// Size: 0x1b0 (Inherited: 0x30)
struct UGameInstance : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct ULocalPlayer*> LocalPlayers; // 0x40(0x10)
	struct UOnlineSession* OnlineSession; // 0x50(0x08)
	struct TArray<struct UObject*> ReferencedObjects; // 0x58(0x10)
	char pad_68[0x18]; // 0x68(0x18)
	struct FMulticastInlineDelegate OnPawnControllerChangedDelegates; // 0x80(0x10)
	char pad_90[0x120]; // 0x90(0x120)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer // (Exec|Native|Public) // @ game+0x51f7eb0
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer // (Exec|Native|Public) // @ game+0x51f7e20
};

// Class Engine.Info
// Size: 0x3d0 (Inherited: 0x3d0)
struct AInfo : AActor {
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x38 (Inherited: 0x30)
struct UBlueprintAsyncActionBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x2c302c0
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x38 (Inherited: 0x38)
struct UOnlineBlueprintCallProxyBase : UBlueprintAsyncActionBase {
};

// Class Engine.Player
// Size: 0x50 (Inherited: 0x30)
struct UPlayer : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct APlayerController* PlayerController; // 0x38(0x08)
	int32_t CurrentNetSpeed; // 0x40(0x04)
	int32_t ConfiguredInternetSpeed; // 0x44(0x04)
	int32_t ConfiguredLanSpeed; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.NetConnection
// Size: 0x1b40 (Inherited: 0x50)
struct UNetConnection : UPlayer {
	struct TArray<struct UChildConnection*> Children; // 0x50(0x10)
	struct UNetDriver* Driver; // 0x60(0x08)
	struct UPackageMap* PackageMapClass; // 0x68(0x08)
	struct UPackageMap* PackageMap; // 0x70(0x08)
	struct TArray<struct UChannel*> OpenChannels; // 0x78(0x10)
	struct TArray<struct AActor*> SentTemporaries; // 0x88(0x10)
	struct AActor* ViewTarget; // 0x98(0x08)
	struct AActor* OwningActor; // 0xa0(0x08)
	int32_t MaxPacket; // 0xa8(0x04)
	char InternalAck : 1; // 0xac(0x01)
	char pad_AC_1 : 7; // 0xac(0x01)
	char pad_AD[0xbb]; // 0xad(0xbb)
	struct FUniqueNetIdRepl PlayerID; // 0x168(0x28)
	char pad_190[0x48]; // 0x190(0x48)
	double LastReceiveTime; // 0x1d8(0x08)
	char pad_1E0[0x1370]; // 0x1e0(0x1370)
	struct TArray<struct UChannel*> ChannelsToTick; // 0x1550(0x10)
	char pad_1560[0x5e0]; // 0x1560(0x5e0)
};

// Class Engine.NetDriver
// Size: 0x7e0 (Inherited: 0x30)
struct UNetDriver : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct FString NetConnectionClassName; // 0x40(0x10)
	struct FString ReplicationDriverClassName; // 0x50(0x10)
	int32_t MaxDownloadSize; // 0x60(0x04)
	char bClampListenServerTickRate : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	int32_t NetServerMaxTickRate; // 0x68(0x04)
	int32_t MaxNetTickRate; // 0x6c(0x04)
	int32_t MaxInternetClientRate; // 0x70(0x04)
	int32_t MaxClientRate; // 0x74(0x04)
	float ServerTravelPause; // 0x78(0x04)
	float SpawnPrioritySeconds; // 0x7c(0x04)
	float RelevantTimeout; // 0x80(0x04)
	float KeepAliveTime; // 0x84(0x04)
	float InitialConnectTimeout; // 0x88(0x04)
	float ConnectionTimeout; // 0x8c(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x90(0x04)
	bool bNoTimeouts; // 0x94(0x01)
	bool bNeverApplyNetworkEmulationSettings; // 0x95(0x01)
	char pad_96[0x2]; // 0x96(0x02)
	struct UNetConnection* ServerConnection; // 0x98(0x08)
	struct TArray<struct UNetConnection*> ClientConnections; // 0xa0(0x10)
	char pad_B0[0x60]; // 0xb0(0x60)
	int32_t RecentlyDisconnectedTrackingTime; // 0x110(0x04)
	char pad_114[0x3c]; // 0x114(0x3c)
	struct UWorld* World; // 0x150(0x08)
	struct UPackage* WorldPackage; // 0x158(0x08)
	char pad_160[0x20]; // 0x160(0x20)
	struct UObject* NetConnectionClass; // 0x180(0x08)
	struct UObject* ReplicationDriverClass; // 0x188(0x08)
	char pad_190[0x10]; // 0x190(0x10)
	struct FName NetDriverName; // 0x1a0(0x0c)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x1b0(0x10)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1c0(0x50)
	struct TArray<struct UChannel*> ActorChannelPool; // 0x210(0x10)
	char pad_220[0x8]; // 0x220(0x08)
	float Time; // 0x228(0x04)
	char pad_22C[0x54c]; // 0x22c(0x54c)
	struct UReplicationDriver* ReplicationDriver; // 0x778(0x08)
	char pad_780[0x60]; // 0x780(0x60)
};

// Class Engine.OnlineEngineInterface
// Size: 0x30 (Inherited: 0x30)
struct UOnlineEngineInterface : UObject {
};

// Class Engine.OnlineSession
// Size: 0x30 (Inherited: 0x30)
struct UOnlineSession : UObject {
};

// Class Engine.PrimaryDataAsset
// Size: 0x38 (Inherited: 0x38)
struct UPrimaryDataAsset : UDataAsset {
};

// Class Engine.Brush
// Size: 0x408 (Inherited: 0x3d0)
struct ABrush : AActor {
	enum class EBrushType BrushType; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	struct FColor BrushColor; // 0x3d4(0x04)
	int32_t PolyFlags; // 0x3d8(0x04)
	char bColored : 1; // 0x3dc(0x01)
	char bSolidWhenSelected : 1; // 0x3dc(0x01)
	char bSolidAlways : 1; // 0x3dc(0x01)
	char bPlaceableFromClassBrowser : 1; // 0x3dc(0x01)
	char bNotForClientOrServer : 1; // 0x3dc(0x01)
	char pad_3DC_5 : 3; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	struct UModel* Brush; // 0x3e0(0x08)
	struct UBrushComponent* BrushComponent; // 0x3e8(0x08)
	char bInManipulation : 1; // 0x3f0(0x01)
	char pad_3F0_1 : 7; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x3f8(0x10)
};

// Class Engine.Volume
// Size: 0x408 (Inherited: 0x408)
struct AVolume : ABrush {
};

// Class Engine.World
// Size: 0x870 (Inherited: 0x30)
struct UWorld : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct ULevel* PersistentLevel; // 0x38(0x08)
	struct UNetDriver* NetDriver; // 0x40(0x08)
	struct ULineBatchComponent* LineBatcher; // 0x48(0x08)
	struct ULineBatchComponent* PersistentLineBatcher; // 0x50(0x08)
	struct ULineBatchComponent* ForegroundLineBatcher; // 0x58(0x08)
	struct AGameNetworkManager* NetworkManager; // 0x60(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x68(0x08)
	struct TArray<struct UObject*> ExtraReferencedObjects; // 0x70(0x10)
	struct TArray<struct UObject*> PerModuleDataObjects; // 0x80(0x10)
	struct TArray<struct ULevelStreaming*> StreamingLevels; // 0x90(0x10)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0xa0(0x28)
	struct FString StreamingLevelsPrefix; // 0xc8(0x10)
	struct ULevel* CurrentLevelPendingVisibility; // 0xd8(0x08)
	struct ULevel* CurrentLevelPendingInvisibility; // 0xe0(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xe8(0x08)
	struct AParticleEventManager* MyParticleEventManager; // 0xf0(0x08)
	bool bAresLevelIgnoresZPrepass; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct AStaticMeshActor* AresZPrepassMesh; // 0x100(0x08)
	struct APhysicsVolume* DefaultPhysicsVolume; // 0x108(0x08)
	char pad_110[0x18]; // 0x110(0x18)
	char pad_128_0 : 1; // 0x128(0x01)
	char bAreConstraintsDirty : 1; // 0x128(0x01)
	char pad_128_2 : 6; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct UNavigationSystemBase* NavigationSystem; // 0x130(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x138(0x08)
	struct AGameStateBase* GameState; // 0x140(0x08)
	struct UAISystemBase* AISystem; // 0x148(0x08)
	struct UAvoidanceManager* AvoidanceManager; // 0x150(0x08)
	struct TArray<struct ULevel*> Levels; // 0x158(0x10)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x168(0x10)
	char pad_178[0x28]; // 0x178(0x28)
	struct UGameInstance* OwningGameInstance; // 0x1a0(0x08)
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x1a8(0x10)
	struct UCanvas* CanvasForRenderingToTarget; // 0x1b8(0x08)
	struct UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1c0(0x08)
	char pad_1C8[0x68]; // 0x1c8(0x68)
	struct TSet<struct UActorComponent*> ComponentsThatNeedPreEndOfFrameSync; // 0x230(0x50)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x280(0x10)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x290(0x10)
	char pad_2A0[0x3b0]; // 0x2a0(0x3b0)
	struct UWorldComposition* WorldComposition; // 0x650(0x08)
	char pad_658[0x90]; // 0x658(0x90)
	bool bFlushNetConnectionsAfterFirstActorTick; // 0x6e8(0x01)
	char pad_6E9[0x7]; // 0x6e9(0x07)
	struct FWorldPSCPool PSCPool; // 0x6f0(0x58)
	char pad_748[0xc8]; // 0x748(0xc8)
	struct FParticleDecalManager ParticleDecalManager; // 0x810(0x60)

	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x54380e0
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed // (Final|Native|Public) // @ game+0x54380c0
};

// Class Engine.InterpTrack
// Size: 0x78 (Inherited: 0x30)
struct UInterpTrack : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UInterpTrack*> SubTracks; // 0x40(0x10)
	struct UInterpTrackInst* TrackInstClass; // 0x50(0x08)
	enum class ETrackActiveCondition ActiveCondition; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FString TrackTitle; // 0x60(0x10)
	char bOnePerGroup : 1; // 0x70(0x01)
	char bDirGroupOnly : 1; // 0x70(0x01)
	char bDisableTrack : 1; // 0x70(0x01)
	char bIsSelected : 1; // 0x70(0x01)
	char bIsAnimControlTrack : 1; // 0x70(0x01)
	char bSubTrackOnly : 1; // 0x70(0x01)
	char bVisible : 1; // 0x70(0x01)
	char bIsRecording : 1; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.InterpTrackVectorBase
// Size: 0x98 (Inherited: 0x78)
struct UInterpTrackVectorBase : UInterpTrack {
	struct FInterpCurveVector VectorTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.InterpTrackFloatBase
// Size: 0x98 (Inherited: 0x78)
struct UInterpTrackFloatBase : UInterpTrack {
	struct FInterpCurveFloat FloatTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.InterpTrackInst
// Size: 0x30 (Inherited: 0x30)
struct UInterpTrackInst : UObject {
};

// Class Engine.CameraShakeBase
// Size: 0xb0 (Inherited: 0x30)
struct UCameraShakeBase : UObject {
	bool bSingleInstance; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ShakeScale; // 0x34(0x04)
	struct APlayerCameraManager* CameraManager; // 0x38(0x08)
	char pad_40[0x70]; // 0x40(0x70)
};

// Class Engine.MaterialExpression
// Size: 0x48 (Inherited: 0x30)
struct UMaterialExpression : UObject {
	struct UMaterial* Material; // 0x30(0x08)
	struct UMaterialFunction* Function; // 0x38(0x08)
	char bIsParameterExpression : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionTextureBase : UMaterialExpression {
	struct UTexture* Texture; // 0x48(0x08)
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0x70 (Inherited: 0x50)
struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase {
	struct FExpressionInput Coordinates; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0x98 (Inherited: 0x70)
struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample {
	struct FName ParameterName; // 0x70(0x0c)
	struct FGuid ExpressionGUID; // 0x7c(0x10)
	struct FName Group; // 0x8c(0x0c)
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0x98 (Inherited: 0x98)
struct UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.Character
// Size: 0x670 (Inherited: 0x430)
struct ACharacter : APawn {
	struct USkeletalMeshComponent* Mesh; // 0x430(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x438(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x440(0x08)
	struct UAnimInstanceReplicationComponent* AnimInstanceReplicationComponent; // 0x448(0x08)
	struct FBasedMovementInfo BasedMovement; // 0x450(0x30)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x480(0x30)
	float AnimRootMotionTranslationScale; // 0x4b0(0x04)
	struct FVector BaseTranslationOffset; // 0x4b4(0x0c)
	struct FQuat BaseRotationOffset; // 0x4c0(0x10)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x4d0(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x4d4(0x04)
	char ReplicatedMovementMode; // 0x4d8(0x01)
	bool bInBaseReplication; // 0x4d9(0x01)
	char bNetworkMovement : 1; // 0x4da(0x01)
	char pad_4DA_1 : 7; // 0x4da(0x01)
	char pad_4DB[0x1]; // 0x4db(0x01)
	float CrouchedEyeHeight; // 0x4dc(0x04)
	char bProxyIsJumpForceApplied : 1; // 0x4e0(0x01)
	char bPressedJump : 1; // 0x4e0(0x01)
	char bClientUpdating : 1; // 0x4e0(0x01)
	char bClientWasFalling : 1; // 0x4e0(0x01)
	char bClientResimulateRootMotion : 1; // 0x4e0(0x01)
	char bClientResimulateRootMotionSources : 1; // 0x4e0(0x01)
	char bSimGravityDisabled : 1; // 0x4e0(0x01)
	char bServerMoveIgnoreRootMotion : 1; // 0x4e0(0x01)
	char bWasJumping : 1; // 0x4e1(0x01)
	char pad_4E1_1 : 7; // 0x4e1(0x01)
	char pad_4E2[0x2]; // 0x4e2(0x02)
	float JumpKeyHoldTime; // 0x4e4(0x04)
	float JumpForceTimeRemaining; // 0x4e8(0x04)
	float ProxyJumpForceStartedTime; // 0x4ec(0x04)
	float JumpMaxHoldTime; // 0x4f0(0x04)
	int32_t JumpMaxCount; // 0x4f4(0x04)
	int32_t JumpCurrentCount; // 0x4f8(0x04)
	int32_t JumpCurrentCountPreJump; // 0x4fc(0x04)
	char pad_500[0x8]; // 0x500(0x08)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x508(0x10)
	char pad_518[0x10]; // 0x518(0x10)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x528(0x10)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x538(0x10)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x548(0x38)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x580(0x40)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x5c0(0x10)
	struct FRepRootMotionMontage RepRootMotion; // 0x5d0(0x98)
	char pad_668[0x8]; // 0x668(0x08)

	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // @ game+0x519a3b0
	void StopJumping(); // Function Engine.Character.StopJumping // (Native|Public|BlueprintCallable) // @ game+0x519a380
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.Character.StopAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x519a2f0
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5199990
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName, float StartTime); // Function Engine.Character.PlayAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x5199800
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x5199660
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion // (Final|Native|Public) // @ game+0x5199640
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement // (Native|Public) // @ game+0x5199610
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp // (Final|Native|Public) // @ game+0x51995f0
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x33d1d50
	void OnJumped(); // Function Engine.Character.OnJumped // (Native|Event|Public|BlueprintEvent) // @ game+0x1cba4a0
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51994c0
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void Jump(); // Function Engine.Character.Jump // (Native|Public|BlueprintCallable) // @ game+0x2f7f990
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198f80
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198f50
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f814a0
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198f20
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51986d0
	float GetCrouchAmount(); // Function Engine.Character.GetCrouchAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198650
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198620
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51985c0
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198590
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch // (Native|Public|BlueprintCallable) // @ game+0x51984c0
	void ClientMoveResponsePacked(struct FCharacterMoveResponsePackedBits PackedBits); // Function Engine.Character.ClientMoveResponsePacked // (Net|Native|Event|Public|NetClient|NetValidate) // @ game+0x5197ff0
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5197fc0
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5197f90
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5197f60
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2f828e0
	bool CanJump(); // Function Engine.Character.CanJump // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5197060
	bool CanCrouch(); // Function Engine.Character.CanCrouch // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5197020
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5196dc0
};

// Class Engine.SplineComponent
// Size: 0x640 (Inherited: 0x550)
struct USplineComponent : UPrimitiveComponent {
	struct FSplineCurves SplineCurves; // 0x548(0x70)
	struct FInterpCurveVector SplineInfo; // 0x5b8(0x18)
	struct FInterpCurveQuat SplineRotInfo; // 0x5d0(0x18)
	struct FInterpCurveVector SplineScaleInfo; // 0x5e8(0x18)
	struct FInterpCurveFloat SplineReparamTable; // 0x600(0x18)
	bool bAllowSplineEditingPerInstance; // 0x618(0x01)
	int32_t ReparamStepsPerSegment; // 0x61c(0x04)
	float Duration; // 0x620(0x04)
	bool bStationaryEndpoints; // 0x624(0x01)
	bool bSplineHasBeenEdited; // 0x625(0x01)
	bool bModifiedByConstructionScript; // 0x626(0x01)
	bool bInputSplinePointsToConstructionScript; // 0x627(0x01)
	bool bDrawDebug; // 0x628(0x01)
	bool bClosedLoop; // 0x629(0x01)
	bool bLoopPositionOverride; // 0x62a(0x01)
	float LoopPosition; // 0x62c(0x04)
	struct FVector DefaultUpVector; // 0x630(0x0c)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline // (Native|Public|BlueprintCallable) // @ game+0x2f47f50
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x54077b0
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5407640
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2cf5630
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5407470
	void SetTangentColor(struct FLinearColor& TangentColor); // Function Engine.SplineComponent.SetTangentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2cf5630
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5407300
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5407240
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType // (Final|Native|Public|BlueprintCallable) // @ game+0x5406ff0
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5407100
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5406f30
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2cf5630
	void SetScaleAtSplinePoint(int32_t PointIndex, struct FVector& InScaleVector, bool bUpdateSpline); // Function Engine.SplineComponent.SetScaleAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5406d40
	void SetRotationAtSplinePoint(int32_t PointIndex, struct FRotator& InRotation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetRotationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5406bd0
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5406a60
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x54069d0
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x54068f0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x54067d0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop // (Final|Native|Public|BlueprintCallable) // @ game+0x5406700
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint // (Final|Native|Public|BlueprintCallable) // @ game+0x5406630
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406600
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406550
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406460
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54063b0
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54062c0
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406210
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406160
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5406070
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405fc0
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405ec0
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405db0
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405c80
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405ba0
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405ab0
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54059c0
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405820
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54056d0
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405570
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405410
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54052e0
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403980
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54051f0
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405100
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405060
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5405030
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404eb0
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404e00
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404d60
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404cc0
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404b90
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404ab0
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54049c0
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54048d0
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54047b0
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54046e0
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404600
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404520
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54043f0
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404310
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404220
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404130
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404100
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e32c30
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403fd0
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403ef0
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403e00
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403d10
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403b90
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403a60
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403980
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54038e0
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54037f0
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54036f0
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403650
	float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x54035b0
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403480
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54033a0
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54032b0
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54031c0
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403120
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5403040
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402f50
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402df0
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402d00
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402c50
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402b60
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402a80
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402990
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x54028a0
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402800
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5402710
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints // (Final|Native|Public|BlueprintCallable) // @ game+0x5402680
	void AddSplineWorldPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineWorldPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x54025e0
	void AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5402470
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5402350
	void AddSplineLocalPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineLocalPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x54022c0
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x54021c0
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x54020b0
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x40 (Inherited: 0x30)
struct UAnimBoneCompressionCodec : UObject {
	struct FString Description; // 0x30(0x10)
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x30 (Inherited: 0x30)
struct UAnimCurveCompressionCodec : UObject {
};

// Class Engine.SkeletalMeshComponent
// Size: 0x1010 (Inherited: 0x7b0)
struct USkeletalMeshComponent : USkinnedMeshComponent {
	char pad_7B0[0x8]; // 0x7b0(0x08)
	struct UObject* AnimBlueprintGeneratedClass; // 0x7b8(0x08)
	struct UAnimInstance* AnimClass; // 0x7c0(0x08)
	struct UAnimInstance* AnimScriptInstance; // 0x7c8(0x08)
	struct UAnimInstance* PostProcessAnimInstance; // 0x7d0(0x08)
	struct FSingleAnimationPlayData AnimationData; // 0x7d8(0x18)
	char pad_7F0[0x10]; // 0x7f0(0x10)
	struct FVector RootBoneTranslation; // 0x800(0x0c)
	struct FVector LineCheckBoundsScale; // 0x80c(0x0c)
	char pad_818[0x30]; // 0x818(0x30)
	struct TArray<struct UAnimInstance*> LinkedInstances; // 0x848(0x10)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x858(0x10)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x868(0x10)
	char pad_878[0x150]; // 0x878(0x150)
	float GlobalAnimRateScale; // 0x9c8(0x04)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x9cc(0x01)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x9cd(0x01)
	char pad_9CE[0x1]; // 0x9ce(0x01)
	enum class EAnimationMode AnimationMode; // 0x9cf(0x01)
	char pad_9D0[0x1]; // 0x9d0(0x01)
	char bDisablePostProcessBlueprint : 1; // 0x9d1(0x01)
	char pad_9D1_1 : 1; // 0x9d1(0x01)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x9d1(0x01)
	char pad_9D1_3 : 1; // 0x9d1(0x01)
	char bHasValidBodies : 1; // 0x9d1(0x01)
	char bBlendPhysics : 1; // 0x9d1(0x01)
	char bEnablePhysicsOnDedicatedServer : 1; // 0x9d1(0x01)
	char bUpdateJointsFromAnimation : 1; // 0x9d1(0x01)
	char bDisableClothSimulation : 1; // 0x9d2(0x01)
	char pad_9D2_1 : 7; // 0x9d2(0x01)
	char pad_9D3[0x5]; // 0x9d3(0x05)
	char pad_9D8_0 : 1; // 0x9d8(0x01)
	char bDisableRigidBodyAnimNode : 1; // 0x9d8(0x01)
	char bAllowAnimCurveEvaluation : 1; // 0x9d8(0x01)
	char bDisableAnimCurves : 1; // 0x9d8(0x01)
	char pad_9D8_4 : 3; // 0x9d8(0x01)
	char bCollideWithEnvironment : 1; // 0x9d8(0x01)
	char bCollideWithAttachedChildren : 1; // 0x9d9(0x01)
	char bLocalSpaceSimulation : 1; // 0x9d9(0x01)
	char bResetAfterTeleport : 1; // 0x9d9(0x01)
	char pad_9D9_3 : 1; // 0x9d9(0x01)
	char bDeferKinematicBoneUpdate : 1; // 0x9d9(0x01)
	char bNoSkeletonUpdate : 1; // 0x9d9(0x01)
	char bPauseAnims : 1; // 0x9d9(0x01)
	char bUseRefPoseOnInitAnim : 1; // 0x9d9(0x01)
	char bEnablePerPolyCollision : 1; // 0x9da(0x01)
	char bForceRefpose : 1; // 0x9da(0x01)
	char bOnlyAllowAutonomousTickPose : 1; // 0x9da(0x01)
	char bIsAutonomousTickPose : 1; // 0x9da(0x01)
	char bOldForceRefPose : 1; // 0x9da(0x01)
	char bShowPrePhysBones : 1; // 0x9da(0x01)
	char bRequiredBonesUpToDate : 1; // 0x9da(0x01)
	char bAnimTreeInitialised : 1; // 0x9da(0x01)
	char bIncludeComponentLocationIntoBounds : 1; // 0x9db(0x01)
	char bEnableLineCheckWithBounds : 1; // 0x9db(0x01)
	char bUseBendingElements : 1; // 0x9db(0x01)
	char bUseTetrahedralConstraints : 1; // 0x9db(0x01)
	char bUseThinShellVolumeConstraints : 1; // 0x9db(0x01)
	char bUseSelfCollisions : 1; // 0x9db(0x01)
	char bUseContinuousCollisionDetection : 1; // 0x9db(0x01)
	char bPropagateCurvesToSlaves : 1; // 0x9db(0x01)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x9dc(0x01)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x9dc(0x01)
	char bForceEvaluateAnimation : 1; // 0x9dc(0x01)
	char bForceUpdateAnimation : 1; // 0x9dc(0x01)
	char pad_9DC_4 : 1; // 0x9dc(0x01)
	char bReplicated : 1; // 0x9dc(0x01)
	char pad_9DC_6 : 2; // 0x9dc(0x01)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x9dd(0x01)
	char pad_9DD_1 : 7; // 0x9dd(0x01)
	uint16_t CachedAnimCurveUidVersion; // 0x9de(0x02)
	enum class EClothMassMode MassMode; // 0x9e0(0x01)
	char pad_9E1[0x3]; // 0x9e1(0x03)
	float UniformMass; // 0x9e4(0x04)
	float TotalMass; // 0x9e8(0x04)
	float Density; // 0x9ec(0x04)
	float MinPerParticleMass; // 0x9f0(0x04)
	float ClothBlendWeight; // 0x9f4(0x04)
	float EdgeStiffness; // 0x9f8(0x04)
	float BendingStiffness; // 0x9fc(0x04)
	float AreaStiffness; // 0xa00(0x04)
	float VolumeStiffness; // 0xa04(0x04)
	float StrainLimitingStiffness; // 0xa08(0x04)
	float ShapeTargetStiffness; // 0xa0c(0x04)
	bool bWaitForParallelClothTask; // 0xa10(0x01)
	char pad_A11[0x7]; // 0xa11(0x07)
	struct TArray<struct FName> DisallowedAnimCurves; // 0xa18(0x10)
	struct UBodySetup* BodySetup; // 0xa28(0x08)
	char pad_A30[0x8]; // 0xa30(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0xa38(0x10)
	struct UClothingSimulationFactory* ClothingSimulationFactory; // 0xa48(0x08)
	char pad_A50[0xc8]; // 0xa50(0xc8)
	float TeleportDistanceThreshold; // 0xb18(0x04)
	float TeleportRotationThreshold; // 0xb1c(0x04)
	char pad_B20[0x8]; // 0xb20(0x08)
	uint32_t LastPoseTickFrame; // 0xb28(0x04)
	char pad_B2C[0x54]; // 0xb2c(0x54)
	struct UClothingSimulationInteractor* ClothingInteractor; // 0xb80(0x08)
	char pad_B88[0xe8]; // 0xb88(0xe8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xc70(0x10)
	char pad_C80[0x390]; // 0xc80(0x390)

	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5bb0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5b20
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5b00
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5a60
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5a40
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5a20
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d5940
	void SetUpdateClothInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x2bf80c0
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x2bf80c0
	void SetTeleportRotationThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x53d58c0
	void SetTeleportDistanceThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5840
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5760
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x53d56e0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5660
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow // (Native|Public|BlueprintCallable) // @ game+0x53d5520
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x53d53f0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5360
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5230
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5130
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x53d50a0
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves // (Final|Native|Public|BlueprintCallable) // @ game+0x53d5010
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4f20
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4de0
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4d60
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x53d4c60
	void SetAnimClass(struct UObject* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass // (Native|Public|BlueprintCallable) // @ game+0x53d4ac0
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4be0
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4b50
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4940
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4770
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d4840
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d46e0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x53d45b0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4480
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4310
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x53d4280
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x53d41a0
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d4070
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d3ee0
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3ec0
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3ea0
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3e20
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3e00
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3de0
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3d10
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3c80
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3ac0
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x53d39d0
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3940
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3730
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3700
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d36d0
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x53d3620
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d35f0
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d35c0
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d35c0
	bool GetStringAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d3400
	bool GetStringAttribute(struct FName& BoneName, struct FName& AttributeName, struct FString DefaultValue, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d31a0
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3160
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3130
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3100
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d30d0
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d3020
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2f70
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2ed0
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2dc0
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2d10
	bool GetIntegerAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d2b50
	bool GetIntegerAttribute(struct FName& BoneName, struct FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d2980
	bool GetFloatAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d27c0
	bool GetFloatAttribute(struct FName& BoneName, struct FName& AttributeName, float DefaultValue, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d25f0
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d25c0
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2590
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d23e0
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2380
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d23b0
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2280
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2220
	struct UObject* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass // (Final|Native|Public) // @ game+0x53d21f0
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2250
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d2190
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d21c0
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset // (Final|Native|Public|BlueprintCallable) // @ game+0x53d2170
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport // (Final|Native|Public|BlueprintCallable) // @ game+0x53d2150
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName // (Final|Native|Public|BlueprintCallable) // @ game+0x53d20a0
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x53d2080
	struct FBoxSphereBounds CalcRefPoseTightBounds(struct FRotator& AxisRotation); // Function Engine.SkeletalMeshComponent.CalcRefPoseTightBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53d1fc0
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53d1e70
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53d1e50
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x53d1d60
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53d1bd0
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53d1a40
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53d1920
};

// Class Engine.AnimInstance
// Size: 0x300 (Inherited: 0x30)
struct UAnimInstance : UObject {
	struct USkeleton* CurrentSkeleton; // 0x30(0x08)
	enum class ERootMotionMode RootMotionMode; // 0x38(0x01)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x39(0x01)
	char bUsingCopyPoseFromMesh : 1; // 0x39(0x01)
	char pad_39_2 : 2; // 0x39(0x01)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x39(0x01)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x39(0x01)
	char bQueueMontageEvents : 1; // 0x39(0x01)
	char pad_39_7 : 1; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x60(0x10)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x70(0x10)
	char pad_80[0x88]; // 0x80(0x88)
	struct FAnimNotifyQueue NotifyQueue; // 0x108(0x80)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x188(0x10)
	char pad_198[0xb0]; // 0x198(0xb0)
	bool bAccumulateRootMotion; // 0x248(0x01)
	char pad_249[0x6f]; // 0x249(0x6f)
	struct UAnimInstanceReplicationComponent* AnimInstanceReplicationComponent; // 0x2b8(0x08)
	char pad_2C0[0x40]; // 0x2c0(0x40)

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x513f6f0
	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x513f660
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513f620
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x513f530
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x513f450
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x5128210
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x513f3c0
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x513f330
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x513f240
	void SetInstanceTransitionCrossfadeDurationOverride(int32_t MachineIndex, float OverrideCrossFadeDuration); // Function Engine.AnimInstance.SetInstanceTransitionCrossfadeDurationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x513f170
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot // (Native|Public|BlueprintCallable) // @ game+0x513f0c0
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x513f040
	void ResetAnimGraph(); // Function Engine.AnimInstance.ResetAnimGraph // (Final|Native|Public|BlueprintCallable) // @ game+0x513f020
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x513eda0
	float PlaySlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x513ebb0
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x513eac0
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x513e9f0
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x513e920
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x513e850
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection // (Final|Native|Public|BlueprintCallable) // @ game+0x513e710
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x513e680
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play // (Final|Native|Public|BlueprintCallable) // @ game+0x513e4d0
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x513e440
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x513e350
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0x513e260
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513e1c0
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513e120
	void Montage_GroupStop(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_GroupStop // (Final|Native|Public|BlueprintCallable) // @ game+0x513e030
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513df90
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513def0
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513de50
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513dda0
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513dd00
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x513dc30
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x513db40
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x513dab0
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513d910
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513d820
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cfdd80
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513d710
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x513d5c0
	float GetTimeSpentOutsideState(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetTimeSpentOutsideState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d4f0
	float GetTimeSinceLeavingState(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetTimeSinceLeavingState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d420
	float GetTimeSinceEnteringState(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetTimeSinceEnteringState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d350
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513d280
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d1b0
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d0e0
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513d010
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513cf40
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513ce70
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513ce40
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513ce10
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c583a0
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513cde0
	void GetLinkedAnimLayerInstancesByGroup(struct FName InGroup, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x513ccd0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(struct FName InGroup, struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513cbd0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513cb20
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513ca80
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x513c970
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513c8c0
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c7f0
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c720
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c650
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c580
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c4e0
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c440
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c3a0
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c300
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c260
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c1c0
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513c120
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513c070
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x513bfc0
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x513bf90
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x513bee0
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x513bde0
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x513bdc0
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x513bcc0
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
};

// Class Engine.AudioComponent
// Size: 0x910 (Inherited: 0x290)
struct UAudioComponent : USceneComponent {
	struct USoundBase* Sound; // 0x288(0x08)
	struct TArray<struct FAudioComponentParam> InstanceParameters; // 0x290(0x10)
	struct USoundClass* SoundClassOverride; // 0x2a0(0x08)
	char bAutoDestroy : 1; // 0x2a8(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x2a8(0x01)
	char bShouldRemainActiveIfDropped : 1; // 0x2a8(0x01)
	char bAllowSpatialization : 1; // 0x2a8(0x01)
	char bOverrideAttenuation : 1; // 0x2a8(0x01)
	char bOverrideSubtitlePriority : 1; // 0x2a8(0x01)
	char bIsUISound : 1; // 0x2a8(0x01)
	char bEnableLowPassFilter : 1; // 0x2a8(0x01)
	char bOverridePriority : 1; // 0x2a9(0x01)
	char bSuppressSubtitles : 1; // 0x2a9(0x01)
	char pad_2B1_2 : 2; // 0x2b1(0x01)
	char bAutoManageAttachment : 1; // 0x2aa(0x01)
	struct FName AudioComponentUserID; // 0x2b0(0x0c)
	float PitchModulationMin; // 0x2bc(0x04)
	float PitchModulationMax; // 0x2c0(0x04)
	float VolumeModulationMin; // 0x2c4(0x04)
	float VolumeModulationMax; // 0x2c8(0x04)
	float VolumeMultiplier; // 0x2cc(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x2d0(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x2d4(0x04)
	float Priority; // 0x2d8(0x04)
	float SubtitlePriority; // 0x2dc(0x04)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x2e0(0x08)
	float PitchMultiplier; // 0x2e8(0x04)
	float LowPassFilterFrequency; // 0x2ec(0x04)
	char pad_2F1_5 : 3; // 0x2f1(0x01)
	char pad_2F2[0x6]; // 0x2f2(0x06)
	struct USoundAttenuation* AttenuationSettings; // 0x2f8(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x300(0x3a8)
	struct USoundConcurrency* ConcurrencySettings; // 0x6a8(0x08)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x6b0(0x50)
	char pad_700[0xc]; // 0x700(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x70c(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x70d(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x70e(0x01)
	char pad_70F[0x1]; // 0x70f(0x01)
	struct FSoundModulationDefaultRoutingSettings ModulationRouting; // 0x710(0x48)
	struct FMulticastInlineDelegate OnAudioPlayStateChanged; // 0x758(0x10)
	char pad_768[0x18]; // 0x768(0x18)
	struct FMulticastInlineDelegate OnAudioVirtualizationChanged; // 0x780(0x10)
	char pad_790[0x18]; // 0x790(0x18)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x7a8(0x10)
	char pad_7B8[0x18]; // 0x7b8(0x18)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x7d0(0x10)
	char pad_7E0[0x18]; // 0x7e0(0x18)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x7f8(0x10)
	char pad_808[0x18]; // 0x808(0x18)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x820(0x10)
	char pad_830[0x18]; // 0x830(0x18)
	struct FDelegate OnQueueSubtitles; // 0x848(0x14)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x85c(0x08)
	struct FName AutoAttachSocketName; // 0x864(0x0c)
	char pad_870[0xa0]; // 0x870(0xa0)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x5167660
	void Stop(); // Function Engine.AudioComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x5167630
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x5167540
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x51674c0
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound // (Final|Native|Public|BlueprintCallable) // @ game+0x5167430
	void SetSubmixSend(struct USoundSubmixBase* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend // (Final|Native|Public|BlueprintCallable) // @ game+0x51672e0
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x5167190
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x51670c0
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound // (Final|Native|Public|BlueprintCallable) // @ game+0x5167030
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x5166e90
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x5166e00
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency // (Final|Native|Public|BlueprintCallable) // @ game+0x5166d80
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x5166cf0
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x5166c10
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x5166aa0
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x51666a0
	void SetAudioBusSendPreEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x51665d0
	void SetAudioBusSendPostEffect(struct UAudioBus* AudioBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x5166500
	void PlayQuantized(struct UObject* WorldContextObject, struct UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, struct FDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve); // Function Engine.AudioComponent.PlayQuantized // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x51661b0
	void Play(float StartTime); // Function Engine.AudioComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x5166120
	bool IsVirtualized(); // Function Engine.AudioComponent.IsVirtualized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51660f0
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2bcd2b0
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51660c0
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5166090
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5166060
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165f80
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165e50
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165d90
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165ce0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut // (Native|Public|BlueprintCallable) // @ game+0x5165bc0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn // (Native|Public|BlueprintCallable) // @ game+0x5165a50
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165850
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x5165740
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5165660
};

// Class Engine.MovementComponent
// Size: 0x128 (Inherited: 0xe8)
struct UMovementComponent : UActorComponent {
	struct USceneComponent* UpdatedComponent; // 0xe8(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0xf0(0x08)
	char pad_F8[0x4]; // 0xf8(0x04)
	struct FVector Velocity; // 0xfc(0x0c)
	struct FVector PlaneConstraintNormal; // 0x108(0x0c)
	struct FVector PlaneConstraintOrigin; // 0x114(0x0c)
	char bUpdateOnlyIfRendered : 1; // 0x120(0x01)
	char bAutoUpdateTickRegistration : 1; // 0x120(0x01)
	char bTickBeforeOwner : 1; // 0x120(0x01)
	char bAutoRegisterUpdatedComponent : 1; // 0x120(0x01)
	char bConstrainToPlane : 1; // 0x120(0x01)
	char bSnapToPlaneAtStart : 1; // 0x120(0x01)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0x120(0x01)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0x120(0x01)
	char pad_121[0x2]; // 0x121(0x02)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x123(0x01)
	char pad_124[0x4]; // 0x124(0x04)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // @ game+0x2f99d30
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane // (Native|Public|BlueprintCallable) // @ game+0x2b633b0
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent // (Native|Public|BlueprintCallable) // @ game+0x532a040
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5329eb0
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5329e10
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5329d20
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled // (Native|Public|BlueprintCallable) // @ game+0x5329c80
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting // (Native|Public|BlueprintCallable) // @ game+0x5329bf0
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged // (Native|Public) // @ game+0x5128050
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5329550
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329510
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53294d0
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329370
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329330
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53292f0
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5124d70
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53292b0
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329270
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5329050
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5328f70
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5328eb0
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5328df0
};

// Class Engine.NavMovementComponent
// Size: 0x170 (Inherited: 0x128)
struct UNavMovementComponent : UMovementComponent {
	struct FNavAgentProperties NavAgentProps; // 0x128(0x38)
	float FixedPathBrakingDistance; // 0x160(0x04)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x164(0x01)
	char bUseAccelerationForPaths : 1; // 0x164(0x01)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x164(0x01)
	char pad_164_3 : 5; // 0x164(0x01)
	struct FMovementProperties MovementState; // 0x165(0x01)
	char pad_166[0x2]; // 0x166(0x02)
	struct UObject* PathFollowingComp; // 0x168(0x08)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // @ game+0x5331280
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement // (Native|Public|BlueprintCallable) // @ game+0x2b63440
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2bce7b0
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2bcd2b0
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5331240
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5331200
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53311c0
};

// Class Engine.PawnMovementComponent
// Size: 0x178 (Inherited: 0x170)
struct UPawnMovementComponent : UNavMovementComponent {
	struct APawn* PawnOwner; // 0x170(0x08)

	struct FVector K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363a70
	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363ba0
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363a70
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c92e40
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5363910
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53636d0
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53630c0
};

// Class Engine.CharacterMovementComponent
// Size: 0xbd0 (Inherited: 0x178)
struct UCharacterMovementComponent : UPawnMovementComponent {
	char pad_178[0x10]; // 0x178(0x10)
	struct ACharacter* CharacterOwner; // 0x188(0x08)
	float GravityScale; // 0x190(0x04)
	float MaxStepHeight; // 0x194(0x04)
	bool bBackOffDuringStep; // 0x198(0x01)
	bool bStepUpWhenMovingVertically; // 0x199(0x01)
	char pad_19A[0x2]; // 0x19a(0x02)
	float JumpZVelocity; // 0x19c(0x04)
	float JumpOffJumpZFactor; // 0x1a0(0x04)
	float JumpStepUpUnits; // 0x1a4(0x04)
	float WalkableFloorAngle; // 0x1a8(0x04)
	float WalkableFloorZ; // 0x1ac(0x04)
	enum class EMovementMode MovementMode; // 0x1b0(0x01)
	char CustomMovementMode; // 0x1b1(0x01)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x1b2(0x01)
	char pad_1B3[0x1]; // 0x1b3(0x01)
	float GroundFriction; // 0x1b4(0x04)
	char pad_1B8[0x24]; // 0x1b8(0x24)
	float MaxWalkSpeed; // 0x1dc(0x04)
	float MaxWalkSpeedCrouched; // 0x1e0(0x04)
	float MaxSwimSpeed; // 0x1e4(0x04)
	float MaxFlySpeed; // 0x1e8(0x04)
	float MaxCustomMovementSpeed; // 0x1ec(0x04)
	float MaxAcceleration; // 0x1f0(0x04)
	float MinAnalogWalkSpeed; // 0x1f4(0x04)
	float BrakingFrictionFactor; // 0x1f8(0x04)
	float BrakingFriction; // 0x1fc(0x04)
	float BrakingSubStepTime; // 0x200(0x04)
	float BrakingDecelerationWalking; // 0x204(0x04)
	float BrakingDecelerationFalling; // 0x208(0x04)
	float BrakingDecelerationSwimming; // 0x20c(0x04)
	float BrakingDecelerationFlying; // 0x210(0x04)
	float AirControl; // 0x214(0x04)
	float AirControlBoostMultiplier; // 0x218(0x04)
	float AirControlBoostVelocityThreshold; // 0x21c(0x04)
	float FallingLateralFriction; // 0x220(0x04)
	float CrouchedHalfHeight; // 0x224(0x04)
	float Buoyancy; // 0x228(0x04)
	float PerchRadiusThreshold; // 0x22c(0x04)
	float PerchAdditionalHeight; // 0x230(0x04)
	struct FRotator RotationRate; // 0x234(0x0c)
	char bUseSeparateBrakingFriction : 1; // 0x240(0x01)
	char bApplyGravityWhileJumping : 1; // 0x240(0x01)
	char bUseControllerDesiredRotation : 1; // 0x240(0x01)
	char bOrientRotationToMovement : 1; // 0x240(0x01)
	char bSweepWhileNavWalking : 1; // 0x240(0x01)
	char pad_240_5 : 1; // 0x240(0x01)
	char bMovementInProgress : 1; // 0x240(0x01)
	char bEnableScopedMovementUpdates : 1; // 0x240(0x01)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x241(0x01)
	char bForceMaxAccel : 1; // 0x241(0x01)
	char bRunPhysicsWithNoController : 1; // 0x241(0x01)
	char bForceNextFloorCheck : 1; // 0x241(0x01)
	char bShrinkProxyCapsule : 1; // 0x241(0x01)
	char bCanWalkOffLedges : 1; // 0x241(0x01)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x241(0x01)
	char pad_241_7 : 1; // 0x241(0x01)
	char pad_242_0 : 1; // 0x242(0x01)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x242(0x01)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x242(0x01)
	char bDeferUpdateMoveComponent : 1; // 0x242(0x01)
	char bEnablePhysicsInteraction : 1; // 0x242(0x01)
	char bTouchForceScaledToMass : 1; // 0x242(0x01)
	char bPushForceScaledToMass : 1; // 0x242(0x01)
	char bPushForceUsingZOffset : 1; // 0x242(0x01)
	char bScalePushForceToVelocity : 1; // 0x243(0x01)
	char pad_243_1 : 7; // 0x243(0x01)
	char pad_244[0x4]; // 0x244(0x04)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x248(0x08)
	float MaxOutOfWaterStepHeight; // 0x250(0x04)
	float OutofWaterZ; // 0x254(0x04)
	float Mass; // 0x258(0x04)
	float StandingDownwardForceScale; // 0x25c(0x04)
	float InitialPushForceFactor; // 0x260(0x04)
	float PushForceFactor; // 0x264(0x04)
	float PushForcePointZOffsetFactor; // 0x268(0x04)
	float TouchForceFactor; // 0x26c(0x04)
	float MinTouchForce; // 0x270(0x04)
	float MaxTouchForce; // 0x274(0x04)
	float RepulsionForce; // 0x278(0x04)
	struct FVector Acceleration; // 0x27c(0x0c)
	char pad_288[0x8]; // 0x288(0x08)
	struct FQuat LastUpdateRotation; // 0x290(0x10)
	struct FVector LastUpdateLocation; // 0x2a0(0x0c)
	struct FVector LastUpdateVelocity; // 0x2ac(0x0c)
	float ServerLastTransformUpdateTimeStamp; // 0x2b8(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x2bc(0x04)
	float ServerLastClientAdjustmentTime; // 0x2c0(0x04)
	struct FVector PendingImpulseToApply; // 0x2c4(0x0c)
	struct FVector PendingForceToApply; // 0x2d0(0x0c)
	float AnalogInputModifier; // 0x2dc(0x04)
	char pad_2E0[0xc]; // 0x2e0(0x0c)
	float MaxSimulationTimeStep; // 0x2ec(0x04)
	int32_t MaxSimulationIterations; // 0x2f0(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x2f4(0x04)
	float MaxDepenetrationWithGeometry; // 0x2f8(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x2fc(0x04)
	float MaxDepenetrationWithPawn; // 0x300(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x304(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x308(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x30c(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x310(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x314(0x04)
	float NetProxyShrinkRadius; // 0x318(0x04)
	float NetProxyShrinkHalfHeight; // 0x31c(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x320(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x324(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x328(0x04)
	float NetworkMinTimeBetweenClientAdjustments; // 0x32c(0x04)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x330(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x334(0x04)
	float LedgeCheckThreshold; // 0x338(0x04)
	float JumpOutOfWaterPitch; // 0x33c(0x04)
	struct FFindFloorResult CurrentFloor; // 0x340(0xa0)
	enum class EMovementMode DefaultLandMovementMode; // 0x3e0(0x01)
	enum class EMovementMode DefaultWaterMovementMode; // 0x3e1(0x01)
	enum class EMovementMode GroundMovementMode; // 0x3e2(0x01)
	char bMaintainHorizontalGroundVelocity : 1; // 0x3e3(0x01)
	char bImpartBaseVelocityX : 1; // 0x3e3(0x01)
	char bImpartBaseVelocityY : 1; // 0x3e3(0x01)
	char bImpartBaseVelocityZ : 1; // 0x3e3(0x01)
	char bImpartBaseAngularVelocity : 1; // 0x3e3(0x01)
	char bJustTeleported : 1; // 0x3e3(0x01)
	char pad_3E3_6 : 2; // 0x3e3(0x01)
	char bIsSimGravityDisabled : 1; // 0x3e4(0x01)
	char pad_3E4_1 : 7; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	char bNetworkUpdateReceived : 1; // 0x3e8(0x01)
	char bNetworkMovementModeChanged : 1; // 0x3e8(0x01)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x3e8(0x01)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x3e8(0x01)
	char bNotifyApex : 1; // 0x3e8(0x01)
	char bCheatFlying : 1; // 0x3e8(0x01)
	char bCrouchMaintainsBaseLocation : 1; // 0x3e8(0x01)
	char bIgnoreBaseRotation : 1; // 0x3e8(0x01)
	char bFastAttachedMove : 1; // 0x3e9(0x01)
	char bAlwaysCheckFloor : 1; // 0x3e9(0x01)
	char bUseFlatBaseForFloorChecks : 1; // 0x3e9(0x01)
	char bPerformingJumpOff : 1; // 0x3e9(0x01)
	char bWantsToLeaveNavWalking : 1; // 0x3e9(0x01)
	char bUseRVOAvoidance : 1; // 0x3e9(0x01)
	char bRequestedMoveUseAcceleration : 1; // 0x3e9(0x01)
	char pad_3E9_7 : 1; // 0x3e9(0x01)
	char bWasSimulatingRootMotion : 1; // 0x3ea(0x01)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x3ea(0x01)
	char bHasRequestedVelocity : 1; // 0x3ea(0x01)
	char bRequestedMoveWithMaxSpeed : 1; // 0x3ea(0x01)
	char bWasAvoidanceUpdated : 1; // 0x3ea(0x01)
	char pad_3EA_5 : 2; // 0x3ea(0x01)
	char bProjectNavMeshWalking : 1; // 0x3ea(0x01)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x3eb(0x01)
	char pad_3EB_1 : 7; // 0x3eb(0x01)
	char pad_3EC[0x10]; // 0x3ec(0x10)
	float AvoidanceConsiderationRadius; // 0x3fc(0x04)
	struct FVector RequestedVelocity; // 0x400(0x0c)
	int32_t AvoidanceUID; // 0x40c(0x04)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x410(0x04)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x414(0x04)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x418(0x04)
	float AvoidanceWeight; // 0x41c(0x04)
	struct FVector PendingLaunchVelocity; // 0x420(0x0c)
	char pad_42C[0xb0]; // 0x42c(0xb0)
	float NavMeshProjectionInterval; // 0x4dc(0x04)
	float NavMeshProjectionTimer; // 0x4e0(0x04)
	float NavMeshProjectionInterpSpeed; // 0x4e4(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x4e8(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x4ec(0x04)
	float NavWalkingFloorDistTolerance; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x4f8(0x30)
	struct FVector VelocityAppliedFromForces; // 0x528(0x0c)
	char pad_534[0x2c]; // 0x534(0x2c)
	float MinTimeBetweenTimeStampResets; // 0x560(0x04)
	char pad_564[0x4f4]; // 0x564(0x4f4)
	bool bAuthTeleportSinceLastMove; // 0xa58(0x01)
	bool bAuthTeleportSinceLastCorrectionSent; // 0xa59(0x01)
	bool bReceivedTeleportCorrectionAsLastCorrection; // 0xa5a(0x01)
	char pad_A5B[0x5]; // 0xa5b(0x05)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0xa60(0x38)
	struct FRootMotionSourceGroup ServerCorrectionRootMotion; // 0xa98(0x38)
	char pad_AD0[0x90]; // 0xad0(0x90)
	struct FRootMotionMovementParams RootMotionParams; // 0xb60(0x40)
	struct FVector AnimRootMotionVelocity; // 0xba0(0x0c)
	char pad_BAC[0x24]; // 0xbac(0x24)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // @ game+0x519a270
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x519a1f0
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode // (Native|Public|BlueprintCallable) // @ game+0x519a120
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x519a090
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x519a000
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5199f70
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid // (Final|Native|Public|BlueprintCallable) // @ game+0x5199ee0
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5199b70
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x5199ae0
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x5199a50
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5199490
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5199460
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5199420
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51992d0
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51990b0
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2bcd2b0
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198fb0
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198ef0
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198940
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198910
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51988d0
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198890
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198850
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198810
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b92380
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51987e0
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198790
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198760
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198710
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198690
	struct ACharacter* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb0370
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198560
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement // (Native|Public|BlueprintCallable) // @ game+0x2f98e80
	void ClientVeryShortAdjustPosition(struct FTimeStampIndex TimeStampIndex, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FJumpVariables CorrectedJumpVariables, struct FClientAdjustmentDebugInfo ClientAdjustmentDebugInfo, bool bIsTeleportCorrection); // Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x5198160
	void ClientAdjustRootMotionSourcePosition(struct FTimeStampIndex TimeStampIndex, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FJumpVariables CorrectedJumpVariables, struct FClientAdjustmentDebugInfo ClientAdjustmentDebugInfo); // Function Engine.CharacterMovementComponent.ClientAdjustRootMotionSourcePosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x5197a90
	void ClientAdjustRootMotionPosition(struct FTimeStampIndex TimeStampIndex, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FJumpVariables CorrectedJumpVariables, struct FClientAdjustmentDebugInfo ClientAdjustmentDebugInfo); // Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x51976a0
	void ClientAdjustPosition(struct FTimeStampIndex TimeStampIndex, struct FVector NewLoc, float NewCrouchAmount, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode, struct FJumpVariables CorrectedJumpVariables, struct FClientAdjustmentDebugInfo ClientAdjustmentDebugInfo, bool bIsTeleportCorrection); // Function Engine.CharacterMovementComponent.ClientAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x51972b0
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces // (Native|Public|BlueprintCallable) // @ game+0x2befb80
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched // (Native|Protected|HasOutParms) // @ game+0x5197090
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity // (Native|Public|BlueprintCallable) // @ game+0x5196eb0
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5196cd0
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5196c30
};

// Class Engine.Subsystem
// Size: 0x38 (Inherited: 0x30)
struct USubsystem : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Engine.DynamicSubsystem
// Size: 0x38 (Inherited: 0x38)
struct UDynamicSubsystem : USubsystem {
};

// Class Engine.EngineSubsystem
// Size: 0x38 (Inherited: 0x38)
struct UEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.SoundEffectPreset
// Size: 0x70 (Inherited: 0x30)
struct USoundEffectPreset : UObject {
	char pad_30[0x40]; // 0x30(0x40)
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x70 (Inherited: 0x70)
struct USoundEffectSourcePreset : USoundEffectPreset {
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x70 (Inherited: 0x70)
struct USoundEffectSubmixPreset : USoundEffectPreset {
};

// Class Engine.AssetUserData
// Size: 0x30 (Inherited: 0x30)
struct UAssetUserData : UObject {
};

// Class Engine.AnimNotifyState
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime); // Function Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|BlueprintEvent|Const) // @ game+0x33d1d50
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState.Received_NotifyEnd // (Event|Public|BlueprintEvent|Const) // @ game+0x33d1d50
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration); // Function Engine.AnimNotifyState.Received_NotifyBegin // (Event|Public|BlueprintEvent|Const) // @ game+0x33d1d50
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x47b6910
};

// Class Engine.AISystemBase
// Size: 0x70 (Inherited: 0x30)
struct UAISystemBase : UObject {
	struct FSoftClassPath AISystemClassName; // 0x30(0x20)
	struct FName AISystemModuleName; // 0x50(0x0c)
	char pad_5C[0xc]; // 0x5c(0x0c)
	bool bInstantiateAISystemOnClient; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.AssetManager
// Size: 0x460 (Inherited: 0x30)
struct UAssetManager : UObject {
	char pad_30[0x298]; // 0x30(0x298)
	struct TArray<struct UObject*> ObjectReferenceList; // 0x2c8(0x10)
	bool bIsGlobalAsyncScanEnvironment; // 0x2d8(0x01)
	bool bShouldGuessTypeAndName; // 0x2d9(0x01)
	bool bShouldUseSynchronousLoad; // 0x2da(0x01)
	bool bIsLoadingFromPakFiles; // 0x2db(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x2dc(0x01)
	bool bOnlyCookProductionAssets; // 0x2dd(0x01)
	bool bIsBulkScanning; // 0x2de(0x01)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x2df(0x01)
	bool bIsManagementDatabaseCurrent; // 0x2e0(0x01)
	bool bUpdateManagementDatabaseAfterScan; // 0x2e1(0x01)
	bool bIncludeOnlyOnDiskAssets; // 0x2e2(0x01)
	bool bHasCompletedInitialScan; // 0x2e3(0x01)
	int32_t NumberOfSpawnedNotifications; // 0x2e4(0x04)
	char pad_2E8[0x178]; // 0x2e8(0x178)
};

// Class Engine.Controller
// Size: 0x458 (Inherited: 0x3d0)
struct AController : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct APlayerState* PlayerState; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x3e8(0x10)
	struct FName StateName; // 0x3f8(0x0c)
	char pad_404[0x4]; // 0x404(0x04)
	struct APawn* Pawn; // 0x408(0x08)
	char pad_410[0x8]; // 0x410(0x08)
	struct ACharacter* Character; // 0x418(0x08)
	struct USceneComponent* TransformComponent; // 0x420(0x08)
	char pad_428[0x18]; // 0x428(0x18)
	struct FRotator ControlRotation; // 0x440(0x0c)
	char bAttachToPawn : 1; // 0x44c(0x01)
	char pad_44C_1 : 7; // 0x44c(0x01)
	char pad_44D[0xb]; // 0x44d(0x0b)

	void UnPossess(); // Function Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // @ game+0x51a6230
	void StopMovement(); // Function Engine.Controller.StopMovement // (Native|Public|BlueprintCallable) // @ game+0x2bf0930
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51a6140
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x51a60a0
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x51a6000
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51a5f60
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x2befb80
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x2f81f80
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags // (Native|Public|BlueprintCallable) // @ game+0x51a5f30
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x51a5ea0
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState // (Native|Public) // @ game+0x51a5e70
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn // (Native|Public) // @ game+0x51a5e40
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5d10
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7d0a0
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5ce0
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5ca0
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5c60
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5c10
	bool IsLocalController(); // Function Engine.Controller.IsLocalController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5bd0
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5b90
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5b40
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5af0
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x51a5950
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x51a57a0
	struct APlayerController* CastToPlayerController(); // Function Engine.Controller.CastToPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0x51a5770
};

// Class Engine.StaticMeshComponent
// Size: 0x600 (Inherited: 0x590)
struct UStaticMeshComponent : UMeshComponent {
	int32_t ForcedLodModel; // 0x588(0x04)
	int32_t MinLOD; // 0x58c(0x04)
	int32_t MaxLod; // 0x590(0x04)
	int32_t SubDivisionStepSize; // 0x594(0x04)
	struct UStaticMesh* StaticMesh; // 0x598(0x08)
	struct FColor WireframeColorOverride; // 0x5a0(0x04)
	char bEvaluateWorldPositionOffset : 1; // 0x5a4(0x01)
	char bOverrideWireframeColor : 1; // 0x5a4(0x01)
	char bOverrideMinLod : 1; // 0x5a4(0x01)
	char bOverrideMaxLOD : 1; // 0x5a4(0x01)
	char bOverrideNavigationExport : 1; // 0x5a4(0x01)
	char bForceNavigationObstacle : 1; // 0x5a4(0x01)
	char bDisallowMeshPaintPerInstance : 1; // 0x5a4(0x01)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x5a4(0x01)
	char bOverrideLightMapRes : 1; // 0x5a5(0x01)
	char bCastDistanceFieldIndirectShadow : 1; // 0x5a5(0x01)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x5a5(0x01)
	char bUseSubDivisions : 1; // 0x5a5(0x01)
	char bUseDefaultCollision : 1; // 0x5a5(0x01)
	char bReverseCulling : 1; // 0x5a5(0x01)
	int32_t OverriddenLightMapRes; // 0x5a8(0x04)
	float DistanceFieldIndirectShadowMinVisibility; // 0x5ac(0x04)
	float DistanceFieldSelfShadowBias; // 0x5b0(0x04)
	float StreamingDistanceMultiplier; // 0x5b4(0x04)
	struct TArray<struct FStaticMeshComponentLODInfo> LODData; // 0x5b8(0x10)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x5c8(0x10)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x5d8(0x1c)
	char pad_5F9_6 : 2; // 0x5f9(0x01)
	char pad_5FA[0x6]; // 0x5fa(0x06)

	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // @ game+0x211a210
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling // (Final|Native|Public|BlueprintCallable) // @ game+0x54147f0
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel // (Final|Native|Public|BlueprintCallable) // @ game+0x54143b0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x5414320
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x54140a0
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh // (Final|Native|Public) // @ game+0x5414010
	void GetLocalBounds(struct FVector& Min, struct FVector& Max); // Function Engine.StaticMeshComponent.GetLocalBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413e70
};

// Class Engine.PlayerController
// Size: 0x738 (Inherited: 0x458)
struct APlayerController : AController {
	struct UPlayer* Player; // 0x458(0x08)
	struct APawn* AcknowledgedPawn; // 0x460(0x08)
	struct UInterpTrackInstDirector* ControllingDirTrackInst; // 0x468(0x08)
	struct AHUD* MyHUD; // 0x470(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x478(0x08)
	struct APlayerCameraManager* PlayerCameraManagerClass; // 0x480(0x08)
	bool bAutoManageActiveCameraTarget; // 0x488(0x01)
	char pad_489[0x7]; // 0x489(0x07)
	struct TArray<struct AActor*> HiddenActors; // 0x490(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x4a0(0x10)
	char pad_4B0[0x4]; // 0x4b0(0x04)
	float LastSpectatorStateSynchTime; // 0x4b4(0x04)
	struct FVector LastSpectatorSyncLocation; // 0x4b8(0x0c)
	struct FRotator LastSpectatorSyncRotation; // 0x4c4(0x0c)
	int32_t ClientCap; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct UCheatManager* CheatManager; // 0x4d8(0x08)
	struct UCheatManager* CheatClass; // 0x4e0(0x08)
	struct UPlayerInput* PlayerInput; // 0x4e8(0x08)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x4f0(0x10)
	char pad_500[0x78]; // 0x500(0x78)
	struct FMulticastInlineDelegate OnCinematicModeUpdated; // 0x578(0x10)
	char pad_588_0 : 2; // 0x588(0x01)
	char bPlayerIsWaiting : 1; // 0x588(0x01)
	char pad_588_3 : 5; // 0x588(0x01)
	char pad_589[0x3]; // 0x589(0x03)
	char NetPlayerIndex; // 0x58c(0x01)
	char pad_58D[0x3b]; // 0x58d(0x3b)
	struct UNetConnection* PendingSwapConnection; // 0x5c8(0x08)
	struct UNetConnection* NetConnection; // 0x5d0(0x08)
	char pad_5D8[0xc]; // 0x5d8(0x0c)
	float InputYawScale; // 0x5e4(0x04)
	float InputPitchScale; // 0x5e8(0x04)
	float InputRollScale; // 0x5ec(0x04)
	char bShowMouseCursor : 1; // 0x5f0(0x01)
	char bEnableClickEvents : 1; // 0x5f0(0x01)
	char bEnableTouchEvents : 1; // 0x5f0(0x01)
	char bEnableMouseOverEvents : 1; // 0x5f0(0x01)
	char bEnableTouchOverEvents : 1; // 0x5f0(0x01)
	char bForceFeedbackEnabled : 1; // 0x5f0(0x01)
	char pad_5F0_6 : 2; // 0x5f0(0x01)
	char pad_5F1[0x3]; // 0x5f1(0x03)
	float ForceFeedbackScale; // 0x5f4(0x04)
	struct TArray<struct FKey> ClickEventKeys; // 0x5f8(0x10)
	enum class EMouseCursor DefaultMouseCursor; // 0x608(0x01)
	enum class EMouseCursor CurrentMouseCursor; // 0x609(0x01)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x60a(0x01)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x60b(0x01)
	float HitResultTraceDistance; // 0x60c(0x04)
	uint16_t SeamlessTravelCount; // 0x610(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x612(0x02)
	char pad_614[0x74]; // 0x614(0x74)
	struct UInputComponent* InactiveStateInputComponent; // 0x688(0x08)
	char pad_690_0 : 2; // 0x690(0x01)
	char bShouldPerformFullTickWhenPaused : 1; // 0x690(0x01)
	char pad_690_3 : 5; // 0x690(0x01)
	char pad_691[0x17]; // 0x691(0x17)
	struct UTouchInterface* CurrentTouchInterface; // 0x6a8(0x08)
	char pad_6B0[0x50]; // 0x6b0(0x50)
	struct ASpectatorPawn* SpectatorPawn; // 0x700(0x08)
	char pad_708[0x4]; // 0x708(0x04)
	bool bIsLocalPlayerController; // 0x70c(0x01)
	char pad_70D[0x3]; // 0x70d(0x03)
	struct FVector SpawnLocation; // 0x710(0x0c)
	char pad_71C[0x1c]; // 0x71c(0x1c)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5383590
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5383470
	void Unpause(); // Function Engine.PlayerController.Unpause // (Exec|Native|Public) // @ game+0x5383440
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking // (Exec|Native|Public) // @ game+0x53833a0
	void TogglePause(); // Function Engine.PlayerController.TogglePause // (Exec|Native|Public) // @ game+0x5383370
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange // (Final|Exec|Native|Private) // @ game+0x5383270
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel // (Exec|Native|Public) // @ game+0x53831b0
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x5383130
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire // (Exec|Native|Public) // @ game+0x53830a0
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility // (Native|Public|BlueprintCallable) // @ game+0x5383000
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x5382e50
	void SetViewTarget(struct AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.SetViewTarget // (Native|Public) // @ game+0x5382d50
	void SetName(struct FString S); // Function Engine.PlayerController.SetName // (Native|Public) // @ game+0x5382c90
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x5382bc0
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x5382af0
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue // (Final|Native|Public|BlueprintCallable) // @ game+0x53829e0
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics // (Native|Public|BlueprintCallable) // @ game+0x5382940
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53828c0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x53826d0
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53825a0
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53824c0
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x5382340
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x5382270
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x53821a0
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x53820d0
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381f90
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381e50
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x5381ca0
	void ServerUnpause(); // Function Engine.PlayerController.ServerUnpause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381bd0
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerUnmutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x53819d0
	void ServerTogglePause(); // Function Engine.PlayerController.ServerTogglePause // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x5381900
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381830
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381760
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381620
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x5381470
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x53813a0
	void ServerPause(); // Function Engine.PlayerController.ServerPause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x53812d0
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5381180
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerMutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5380f80
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5380e20
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec // (Final|Exec|Native|Public) // @ game+0x2b9d3f0
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5380d50
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x5380c80
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x5380b20
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x53809b0
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2f4bc40
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole // (Exec|Native|Public) // @ game+0x53808f0
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel // (Exec|Native|Public) // @ game+0x53808c0
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor // (Final|Native|Public|BlueprintCallable) // @ game+0x53808a0
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5380760
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x5380600
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback // (Final|Native|Private|BlueprintCallable) // @ game+0x5380350
	void Pause(); // Function Engine.PlayerController.Pause // (Exec|Native|Public) // @ game+0x5380320
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x5380280
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel // (Exec|Native|Public) // @ game+0x53801c0
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x5380010
	bool IsPaused(); // Function Engine.PlayerController.IsPaused // (Final|Native|Public|Const) // @ game+0x537ffe0
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fec0
	bool InCinematicMode(); // Function Engine.PlayerController.InCinematicMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fe90
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fdb0
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fd90
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fca0
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x537fb70
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f9e0
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f900
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f770
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f650
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f520
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f400
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7d460
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f220
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537f070
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537eec0
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537ed20
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537eb80
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x537e9e0
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x537e990
	struct UCheatManager* GetCheatManager(); // Function Engine.PlayerController.GetCheatManager // (Final|Native|Public) // @ game+0x2b7c7c0
	void FOV(float NewFov); // Function Engine.PlayerController.FOV // (Exec|Native|Public) // @ game+0x537e900
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats // (Exec|Native|Public) // @ game+0x537e8d0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x537e740
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x537e640
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey // (Exec|Native|Public) // @ game+0x537e520
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537e470
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537e440
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537e390
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537e1d0
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ClientUnmutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537e080
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x537dee0
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel // (Final|Native|Public|HasDefaults) // @ game+0x537dd50
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537dbb0
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x537dac0
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x537d9f0
	void ClientStopCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x537d910
	void ClientStopCameraAnim(struct UCameraAnim* AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d880
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d850
	void ClientStartCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerController.ClientStartCameraShakeFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x537d780
	void ClientStartCameraShake(struct UCameraShakeBase* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientStartCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x537d600
	void ClientSpawnCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x537d570
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d470
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d3d0
	void ClientSetHUD(struct AHUD* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x537d340
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d230
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537d0a0
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537cff0
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerController.ClientSetCameraFade // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x537cdd0
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537cda0
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537ccf0
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537cc30
	void ClientRetryClientRestart(struct APawn* NewPawn, struct APawn* AuthAcknowledgedPawn); // Function Engine.PlayerController.ClientRetryClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537cb50
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537cac0
	void ClientReset(); // Function Engine.PlayerController.ClientReset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2f71e50
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537ca30
	void ClientReceiveLocalizedMessage(struct ULocalMessage* Message, int32_t Switch, struct APlayerState* RelatedPlayerState_2, struct APlayerState* RelatedPlayerState_3, struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537c880
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537c710
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537c5d0
	void ClientPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x537c460
	void ClientPlaySound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound // (Net|Native|Event|Public|NetClient) // @ game+0x537c350
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal // (Final|Net|Native|Event|Private|NetClient) // @ game+0x537c260
	void ClientPlayCameraAnim(struct UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraShakePlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x537bf90
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ClientMutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537be40
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537bcd0
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537bc30
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537bb90
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537bae0
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537ba00
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b9d0
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b9b0
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b980
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b8e0
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b8b0
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x537b880
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b7f0
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x537b7c0
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x537b690
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x537b670
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x537b650
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x537b610
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera // (Exec|Native|Public) // @ game+0x537b560
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput // (Native|Public|BlueprintCallable) // @ game+0x537b4d0
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput // (Native|Public|BlueprintCallable) // @ game+0x537b440
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput // (Native|Public|BlueprintCallable) // @ game+0x537b3b0
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface // (Native|Public|BlueprintCallable) // @ game+0x537b320
};

// Class Engine.CheatManager
// Size: 0x80 (Inherited: 0x30)
struct UCheatManager : UObject {
	struct ADebugCameraController* DebugCameraControllerRef; // 0x30(0x08)
	struct ADebugCameraController* DebugCameraControllerClass; // 0x38(0x08)
	char pad_40[0x40]; // 0x40(0x40)

	void Walk(); // Function Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // @ game+0x2be7660
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf // (Exec|Native|Public) // @ game+0x2bc6cb0
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer // (Exec|Native|Public) // @ game+0x51a1940
	void ViewClass(struct AActor* DesiredClass); // Function Engine.CheatManager.ViewClass // (Exec|Native|Public) // @ game+0x51a18b0
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor // (Exec|Native|Public) // @ game+0x51a1800
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea // (Final|Exec|Native|Public) // @ game+0x51a17e0
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet // (Final|Exec|Native|Public) // @ game+0x51a17c0
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite // (Final|Exec|Native|Public) // @ game+0x51a17a0
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera // (Exec|Native|Public) // @ game+0x51a1770
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging // (Exec|Native|Public) // @ game+0x51a1740
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance // (Exec|Native|Public) // @ game+0x51a1710
	void Teleport(); // Function Engine.CheatManager.Teleport // (Exec|Native|Public|BlueprintCallable) // @ game+0x2c57f90
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon // (Exec|Native|Public) // @ game+0x51a1650
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut // (Exec|Native|Public) // @ game+0x51a15a0
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn // (Exec|Native|Public) // @ game+0x51a14f0
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x51a14d0
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo // (Exec|Native|Public|BlueprintCallable) // @ game+0x51a1440
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin // (Final|Exec|Native|Public) // @ game+0x51a1420
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault // (Exec|Native|Public) // @ game+0x51a13f0
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x51a1290
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly // (Exec|Native|Public|BlueprintCallable) // @ game+0x2bc63f0
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel // (Exec|Native|Public) // @ game+0x51a11e0
	void LogLoc(); // Function Engine.CheatManager.LogLoc // (Exec|Native|Public) // @ game+0x51a11b0
	void God(); // Function Engine.CheatManager.God // (Exec|Native|Public|BlueprintCallable) // @ game+0x1cc6a10
	void Ghost(); // Function Engine.CheatManager.Ghost // (Exec|Native|Public|BlueprintCallable) // @ game+0x2be7200
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame // (Exec|Native|Public|BlueprintCallable) // @ game+0x51a1120
	void Fly(); // Function Engine.CheatManager.Fly // (Exec|Native|Public|BlueprintCallable) // @ game+0x2c58ce0
	void FlushLog(); // Function Engine.CheatManager.FlushLog // (Exec|Native|Public) // @ game+0x51a10f0
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x1cdb610
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState // (Exec|Native|Public) // @ game+0x51a10c0
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState // (Exec|Native|Public) // @ game+0x51a1090
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState // (Exec|Native|Public) // @ game+0x51a1060
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState // (Exec|Native|Public) // @ game+0x51a1030
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x2b32e50
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x51a1000
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x51a0fe0
	void DestroyPawns(struct APawn* aClass); // Function Engine.CheatManager.DestroyPawns // (Exec|Native|Public) // @ game+0x45f3a90
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget // (Exec|Native|Public) // @ game+0x2bc6fd0
	void DestroyAll(struct AActor* aClass); // Function Engine.CheatManager.DestroyAll // (Exec|Native|Public) // @ game+0x51a0f50
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize // (Exec|Native|Public) // @ game+0x51a0e70
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn // (Exec|Native|Public) // @ game+0x51a0e40
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex // (Exec|Native|Public) // @ game+0x512f100
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear // (Exec|Native|Public) // @ game+0x51a0e10
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel // (Exec|Native|Public) // @ game+0x51a0d80
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture // (Exec|Native|Public) // @ game+0x51a0d50
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep // (Exec|Native|Public) // @ game+0x51a0d20
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x51a0c90
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript // (Final|Exec|Native|Public) // @ game+0x51a0b90
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize // (Exec|Native|Public|BlueprintCallable) // @ game+0x51a0b00
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator // (Exec|Native|Public|HasOutParms|HasDefaults) // @ game+0x51a0920
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo // (Exec|Native|Public) // @ game+0x51a0730
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt // (Exec|Native|Public) // @ game+0x51a0670
};

// Class Engine.DPICustomScalingRule
// Size: 0x30 (Inherited: 0x30)
struct UDPICustomScalingRule : UObject {
};

// Class Engine.Engine
// Size: 0xf90 (Inherited: 0x30)
struct UEngine : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UFont* TinyFont; // 0x38(0x08)
	struct FSoftObjectPath TinyFontName; // 0x40(0x20)
	struct UFont* SmallFont; // 0x60(0x08)
	struct FSoftObjectPath SmallFontName; // 0x68(0x20)
	struct UFont* MediumFont; // 0x88(0x08)
	struct FSoftObjectPath MediumFontName; // 0x90(0x20)
	struct UFont* LargeFont; // 0xb0(0x08)
	struct FSoftObjectPath LargeFontName; // 0xb8(0x20)
	struct UFont* SubtitleFont; // 0xd8(0x08)
	struct FSoftObjectPath SubtitleFontName; // 0xe0(0x20)
	struct TArray<struct UFont*> AdditionalFonts; // 0x100(0x10)
	struct TArray<struct FString> AdditionalFontNames; // 0x110(0x10)
	struct UConsole* ConsoleClass; // 0x120(0x08)
	struct FSoftClassPath ConsoleClassName; // 0x128(0x20)
	struct UGameViewportClient* GameViewportClientClass; // 0x148(0x08)
	struct FSoftClassPath GameViewportClientClassName; // 0x150(0x20)
	struct ULocalPlayer* LocalPlayerClass; // 0x170(0x08)
	struct FSoftClassPath LocalPlayerClassName; // 0x178(0x20)
	struct AWorldSettings* WorldSettingsClass; // 0x198(0x08)
	struct FSoftClassPath WorldSettingsClassName; // 0x1a0(0x20)
	struct FSoftClassPath NavigationSystemClassName; // 0x1c0(0x20)
	struct UNavigationSystemBase* NavigationSystemClass; // 0x1e0(0x08)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x1e8(0x20)
	struct UNavigationSystemConfig* NavigationSystemConfigClass; // 0x208(0x08)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x210(0x20)
	struct UAvoidanceManager* AvoidanceManagerClass; // 0x230(0x08)
	struct FSoftClassPath AIControllerClassName; // 0x238(0x20)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x258(0x08)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x260(0x20)
	struct FSoftClassPath GameUserSettingsClassName; // 0x280(0x20)
	struct UGameUserSettings* GameUserSettingsClass; // 0x2a0(0x08)
	struct UGameUserSettings* GameUserSettings; // 0x2a8(0x08)
	struct ALevelScriptActor* LevelScriptActorClass; // 0x2b0(0x08)
	struct FSoftClassPath LevelScriptActorClassName; // 0x2b8(0x20)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x2d8(0x20)
	struct FSoftClassPath GameSingletonClassName; // 0x2f8(0x20)
	struct UObject* GameSingleton; // 0x318(0x08)
	struct FSoftClassPath AssetManagerClassName; // 0x320(0x20)
	struct UAssetManager* AssetManager; // 0x340(0x08)
	struct UTexture2D* DefaultTexture; // 0x348(0x08)
	struct FSoftObjectPath DefaultTextureName; // 0x350(0x20)
	struct UTexture* DefaultDiffuseTexture; // 0x370(0x08)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x378(0x20)
	struct UTexture2D* DefaultBSPVertexTexture; // 0x398(0x08)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x3a0(0x20)
	struct UTexture2D* HighFrequencyNoiseTexture; // 0x3c0(0x08)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x3c8(0x20)
	struct UTexture2D* DefaultBokehTexture; // 0x3e8(0x08)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x3f0(0x20)
	struct UTexture2D* DefaultBloomKernelTexture; // 0x410(0x08)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x418(0x20)
	struct UMaterial* WireframeMaterial; // 0x438(0x08)
	struct FString WireframeMaterialName; // 0x440(0x10)
	struct UMaterial* DebugMeshMaterial; // 0x450(0x08)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x458(0x20)
	struct UMaterial* EmissiveMeshMaterial; // 0x478(0x08)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x480(0x20)
	struct UMaterial* LevelColorationLitMaterial; // 0x4a0(0x08)
	struct FString LevelColorationLitMaterialName; // 0x4a8(0x10)
	struct UMaterial* LevelColorationUnlitMaterial; // 0x4b8(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x4c0(0x10)
	struct UMaterial* LightingTexelDensityMaterial; // 0x4d0(0x08)
	struct FString LightingTexelDensityName; // 0x4d8(0x10)
	struct UMaterial* ShadedLevelColorationLitMaterial; // 0x4e8(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x4f0(0x10)
	struct UMaterial* ShadedLevelColorationUnlitMaterial; // 0x500(0x08)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x508(0x10)
	struct UMaterial* RemoveSurfaceMaterial; // 0x518(0x08)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x520(0x20)
	struct UMaterial* VertexColorMaterial; // 0x540(0x08)
	struct FString VertexColorMaterialName; // 0x548(0x10)
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x558(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x560(0x10)
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x570(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x578(0x10)
	struct UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x588(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x590(0x10)
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x5a0(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x5a8(0x10)
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x5b8(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x5c0(0x10)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x5d0(0x20)
	struct UMaterial* ConstraintLimitMaterial; // 0x5f0(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x5f8(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x600(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x608(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x610(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x618(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x620(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x628(0x08)
	struct UMaterial* InvalidLightmapSettingsMaterial; // 0x630(0x08)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x638(0x20)
	struct UMaterial* PreviewShadowsIndicatorMaterial; // 0x658(0x08)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x660(0x20)
	struct UMaterial* ArrowMaterial; // 0x680(0x08)
	struct UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x688(0x08)
	struct FSoftObjectPath ArrowMaterialName; // 0x690(0x20)
	struct FLinearColor LightingOnlyBrightness; // 0x6b0(0x10)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x6c0(0x10)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x6d0(0x10)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x6e0(0x10)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x6f0(0x10)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x700(0x10)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x710(0x10)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x720(0x10)
	float MaxPixelShaderAdditiveComplexityCount; // 0x730(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x734(0x04)
	int32_t MaxDrawCallComplexityCount; // 0x738(0x04)
	float DebugViewModeSpecularScale; // 0x73c(0x04)
	float MinLightMapDensity; // 0x740(0x04)
	float IdealLightMapDensity; // 0x744(0x04)
	float MaxLightMapDensity; // 0x748(0x04)
	char bRenderLightMapDensityGrayscale : 1; // 0x74c(0x01)
	char pad_74C_1 : 7; // 0x74c(0x01)
	char pad_74D[0x3]; // 0x74d(0x03)
	float RenderLightMapDensityGrayscaleScale; // 0x750(0x04)
	float RenderLightMapDensityColorScale; // 0x754(0x04)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x758(0x10)
	struct FLinearColor LightMapDensitySelectedColor; // 0x768(0x10)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x778(0x10)
	struct UPhysicalMaterial* DefaultPhysMaterial; // 0x788(0x08)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x790(0x20)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x7b0(0x10)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x7c0(0x10)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x7d0(0x10)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x7e0(0x10)
	struct UTexture2D* PreIntegratedSkinBRDFTexture; // 0x7f0(0x08)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x7f8(0x20)
	struct UTexture2D* BlueNoiseTexture; // 0x818(0x08)
	struct FSoftObjectPath BlueNoiseTextureName; // 0x820(0x20)
	struct UTexture2D* MiniFontTexture; // 0x840(0x08)
	struct FSoftObjectPath MiniFontTextureName; // 0x848(0x20)
	struct UTexture* WeightMapPlaceholderTexture; // 0x868(0x08)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x870(0x20)
	struct UTexture2D* LightMapDensityTexture; // 0x890(0x08)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x898(0x20)
	char pad_8B8[0x8]; // 0x8b8(0x08)
	struct UGameViewportClient* GameViewport; // 0x8c0(0x08)
	struct TArray<struct FString> DeferredCommands; // 0x8c8(0x10)
	float NearClipPlane; // 0x8d8(0x04)
	char bSubtitlesEnabled : 1; // 0x8dc(0x01)
	char bSubtitlesForcedOff : 1; // 0x8dc(0x01)
	char pad_8DC_2 : 6; // 0x8dc(0x01)
	char pad_8DD[0x3]; // 0x8dd(0x03)
	int32_t MaximumLoopIterationCount; // 0x8e0(0x04)
	char bCanBlueprintsTickByDefault : 1; // 0x8e4(0x01)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x8e4(0x01)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x8e4(0x01)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x8e4(0x01)
	char pad_8E4_4 : 1; // 0x8e4(0x01)
	char bSmoothFrameRate : 1; // 0x8e4(0x01)
	char bUseFixedFrameRate : 1; // 0x8e4(0x01)
	char pad_8E4_7 : 1; // 0x8e4(0x01)
	char pad_8E5[0x3]; // 0x8e5(0x03)
	float FixedFrameRate; // 0x8e8(0x04)
	struct FFloatRange SmoothedFrameRateRange; // 0x8ec(0x10)
	char pad_8FC[0x4]; // 0x8fc(0x04)
	struct UEngineCustomTimeStep* CustomTimeStep; // 0x900(0x08)
	char pad_908[0x20]; // 0x908(0x20)
	struct FSoftClassPath CustomTimeStepClassName; // 0x928(0x20)
	struct UTimecodeProvider* TimecodeProvider; // 0x948(0x08)
	char pad_950[0x20]; // 0x950(0x20)
	struct FSoftClassPath TimecodeProviderClassName; // 0x970(0x20)
	bool bGenerateDefaultTimecode; // 0x990(0x01)
	char pad_991[0x3]; // 0x991(0x03)
	struct FFrameRate GenerateDefaultTimecodeFrameRate; // 0x994(0x08)
	float GenerateDefaultTimecodeFrameDelay; // 0x99c(0x04)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x9a0(0x01)
	char pad_9A0_1 : 7; // 0x9a0(0x01)
	char pad_9A1[0x3]; // 0x9a1(0x03)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x9a4(0x04)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x9a8(0x01)
	char pad_9A8_1 : 7; // 0x9a8(0x01)
	char pad_9A9[0x3]; // 0x9a9(0x03)
	struct FColor C_WorldBox; // 0x9ac(0x04)
	struct FColor C_BrushWire; // 0x9b0(0x04)
	struct FColor C_AddWire; // 0x9b4(0x04)
	struct FColor C_SubtractWire; // 0x9b8(0x04)
	struct FColor C_SemiSolidWire; // 0x9bc(0x04)
	struct FColor C_NonSolidWire; // 0x9c0(0x04)
	struct FColor C_WireBackground; // 0x9c4(0x04)
	struct FColor C_ScaleBoxHi; // 0x9c8(0x04)
	struct FColor C_VolumeCollision; // 0x9cc(0x04)
	struct FColor C_BSPCollision; // 0x9d0(0x04)
	struct FColor C_OrthoBackground; // 0x9d4(0x04)
	struct FColor C_Volume; // 0x9d8(0x04)
	struct FColor C_BrushShape; // 0x9dc(0x04)
	float StreamingDistanceFactor; // 0x9e0(0x04)
	char pad_9E4[0x4]; // 0x9e4(0x04)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0x9e8(0x10)
	enum class ETransitionType TransitionType; // 0x9f8(0x01)
	char pad_9F9[0x7]; // 0x9f9(0x07)
	struct FString TransitionDescription; // 0xa00(0x10)
	struct FString TransitionGameMode; // 0xa10(0x10)
	char bAllowMatureLanguage : 1; // 0xa20(0x01)
	char pad_A20_1 : 7; // 0xa20(0x01)
	char pad_A21[0x3]; // 0xa21(0x03)
	float CameraRotationThreshold; // 0xa24(0x04)
	float CameraTranslationThreshold; // 0xa28(0x04)
	float PrimitiveProbablyVisibleTime; // 0xa2c(0x04)
	float MaxOcclusionPixelsFraction; // 0xa30(0x04)
	char bPauseOnLossOfFocus : 1; // 0xa34(0x01)
	char pad_A34_1 : 7; // 0xa34(0x01)
	char pad_A35[0x3]; // 0xa35(0x03)
	int32_t MaxParticleResize; // 0xa38(0x04)
	int32_t MaxParticleResizeWarn; // 0xa3c(0x04)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0xa40(0x10)
	float NetClientTicksPerSecond; // 0xa50(0x04)
	float DisplayGamma; // 0xa54(0x04)
	float MinDesiredFrameRate; // 0xa58(0x04)
	struct FLinearColor DefaultSelectedMaterialColor; // 0xa5c(0x10)
	struct FLinearColor SelectedMaterialColor; // 0xa6c(0x10)
	struct FLinearColor SelectionOutlineColor; // 0xa7c(0x10)
	struct FLinearColor SubduedSelectionOutlineColor; // 0xa8c(0x10)
	struct FLinearColor SelectedMaterialColorOverride; // 0xa9c(0x10)
	bool bIsOverridingSelectedColor; // 0xaac(0x01)
	char pad_AAD[0x3]; // 0xaad(0x03)
	char bEnableOnScreenDebugMessages : 1; // 0xab0(0x01)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0xab0(0x01)
	char bSuppressMapWarnings : 1; // 0xab0(0x01)
	char bDisableAILogging : 1; // 0xab0(0x01)
	char pad_AB0_4 : 4; // 0xab0(0x01)
	char pad_AB1[0x3]; // 0xab1(0x03)
	uint32_t bEnableVisualLogRecordingOnStart; // 0xab4(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0xab8(0x04)
	char bLockReadOnlyLevels : 1; // 0xabc(0x01)
	char pad_ABC_1 : 7; // 0xabc(0x01)
	char pad_ABD[0x3]; // 0xabd(0x03)
	struct FString ParticleEventManagerClassPath; // 0xac0(0x10)
	float SelectionHighlightIntensity; // 0xad0(0x04)
	float BSPSelectionHighlightIntensity; // 0xad4(0x04)
	float SelectionHighlightIntensityBillboards; // 0xad8(0x04)
	char pad_ADC[0x284]; // 0xadc(0x284)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xd60(0x10)
	struct TArray<struct FString> ServerActors; // 0xd70(0x10)
	struct TArray<struct FString> RuntimeServerActors; // 0xd80(0x10)
	float NetErrorLogInterval; // 0xd90(0x04)
	char bStartedLoadMapMovie : 1; // 0xd94(0x01)
	char pad_D94_1 : 7; // 0xd94(0x01)
	char pad_D95[0x1b]; // 0xd95(0x1b)
	int32_t NextWorldContextHandle; // 0xdb0(0x04)
	char pad_DB4[0xcc]; // 0xdb4(0xcc)
	struct FRiotPlatformInitSettings RiotPlatformInitSettings; // 0xe80(0x48)
	char pad_EC8[0xc8]; // 0xec8(0xc8)

	bool IsAresProfileGPUReady(); // Function Engine.Engine.IsAresProfileGPUReady // (Final|Native|Static|Public) // @ game+0x20008b0
	void AresProfileGPU(); // Function Engine.Engine.AresProfileGPU // (Final|Native|Static|Public) // @ game+0x51c4510
};

// Class Engine.GameEngine
// Size: 0xfe0 (Inherited: 0xf90)
struct UGameEngine : UEngine {
	float MaxDeltaTime; // 0xf90(0x04)
	float ServerFlushLogInterval; // 0xf94(0x04)
	struct UGameInstance* GameInstance; // 0xf98(0x08)
	char pad_FA0[0x40]; // 0xfa0(0x40)
};

// Class Engine.PlatformGameInstance
// Size: 0x280 (Inherited: 0x1b0)
struct UPlatformGameInstance : UGameInstance {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x1b0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1c0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1e0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x1f0(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x200(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x210(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x240(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x250(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x260(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x270(0x10)
};

// Class Engine.GameStateBase
// Size: 0x420 (Inherited: 0x3d0)
struct AGameStateBase : AInfo {
	struct AGameModeBase* GameModeClass; // 0x3d0(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x3d8(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x3e0(0x08)
	struct TArray<struct APlayerState*> PlayerArray; // 0x3e8(0x10)
	bool bReplicatedHasBegunPlay; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	float ReplicatedWorldTimeSeconds; // 0x3fc(0x04)
	float ServerWorldTimeSecondsDelta; // 0x400(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x404(0x04)
	char pad_408[0x18]; // 0x408(0x18)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // @ game+0x51a5e70
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds // (Native|Protected) // @ game+0x5210c80
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay // (Native|Protected) // @ game+0x2b931b0
	void OnRep_PlayerArray(); // Function Engine.GameStateBase.OnRep_PlayerArray // (Native|Protected) // @ game+0x1d87150
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass // (Native|Protected) // @ game+0x51a5e40
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210ab0
	bool HasMatchEnded(); // Function Engine.GameStateBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210a70
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210a30
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210900
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210430
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210380
};

// Class Engine.GameState
// Size: 0x458 (Inherited: 0x420)
struct AGameState : AGameStateBase {
	struct FName MatchState; // 0x420(0x0c)
	struct FName PreviousMatchState; // 0x42c(0x0c)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x438(0x10)
	int32_t ElapsedTime; // 0x448(0x04)
	char pad_44C[0xc]; // 0x44c(0x0c)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState // (Native|Public) // @ game+0x5210c50
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime // (Native|Public) // @ game+0x1d87180
};

// Class Engine.ScriptViewportClient
// Size: 0x40 (Inherited: 0x30)
struct UScriptViewportClient : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.GameViewportClient
// Size: 0x380 (Inherited: 0x40)
struct UGameViewportClient : UScriptViewportClient {
	char pad_40[0x8]; // 0x40(0x08)
	struct UConsole* ViewportConsole; // 0x48(0x08)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
	int32_t MaxSplitscreenPlayers; // 0x70(0x04)
	char pad_74[0xc]; // 0x74(0x0c)
	struct UWorld* World; // 0x80(0x08)
	struct UGameInstance* GameInstance; // 0x88(0x08)
	char pad_90[0x2f0]; // 0x90(0x2f0)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // @ game+0x2c302c0
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea // (Exec|Native|Public) // @ game+0x2cab080
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget // (Exec|Native|Public) // @ game+0x52180f0
};

// Class Engine.InputComponent
// Size: 0x180 (Inherited: 0xe8)
struct UInputComponent : UActorComponent {
	char pad_E8[0x80]; // 0xe8(0x80)
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x168(0x10)
	char pad_178[0x8]; // 0x178(0x08)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x521fb80
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x521fb80
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x521fb80
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f6e0
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState // (Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f580
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f4a0
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f250
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f370
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f250
};

// Class Engine.SceneCapture
// Size: 0x3e0 (Inherited: 0x3d0)
struct ASceneCapture : AActor {
	struct UStaticMeshComponent* MeshComp; // 0x3d0(0x08)
	struct USceneComponent* SceneComponent; // 0x3d8(0x08)
};

// Class Engine.SceneCapture2D
// Size: 0x3e8 (Inherited: 0x3e0)
struct ASceneCapture2D : ASceneCapture {
	struct USceneCaptureComponent2D* CaptureComponent2D; // 0x3e0(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x536f8c0
};

// Class Engine.ParticleModule
// Size: 0x38 (Inherited: 0x30)
struct UParticleModule : UObject {
	char bSpawnModule : 1; // 0x30(0x01)
	char bUpdateModule : 1; // 0x30(0x01)
	char bFinalUpdateModule : 1; // 0x30(0x01)
	char bUpdateForGPUEmitter : 1; // 0x30(0x01)
	char bCurvesAsColor : 1; // 0x30(0x01)
	char b3DDrawMode : 1; // 0x30(0x01)
	char bSupported3DDrawMode : 1; // 0x30(0x01)
	char bEnabled : 1; // 0x30(0x01)
	char bEditable : 1; // 0x31(0x01)
	char LODDuplicate : 1; // 0x31(0x01)
	char bSupportsRandomSeed : 1; // 0x31(0x01)
	char bRequiresLoopingNotification : 1; // 0x31(0x01)
	char pad_31_4 : 4; // 0x31(0x01)
	char LODValidity; // 0x32(0x01)
	char pad_33[0x5]; // 0x33(0x05)
};

// Class Engine.ParticleModuleCustomColor
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleCustomColor : UParticleModule {
};

// Class Engine.ParticleModuleCustomOutline
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleCustomOutline : UParticleModule {
};

// Class Engine.PlayerInput
// Size: 0x3e0 (Inherited: 0x30)
struct UPlayerInput : UObject {
	char pad_30[0xf8]; // 0x30(0xf8)
	struct TArray<struct FKeyBind> DebugExecBindings; // 0x128(0x10)
	char pad_138[0x30]; // 0x138(0x30)
	struct TArray<struct FName> InvertedAxis; // 0x168(0x10)
	char pad_178[0x268]; // 0x178(0x268)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x538a530
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind // (Final|Exec|Native|Public) // @ game+0x5389de0
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey // (Final|Native|Public) // @ game+0x5389c30
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis // (Final|Native|Public) // @ game+0x5389b90
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing // (Final|Exec|Native|Public) // @ game+0x53895f0
};

// Class Engine.PlayerState
// Size: 0x4d8 (Inherited: 0x3d0)
struct APlayerState : AInfo {
	int32_t PlayerID; // 0x3d0(0x04)
	uint16_t Ping; // 0x3d4(0x02)
	char pad_3D6[0x1]; // 0x3d6(0x01)
	char bShouldUpdateReplicatedPing : 1; // 0x3d7(0x01)
	char bIsSpectator : 1; // 0x3d7(0x01)
	char bOnlySpectator : 1; // 0x3d7(0x01)
	char bIsABot : 1; // 0x3d7(0x01)
	char pad_3D7_4 : 1; // 0x3d7(0x01)
	char bIsInactive : 1; // 0x3d7(0x01)
	char bFromPreviousLevel : 1; // 0x3d7(0x01)
	char pad_3D7_7 : 1; // 0x3d7(0x01)
	int32_t StartTime; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	struct FString SavedNetworkAddress; // 0x3f0(0x10)
	struct FUniqueNetIdRepl UniqueId; // 0x400(0x28)
	char pad_428[0x10]; // 0x428(0x10)
	struct APawn* PawnPrivate; // 0x438(0x08)
	char pad_440[0x78]; // 0x440(0x78)
	struct FString PlayerNamePrivate; // 0x4b8(0x10)
	char pad_4C8[0x10]; // 0x4c8(0x10)

	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId // (Native|Public) // @ game+0x2be4af0
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName // (Native|Public) // @ game+0x2beff70
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId // (Native|Public) // @ game+0x2c509e0
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5389b00
};

// Class Engine.TextRenderComponent
// Size: 0x5a0 (Inherited: 0x550)
struct UTextRenderComponent : UPrimitiveComponent {
	struct FText Text; // 0x548(0x18)
	struct UMaterialInterface* TextMaterial; // 0x560(0x08)
	struct UFont* Font; // 0x568(0x08)
	enum class EHorizTextAligment HorizontalAlignment; // 0x570(0x01)
	enum class EVerticalTextAligment VerticalAlignment; // 0x571(0x01)
	struct FColor TextRenderColor; // 0x574(0x04)
	float XScale; // 0x578(0x04)
	float YScale; // 0x57c(0x04)
	float WorldSize; // 0x580(0x04)
	float InvDefaultSize; // 0x584(0x04)
	float HorizSpacingAdjust; // 0x588(0x04)
	float VertSpacingAdjust; // 0x58c(0x04)
	char bAlwaysRenderAsText : 1; // 0x590(0x01)
	char pad_596_1 : 7; // 0x596(0x01)
	char pad_597[0x9]; // 0x597(0x09)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // @ game+0x541ee10
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale // (Final|Native|Public|BlueprintCallable) // @ game+0x541ed90
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0x541ed10
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x541ec10
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x541ec90
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x541eb90
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x541eb00
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x541ea50
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x541e950
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x541e9d0
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0x541e8c0
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x541e810
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x541e700
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x541e6c0
};

// Class Engine.WorldSettings
// Size: 0x598 (Inherited: 0x3d0)
struct AWorldSettings : AInfo {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	int32_t VisibilityCellSize; // 0x3d8(0x04)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x3dc(0x01)
	char bPrecomputeVisibility : 1; // 0x3dd(0x01)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x3dd(0x01)
	char bEnableWorldBoundsChecks : 1; // 0x3dd(0x01)
	char bEnableNavigationSystem : 1; // 0x3dd(0x01)
	char bEnableAISystem : 1; // 0x3dd(0x01)
	char bEnableWorldComposition : 1; // 0x3dd(0x01)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x3dd(0x01)
	char bEnableWorldOriginRebasing : 1; // 0x3dd(0x01)
	char bWorldGravitySet : 1; // 0x3de(0x01)
	char bGlobalGravitySet : 1; // 0x3de(0x01)
	char bMinimizeBSPSections : 1; // 0x3de(0x01)
	char bForceNoPrecomputedLighting : 1; // 0x3de(0x01)
	char bHighPriorityLoading : 1; // 0x3de(0x01)
	char bHighPriorityLoadingLocal : 1; // 0x3de(0x01)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x3de(0x01)
	char pad_3DE_7 : 1; // 0x3de(0x01)
	char pad_3DF[0x1]; // 0x3df(0x01)
	struct UNavigationSystemConfig* NavigationSystemConfig; // 0x3e0(0x08)
	struct UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x3e8(0x08)
	float WorldToMeters; // 0x3f0(0x04)
	float KillZ; // 0x3f4(0x04)
	struct UDamageType* KillZDamageType; // 0x3f8(0x08)
	float WorldGravityZ; // 0x400(0x04)
	float GlobalGravityZ; // 0x404(0x04)
	struct ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x408(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x410(0x08)
	struct AGameModeBase* DefaultGameMode; // 0x418(0x08)
	struct AGameNetworkManager* GameNetworkManagerClass; // 0x420(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x428(0x04)
	struct FVector DefaultColorScale; // 0x42c(0x0c)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x438(0x04)
	float GlobalDistanceFieldViewDistance; // 0x43c(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x440(0x04)
	float SmallestOccluder; // 0x444(0x04)
	float BackfaceLimit; // 0x448(0x04)
	float SmallestHole; // 0x44c(0x04)
	float CollisionRadius; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)
	struct FReverbSettings DefaultReverbSettings; // 0x458(0x20)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x478(0x24)
	float MonoCullingDistance; // 0x49c(0x04)
	struct USoundMix* DefaultBaseSoundMix; // 0x4a0(0x08)
	float TimeDilation; // 0x4a8(0x04)
	float MatineeTimeDilation; // 0x4ac(0x04)
	float DemoPlayTimeDilation; // 0x4b0(0x04)
	float MinGlobalTimeDilation; // 0x4b4(0x04)
	float MaxGlobalTimeDilation; // 0x4b8(0x04)
	float MinUndilatedFrameTime; // 0x4bc(0x04)
	float MaxUndilatedFrameTime; // 0x4c0(0x04)
	struct FBroadphaseSettings BroadphaseSettings; // 0x4c4(0x40)
	char pad_504[0x4]; // 0x504(0x04)
	struct ASphereReflectionCapture* AresAmbientReflection; // 0x508(0x08)
	struct ASphereReflectionCapture* AresAmbientEnvironmentReflection; // 0x510(0x08)
	struct ASphereReflectionCapture* AresAmbientEnvironmentAlternativeReflection; // 0x518(0x08)
	bool bAresLevelIgnoresZPrepass; // 0x520(0x01)
	char pad_521[0x7]; // 0x521(0x07)
	struct UStaticMesh* AresZPrepassMesh; // 0x528(0x08)
	float ZPrepassBoundsCullRadius; // 0x530(0x04)
	float ZPrepassPercentTriangles; // 0x534(0x04)
	float ZPrepassMinimumTriangleArea; // 0x538(0x04)
	float ZPrepassMinimumMeshSurfaceArea; // 0x53c(0x04)
	struct APlayerState* Pauser; // 0x540(0x08)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x548(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x558(0x10)
	struct APlayerState* PauserPlayerState; // 0x568(0x08)
	int32_t MaxNumberOfBookmarks; // 0x570(0x04)
	char pad_574[0x4]; // 0x574(0x04)
	struct UBookmarkBase* DefaultBookmarkClass; // 0x578(0x08)
	struct TArray<struct UBookmarkBase*> BookmarkArray; // 0x580(0x10)
	struct UBookmarkBase* LastBookmarkClass; // 0x590(0x08)

	void SetAresAmbientReflection(struct ASphereReflectionCapture* Refl); // Function Engine.WorldSettings.SetAresAmbientReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x543cf50
	void SetAresAmbientEnvironmentReflection(struct ASphereReflectionCapture* Refl); // Function Engine.WorldSettings.SetAresAmbientEnvironmentReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x543cec0
	void SetAresAmbientEnvironmentAlternativeReflection(struct ASphereReflectionCapture* Refl); // Function Engine.WorldSettings.SetAresAmbientEnvironmentAlternativeReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x543ce30
	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // @ game+0x2c509e0
	void MulticastPauser(struct APlayerState* PlayerState); // Function Engine.WorldSettings.MulticastPauser // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x51c4580
};

// Class Engine.CameraActor
// Size: 0xa00 (Inherited: 0x3d0)
struct ACameraActor : AActor {
	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct UCameraComponent* CameraComponent; // 0x3d8(0x08)
	struct USceneComponent* SceneComponent; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	char bConstrainAspectRatio : 1; // 0x3f0(0x01)
	char pad_3F0_1 : 7; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	float AspectRatio; // 0x3f4(0x04)
	float FOVAngle; // 0x3f8(0x04)
	float PostProcessBlendWeight; // 0x3fc(0x04)
	struct FPostProcessSettings PostProcessSettings; // 0x400(0x600)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5188200
};

// Class Engine.NavigationObjectBase
// Size: 0x3f8 (Inherited: 0x3d0)
struct ANavigationObjectBase : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x3d8(0x08)
	struct UBillboardComponent* GoodSprite; // 0x3e0(0x08)
	struct UBillboardComponent* BadSprite; // 0x3e8(0x08)
	char bIsPIEPlayerStart : 1; // 0x3f0(0x01)
	char pad_3F0_1 : 7; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
};

// Class Engine.PlayerStart
// Size: 0x408 (Inherited: 0x3f8)
struct APlayerStart : ANavigationObjectBase {
	struct FName PlayerStartTag; // 0x3f8(0x0c)
	char pad_404[0x4]; // 0x404(0x04)
};

// Class Engine.ShapeComponent
// Size: 0x560 (Inherited: 0x550)
struct UShapeComponent : UPrimitiveComponent {
	struct UBodySetup* ShapeBodySetup; // 0x548(0x08)
	struct UNavAreaBase* AreaClass; // 0x550(0x08)
	struct FColor ShapeColor; // 0x558(0x04)
	char bDrawOnlyIfSelected : 1; // 0x55c(0x01)
	char bShouldCollideWhenPlacing : 1; // 0x55c(0x01)
	char bDynamicObstacle : 1; // 0x55c(0x01)
	bool bAimingShape; // 0x55d(0x01)
	bool bAddToVisibleBounds; // 0x55e(0x01)
};

// Class Engine.BoxComponent
// Size: 0x570 (Inherited: 0x560)
struct UBoxComponent : UShapeComponent {
	struct FVector BoxExtent; // 0x560(0x0c)
	float LineThickness; // 0x56c(0x04)

	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5188640
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5188420
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51883c0
};

// Class Engine.InputBindingComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UInputBindingComponent : UActorComponent {
};

// Class Engine.TargetPoint
// Size: 0x3d0 (Inherited: 0x3d0)
struct ATargetPoint : AActor {
};

// Class Engine.PhysicsVolume
// Size: 0x418 (Inherited: 0x408)
struct APhysicsVolume : AVolume {
	float TerminalVelocity; // 0x408(0x04)
	int32_t Priority; // 0x40c(0x04)
	float FluidFriction; // 0x410(0x04)
	char bWaterVolume : 1; // 0x414(0x01)
	char bPhysicsOnContact : 1; // 0x414(0x01)
	char pad_414_2 : 6; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
};

// Class Engine.GameModeBase
// Size: 0x480 (Inherited: 0x3d0)
struct AGameModeBase : AInfo {
	struct FString OptionsString; // 0x3d0(0x10)
	struct AGameSession* GameSessionClass; // 0x3e0(0x08)
	struct AGameStateBase* GameStateClass; // 0x3e8(0x08)
	struct APlayerController* PlayerControllerClass; // 0x3f0(0x08)
	struct APlayerState* PlayerStateClass; // 0x3f8(0x08)
	struct AHUD* HUDClass; // 0x400(0x08)
	struct APawn* DefaultPawnClass; // 0x408(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x410(0x08)
	struct APlayerController* ReplaySpectatorPlayerControllerClass; // 0x418(0x08)
	struct AServerStatReplicator* ServerStatReplicatorClass; // 0x420(0x08)
	struct APlayerController* SpectatorPlayerControllerClass; // 0x428(0x08)
	struct APlayerState* SpectatorPlayerStateClass; // 0x430(0x08)
	struct AGameSession* GameSession; // 0x438(0x08)
	struct AGameStateBase* GameState; // 0x440(0x08)
	struct AServerStatReplicator* ServerStatReplicator; // 0x448(0x08)
	struct FText DefaultPlayerName; // 0x450(0x18)
	char bUseSeamlessTravel : 1; // 0x468(0x01)
	char bStartPlayersAsSpectators : 1; // 0x468(0x01)
	char bPauseable : 1; // 0x468(0x01)
	char pad_468_3 : 5; // 0x468(0x01)
	char pad_469[0x17]; // 0x469(0x17)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // @ game+0x51f8d80
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor // (Native|Event|Public|BlueprintEvent) // @ game+0x51f8c70
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x51f8b40
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset // (Native|Event|Public|BlueprintEvent) // @ game+0x51f8a90
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost // (Native|Public|BlueprintCallable) // @ game+0x51f8910
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51f87e0
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x51f8700
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x51f8670
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel // (Native|Public|BlueprintCallable) // @ game+0x1d87180
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x51f8510
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x51f8460
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x51f8350
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot // (Native|Event|Public|BlueprintEvent) // @ game+0x51f8270
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer // (Native|Event|Protected|BlueprintEvent) // @ game+0x51c4580
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b92420
	bool HasMatchEnded(); // Function Engine.GameModeBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51a5bd0
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer // (Native|Event|Public|BlueprintEvent) // @ game+0x51f81e0
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators // (Native|Public|BlueprintCallable) // @ game+0x51f81a0
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers // (Native|Public|BlueprintCallable) // @ game+0x51f8160
	struct UObject* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x51f8080
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x51f7f70
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x51f7d70
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName // (Native|Public|BlueprintCallable) // @ game+0x51f7c20
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate // (Native|Event|Public|BlueprintEvent) // @ game+0x51f7b40
};

// Class Engine.GameMode
// Size: 0x4c0 (Inherited: 0x480)
struct AGameMode : AGameModeBase {
	struct FName MatchState; // 0x480(0x0c)
	char bDelayedStart : 1; // 0x48c(0x01)
	char pad_48C_1 : 7; // 0x48c(0x01)
	char pad_48D[0x3]; // 0x48d(0x03)
	int32_t NumSpectators; // 0x490(0x04)
	int32_t NumPlayers; // 0x494(0x04)
	int32_t NumBots; // 0x498(0x04)
	float MinRespawnDelay; // 0x49c(0x04)
	int32_t NumTravellingPlayers; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x4a8(0x08)
	float InactivePlayerStateLifeSpan; // 0x4b0(0x04)
	int32_t MaxInactivePlayers; // 0x4b4(0x04)
	bool bHandleDedicatedServerReplays; // 0x4b8(0x01)
	char pad_4B9[0x7]; // 0x4b9(0x07)

	void StartMatch(); // Function Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // @ game+0x51f8d50
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit // (Exec|Native|Public) // @ game+0x51f8a00
	void Say(struct FString Msg); // Function Engine.GameMode.Say // (Exec|Native|Public|BlueprintCallable) // @ game+0x51f8940
	void RestartGame(); // Function Engine.GameMode.RestartGame // (Native|Public|BlueprintCallable) // @ game+0x51f8640
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x51f8600
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x51f85c0
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState // (Event|Protected|BlueprintEvent) // @ game+0x33d1d50
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5197020
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51f8130
	void EndMatch(); // Function Engine.GameMode.EndMatch // (Native|Public|BlueprintCallable) // @ game+0x51f7f40
	void AbortMatch(); // Function Engine.GameMode.AbortMatch // (Native|Public|BlueprintCallable) // @ game+0x51f7b10
};

// Class Engine.NavAreaBase
// Size: 0x38 (Inherited: 0x30)
struct UNavAreaBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Engine.SpectatorPawn
// Size: 0x458 (Inherited: 0x458)
struct ASpectatorPawn : ADefaultPawn {
};

// Class Engine.FloatingPawnMovement
// Size: 0x190 (Inherited: 0x178)
struct UFloatingPawnMovement : UPawnMovementComponent {
	float MaxSpeed; // 0x178(0x04)
	float Acceleration; // 0x17c(0x04)
	float Deceleration; // 0x180(0x04)
	float TurningBoost; // 0x184(0x04)
	char bPositionCorrected : 1; // 0x188(0x01)
	char pad_188_1 : 7; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
};

// Class Engine.SpectatorPawnMovement
// Size: 0x198 (Inherited: 0x190)
struct USpectatorPawnMovement : UFloatingPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x190(0x01)
	char pad_190_1 : 7; // 0x190(0x01)
	char pad_191[0x7]; // 0x191(0x07)
};

// Class Engine.SphereComponent
// Size: 0x570 (Inherited: 0x560)
struct USphereComponent : UShapeComponent {
	float SphereRadius; // 0x560(0x04)
	char pad_564[0xc]; // 0x564(0x0c)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x5406e50
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198ca0
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404ff0
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5404fa0
};

// Class Engine.PlayerCameraManager
// Size: 0x2e60 (Inherited: 0x3d0)
struct APlayerCameraManager : AActor {
	struct APlayerController* PCOwner; // 0x3d0(0x08)
	struct USceneComponent* TransformComponent; // 0x3d8(0x08)
	char pad_3E0[0xc]; // 0x3e0(0x0c)
	float DefaultFOV; // 0x3ec(0x04)
	char pad_3F0[0xd4]; // 0x3f0(0xd4)
	float DefaultOrthoWidth; // 0x4c4(0x04)
	char pad_4C8[0x4]; // 0x4c8(0x04)
	float DefaultAspectRatio; // 0x4cc(0x04)
	char pad_4D0[0x40]; // 0x4d0(0x40)
	struct FCameraCacheEntry CameraCache; // 0x510(0x6a0)
	struct FCameraCacheEntry LastFrameCameraCache; // 0xbb0(0x6a0)
	struct FTViewTarget ViewTarget; // 0x1250(0x6b0)
	struct FTViewTarget PendingViewTarget; // 0x1900(0x6b0)
	char pad_1FB0[0x30]; // 0x1fb0(0x30)
	struct FCameraCacheEntry CameraCachePrivate; // 0x1fe0(0x6a0)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x2680(0x6a0)
	struct TArray<struct UCameraModifier*> ModifierList; // 0x2d20(0x10)
	struct TArray<struct UCameraModifier*> DefaultModifiers; // 0x2d30(0x10)
	float FreeCamDistance; // 0x2d40(0x04)
	struct FVector FreeCamOffset; // 0x2d44(0x0c)
	struct FVector FreeCamAdditiveRotation; // 0x2d50(0x0c)
	struct FVector ViewTargetOffset; // 0x2d5c(0x0c)
	struct FMulticastInlineDelegate OnAudioFadeChangeEvent; // 0x2d68(0x10)
	char pad_2D78[0x10]; // 0x2d78(0x10)
	struct TArray<struct AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x2d88(0x10)
	struct UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x2d98(0x08)
	struct UCameraAnimInst* AnimInstPool[0x8]; // 0x2da0(0x40)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x2de0(0x10)
	char pad_2DF0[0x10]; // 0x2df0(0x10)
	struct TArray<struct UCameraAnimInst*> ActiveAnims; // 0x2e00(0x10)
	struct TArray<struct UCameraAnimInst*> FreeAnims; // 0x2e10(0x10)
	struct ACameraActor* AnimCameraActor; // 0x2e20(0x08)
	char bIsOrthographic : 1; // 0x2e28(0x01)
	char bDefaultConstrainAspectRatio : 1; // 0x2e28(0x01)
	char pad_2E28_2 : 4; // 0x2e28(0x01)
	char bClientSimulatingViewTarget : 1; // 0x2e28(0x01)
	char bUseClientSideCameraUpdates : 1; // 0x2e28(0x01)
	char pad_2E29_0 : 2; // 0x2e29(0x01)
	char bGameCameraCutThisFrame : 1; // 0x2e29(0x01)
	char pad_2E29_3 : 5; // 0x2e29(0x01)
	char pad_2E2A[0x2]; // 0x2e2a(0x02)
	float ViewPitchMin; // 0x2e2c(0x04)
	float ViewPitchMax; // 0x2e30(0x04)
	float ViewYawMin; // 0x2e34(0x04)
	float ViewYawMax; // 0x2e38(0x04)
	float ViewRollMin; // 0x2e3c(0x04)
	float ViewRollMax; // 0x2e40(0x04)
	char pad_2E44[0x4]; // 0x2e44(0x04)
	float ServerUpdateCameraTimeout; // 0x2e48(0x04)
	char pad_2E4C[0x14]; // 0x2e4c(0x14)

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates // (Final|Native|Protected) // @ game+0x5371060
	void StopCameraShake(struct UCameraShakeBase* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // @ game+0x5370f50
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade // (Native|Public|BlueprintCallable) // @ game+0x1cba4a0
	void StopCameraAnimInst(struct UCameraAnimInst* AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst // (Native|Public|BlueprintCallable) // @ game+0x5370e70
	void StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource // (Native|Public|BlueprintCallable) // @ game+0x5370d60
	void StopAllInstancesOfCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake // (Native|Public|BlueprintCallable) // @ game+0x5370c80
	void StopAllInstancesOfCameraAnim(struct UCameraAnim* Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim // (Native|Public|BlueprintCallable) // @ game+0x5370ba0
	void StopAllCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource // (Native|Public|BlueprintCallable) // @ game+0x5370ac0
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes // (Native|Public|BlueprintCallable) // @ game+0x5370a20
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims // (Native|Public|BlueprintCallable) // @ game+0x5370980
	struct UMatineeCameraShake* StartMatineeCameraShakeFromSource(struct UMatineeCameraShake* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartMatineeCameraShakeFromSource // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53707a0
	struct UMatineeCameraShake* StartMatineeCameraShake(struct UMatineeCameraShake* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartMatineeCameraShake // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5370610
	struct UCameraShakeBase* StartCameraShakeFromSource(struct UCameraShakeBase* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShakeFromSource // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5370420
	struct UCameraShakeBase* StartCameraShake(struct UCameraShakeBase* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShake // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5370290
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53700a0
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x536ff70
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame // (Final|Native|Public|BlueprintCallable) // @ game+0x536ff50
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x536fea0
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x536fe10
	struct UCameraAnimInst* PlayCameraAnim(struct UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x536faf0
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify // (BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x536f950
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x1ce9740
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x2be4af0
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x2c509e0
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x2beff70
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2bc67f0
	float GetFOVAngle1P(); // Function Engine.PlayerCameraManager.GetFOVAngle1P // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198890
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198850
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f450
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f400
	struct UCameraModifier* FindCameraModifierByClass(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass // (Native|Public|BlueprintCallable) // @ game+0x536f350
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects // (Native|Public|BlueprintCallable) // @ game+0x2f7f990
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	struct UCameraModifier* AddNewCameraModifier(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x536f2a0
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x536f1f0
};

// Class Engine.DamageType
// Size: 0x48 (Inherited: 0x30)
struct UDamageType : UObject {
	char bCausedByWorld : 1; // 0x30(0x01)
	char bScaleMomentumByMass : 1; // 0x30(0x01)
	char bRadialDamageVelChange : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float DamageImpulse; // 0x34(0x04)
	float DestructibleImpulse; // 0x38(0x04)
	float DestructibleDamageSpreadScale; // 0x3c(0x04)
	float DamageFalloff; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.GameSession
// Size: 0x3f0 (Inherited: 0x3d0)
struct AGameSession : AInfo {
	int32_t MaxSpectators; // 0x3d0(0x04)
	int32_t MaxPlayers; // 0x3d4(0x04)
	int32_t MaxPartySize; // 0x3d8(0x04)
	char MaxSplitscreensPerConnection; // 0x3dc(0x01)
	bool bRequiresPushToTalk; // 0x3dd(0x01)
	char pad_3DE[0x2]; // 0x3de(0x02)
	struct FName SessionName; // 0x3e0(0x0c)
	char pad_3EC[0x4]; // 0x3ec(0x04)
};

// Class Engine.GameUserSettings
// Size: 0x130 (Inherited: 0x30)
struct UGameUserSettings : UObject {
	bool bUseVSync; // 0x30(0x01)
	bool bUseDynamicResolution; // 0x31(0x01)
	char pad_32[0x56]; // 0x32(0x56)
	uint32_t ResolutionSizeX; // 0x88(0x04)
	uint32_t ResolutionSizeY; // 0x8c(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x04)
	int32_t WindowPosX; // 0x98(0x04)
	int32_t WindowPosY; // 0x9c(0x04)
	int32_t FullscreenMode; // 0xa0(0x04)
	int32_t LastConfirmedFullscreenMode; // 0xa4(0x04)
	int32_t PreferredFullscreenMode; // 0xa8(0x04)
	uint32_t Version; // 0xac(0x04)
	int32_t AudioQualityLevel; // 0xb0(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xb4(0x04)
	float FrameRateLimit; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	int32_t DesiredScreenWidth; // 0xc0(0x04)
	bool bUseDesiredScreenHeight; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	int32_t DesiredScreenHeight; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xcc(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xd0(0x04)
	float LastRecommendedScreenWidth; // 0xd4(0x04)
	float LastRecommendedScreenHeight; // 0xd8(0x04)
	float LastCPUBenchmarkResult; // 0xdc(0x04)
	float LastGPUBenchmarkResult; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xe8(0x10)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xf8(0x10)
	float LastGPUBenchmarkMultiplier; // 0x108(0x04)
	bool bUseHDRDisplayOutput; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	int32_t HDRDisplayOutputNits; // 0x110(0x04)
	char pad_114[0xc]; // 0x114(0x0c)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x120(0x10)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // @ game+0x51a1000
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52117d0
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x5211620
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5211740
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x52116b0
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x2bc6cb0
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5211590
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5211500
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5211470
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52113e0
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx // (Final|Native|Public|BlueprintCallable) // @ game+0x5211360
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue // (Final|Native|Public|BlueprintCallable) // @ game+0x52112d0
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable) // @ game+0x5211250
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x52111c0
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel // (Native|Public|BlueprintCallable) // @ game+0x5211130
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode // (Native|Public|BlueprintCallable) // @ game+0x52110a0
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x5211020
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5210f90
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x5210f00
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues // (Final|Native|Public|BlueprintCallable) // @ game+0x5210ee0
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x5210e50
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x5210dc0
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings // (Native|Public|BlueprintCallable) // @ game+0x2bc6fd0
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark // (Native|Public|BlueprintCallable) // @ game+0x5210cb0
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode // (Native|Public|BlueprintCallable) // @ game+0x2be7200
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings // (Native|Public|BlueprintCallable) // @ game+0x2bc70b0
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings // (Native|Public|BlueprintCallable) // @ game+0x1cdc320
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c6b500
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210c20
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210bf0
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210bc0
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210b90
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210b60
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210b30
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210af0
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c9b580
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210a00
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52109d0
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52109a0
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210970
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210940
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x52108c0
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210890
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x52106f0
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210550
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x5210510
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52104e0
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cabd80
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d9aeb0
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210340
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210310
	struct UGameUserSettings* GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52102e0
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52102b0
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210280
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5210250
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e32c00
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210210
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52101d0
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52101a0
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x2bcc0e0
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5210160
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5210130
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2308af0
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x215af40
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x5210060
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode // (Native|Public|BlueprintCallable) // @ game+0x2be7660
	bool AreVideoSettingsUnconfirmed(); // Function Engine.GameUserSettings.AreVideoSettingsUnconfirmed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7e180
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings // (Native|Public|BlueprintCallable) // @ game+0x520ffc0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x520ff20
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x2cab080
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults // (Native|Public|BlueprintCallable) // @ game+0x520fef0
};

// Class Engine.LocalPlayer
// Size: 0x268 (Inherited: 0x50)
struct ULocalPlayer : UPlayer {
	char pad_50[0x28]; // 0x50(0x28)
	struct UGameViewportClient* ViewportClient; // 0x78(0x08)
	char pad_80[0x1c]; // 0x80(0x1c)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct APlayerController* PendingLevelPlayerControllerClass; // 0xa0(0x08)
	char bSentSplitJoin : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x17]; // 0xa9(0x17)
	int32_t ControllerId; // 0xc0(0x04)
	char pad_C4[0x1a4]; // 0xc4(0x1a4)
};

// Class Engine.SoundNode
// Size: 0x60 (Inherited: 0x30)
struct USoundNode : UObject {
	struct TArray<struct USoundNode*> ChildNodes; // 0x30(0x10)
	char pad_40[0x20]; // 0x40(0x20)
};

// Class Engine.SkyLight
// Size: 0x3e0 (Inherited: 0x3d0)
struct ASkyLight : AInfo {
	struct USkyLightComponent* LightComponent; // 0x3d0(0x08)
	char bEnabled : 1; // 0x3d8(0x01)
	char pad_3D8_1 : 7; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled // (Native|Public) // @ game+0x2beff70
};

// Class Engine.Texture
// Size: 0xf0 (Inherited: 0x68)
struct UTexture : UStreamableRenderAsset {
	char pad_68[0x8]; // 0x68(0x08)
	struct FGuid LightingGuid; // 0x70(0x10)
	int32_t LODBias; // 0x80(0x04)
	enum class ETextureStreamingImportance StreamingImportance; // 0x84(0x01)
	enum class TextureCompressionSettings CompressionSettings; // 0x85(0x01)
	enum class TextureFilter Filter; // 0x86(0x01)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0x87(0x01)
	enum class TextureGroup LODGroup; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	struct FPerPlatformFloat Downscale; // 0x8c(0x04)
	enum class ETextureDownscaleOptions DownscaleOptions; // 0x90(0x01)
	char SRGB : 1; // 0x91(0x01)
	char bNoTiling : 1; // 0x91(0x01)
	char VirtualTextureStreaming : 1; // 0x91(0x01)
	char CompressionYCoCg : 1; // 0x91(0x01)
	char bNotOfflineProcessed : 1; // 0x91(0x01)
	char pad_91_5 : 3; // 0x91(0x01)
	char pad_92[0x2]; // 0x92(0x02)
	int32_t ForcedStreamingRefCount; // 0x94(0x04)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0xa0(0x10)
	char pad_B0[0x40]; // 0xb0(0x40)
};

// Class Engine.TextureCube
// Size: 0x148 (Inherited: 0xf0)
struct UTextureCube : UTexture {
	char pad_F0[0x58]; // 0xf0(0x58)
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x6a0 (Inherited: 0x600)
struct UInstancedStaticMeshComponent : UStaticMeshComponent {
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x5f8(0x10)
	int32_t NumCustomDataFloats; // 0x608(0x04)
	struct TArray<float> PerInstanceSMCustomData; // 0x610(0x10)
	int32_t InstancingRandomSeed; // 0x620(0x04)
	int32_t InstanceStartCullDistance; // 0x624(0x04)
	int32_t InstanceEndCullDistance; // 0x628(0x04)
	struct TArray<int32_t> InstanceReorderTable; // 0x630(0x10)
	char pad_640[0x48]; // 0x640(0x48)
	int32_t NumPendingLightmaps; // 0x688(0x04)
	char pad_68C[0x4]; // 0x68c(0x04)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x690(0x10)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5226f40
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue // (Native|Public|BlueprintCallable) // @ game+0x5226d00
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances // (Final|Native|Public|BlueprintCallable) // @ game+0x5226c30
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance // (Native|Public|BlueprintCallable) // @ game+0x5226b10
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x52266c0
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5226970
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5226820
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5226690
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances // (Native|Public|BlueprintCallable) // @ game+0x5226640
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5226420
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52261d0
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5225f90
	struct TArray<int32_t> AddInstances(struct TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices); // Function Engine.InstancedStaticMeshComponent.AddInstances // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5226070
	int32_t AddInstance(struct FTransform& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5225ea0
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0x790 (Inherited: 0x6a0)
struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	char pad_6A0[0x10]; // 0x6a0(0x10)
	struct TArray<int32_t> SortedInstances; // 0x6b0(0x10)
	int32_t NumBuiltInstances; // 0x6c0(0x04)
	char pad_6C4[0x4]; // 0x6c4(0x04)
	struct FBox BuiltInstanceBounds; // 0x6c8(0x1c)
	struct FBox UnbuiltInstanceBounds; // 0x6e4(0x1c)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0x700(0x10)
	char bEnableDensityScaling : 1; // 0x710(0x01)
	char pad_710_1 : 7; // 0x710(0x01)
	char pad_711[0x7]; // 0x711(0x07)
	int32_t OcclusionLayerNumNodes; // 0x718(0x04)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0x71c(0x1c)
	bool bDisableCollision; // 0x738(0x01)
	char pad_739[0x3]; // 0x739(0x03)
	int32_t InstanceCountToRender; // 0x73c(0x04)
	char pad_740[0x50]; // 0x740(0x50)

	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5218030
};

// Class Engine.StaticMeshActor
// Size: 0x3e0 (Inherited: 0x3d0)
struct AStaticMeshActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x3d0(0x08)
	bool bStaticMeshReplicateMovement; // 0x3d8(0x01)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x3d9(0x01)
	char pad_3DA[0x6]; // 0x3da(0x06)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // @ game+0x5414560
};

// Class Engine.MaterialInterface
// Size: 0xa8 (Inherited: 0x30)
struct UMaterialInterface : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x40(0x08)
	char pad_48[0x10]; // 0x48(0x10)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x58(0x24)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x80(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x90(0x10)
	char pad_A0[0x8]; // 0xa0(0x08)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53205f0
	struct UPhysicalMaterialMask* GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x461c300
	struct UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5320550
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x461c340
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface* LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53203f0
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53203c0
};

// Class Engine.MaterialInstance
// Size: 0x3d0 (Inherited: 0xa8)
struct UMaterialInstance : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0xa8(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xb0(0x40)
	struct UMaterialInterface* Parent; // 0xf0(0x08)
	char bHasStaticPermutationResource : 1; // 0xf8(0x01)
	char bOverrideSubsurfaceProfile : 1; // 0xf8(0x01)
	char pad_F8_2 : 6; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x100(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x110(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x120(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x130(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x140(0x10)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x150(0x38)
	char pad_188[0x30]; // 0x188(0x30)
	struct FStaticParameterSet StaticParameters; // 0x1b8(0x40)
	struct FMaterialCachedParameters CachedLayerParameters; // 0x1f8(0x1a0)
	struct TArray<struct UObject*> CachedReferencedTextures; // 0x398(0x10)
	char pad_3A8[0x28]; // 0x3a8(0x28)
};

// Class Engine.MaterialInstanceConstant
// Size: 0x3d8 (Inherited: 0x3d0)
struct UMaterialInstanceConstant : UMaterialInstance {
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0x3d0(0x08)

	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53180d0
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5317ec0
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5317cb0
};

// Class Engine.WorldSubsystem
// Size: 0x38 (Inherited: 0x38)
struct UWorldSubsystem : USubsystem {
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionCustomOutput : UMaterialExpression {
};

// Class Engine.EngineCustomTimeStep
// Size: 0x30 (Inherited: 0x30)
struct UEngineCustomTimeStep : UObject {
};

// Class Engine.TimecodeProvider
// Size: 0x38 (Inherited: 0x30)
struct UTimecodeProvider : UObject {
	float FrameDelay; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a8e0
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a8a0
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a7c0
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a6f0
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a6b0
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a670
	bool FetchTimecode(struct FQualifiedFrameTime& OutFrameTime); // Function Engine.TimecodeProvider.FetchTimecode // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x542a5b0
	void FetchAndUpdate(); // Function Engine.TimecodeProvider.FetchAndUpdate // (Native|Public|BlueprintCallable) // @ game+0x2cab080
};

// Class Engine.AnimNotify
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotify : UObject {
	char pad_30[0x10]; // 0x30(0x10)

	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotify.Received_Notify // (Event|Public|BlueprintEvent|Const) // @ game+0x33d1d50
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x47b6910
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x30 (Inherited: 0x30)
struct UDynamicBlueprintBinding : UObject {
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x338 (Inherited: 0x240)
struct UBlueprintGeneratedClass : UClass {
	int32_t NumReplicatedProperties; // 0x240(0x04)
	char bHasNativizedParent : 1; // 0x244(0x01)
	char bHasCookedComponentInstancingData : 1; // 0x244(0x01)
	char pad_244_2 : 6; // 0x244(0x01)
	char pad_245[0x3]; // 0x245(0x03)
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x248(0x10)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x258(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x268(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x278(0x10)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x288(0x08)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x290(0x08)
	struct UStructProperty* UberGraphFramePointerProperty; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct UFunction* UberGraphFunction; // 0x2a8(0x08)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2b0(0x50)
	char pad_300[0x38]; // 0x300(0x38)
};

// Class Engine.CameraComponent
// Size: 0x910 (Inherited: 0x290)
struct UCameraComponent : USceneComponent {
	bool bOverrideFov; // 0x288(0x01)
	bool bOverrideCameraRenderSettings; // 0x289(0x01)
	float fieldOfView; // 0x28c(0x04)
	float OrthoWidth; // 0x290(0x04)
	float OrthoNearClipPlane; // 0x294(0x04)
	float OrthoFarClipPlane; // 0x298(0x04)
	float AspectRatio; // 0x29c(0x04)
	char bConstrainAspectRatio : 1; // 0x2a0(0x01)
	char bUseFieldOfViewForLOD : 1; // 0x2a0(0x01)
	char bLockToHmd : 1; // 0x2a0(0x01)
	char bUsePawnControlRotation : 1; // 0x2a0(0x01)
	enum class ECameraProjectionMode ProjectionMode; // 0x2a1(0x01)
	char pad_2A7_4 : 4; // 0x2a7(0x01)
	char pad_2A8[0x38]; // 0x2a8(0x38)
	float PostProcessBlendWeight; // 0x2e0(0x04)
	char pad_2E4[0x2c]; // 0x2e4(0x2c)
	struct FPostProcessSettings PostProcessSettings; // 0x310(0x600)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x5188aa0
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x51889a0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x5188920
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x51888a0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x5188820
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x51887a0
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView // (Native|Public|BlueprintCallable) // @ game+0x46b5b10
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x51885c0
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x5188490
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cc6720
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5188230
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x5188010
};

// Class Engine.SoundBase
// Size: 0x1c0 (Inherited: 0x30)
struct USoundBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct USoundClass* SoundClassObject; // 0x38(0x08)
	char bDebug : 1; // 0x40(0x01)
	char bOverrideConcurrency : 1; // 0x40(0x01)
	char bOutputToBusOnly : 1; // 0x40(0x01)
	char bHasDelayNode : 1; // 0x40(0x01)
	char bHasConcatenatorNode : 1; // 0x40(0x01)
	char bBypassVolumeScaleForPriority : 1; // 0x40(0x01)
	char pad_40_6 : 2; // 0x40(0x01)
	enum class EVirtualizationMode VirtualizationMode; // 0x41(0x01)
	char pad_42[0x56]; // 0x42(0x56)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x98(0x50)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xe8(0x28)
	float Duration; // 0x110(0x04)
	float MaxDistance; // 0x114(0x04)
	float TotalSamples; // 0x118(0x04)
	float Priority; // 0x11c(0x04)
	struct USoundAttenuation* AttenuationSettings; // 0x120(0x08)
	struct FSoundModulationDefaultRoutingSettings ModulationSettings; // 0x128(0x48)
	struct USoundSubmixBase* SoundSubmixObject; // 0x170(0x08)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x178(0x10)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x188(0x08)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x190(0x10)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x1a0(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x1b0(0x10)
};

// Class Engine.SoundWave
// Size: 0x380 (Inherited: 0x1c0)
struct USoundWave : USoundBase {
	int32_t CompressionQuality; // 0x1c0(0x04)
	int32_t StreamingPriority; // 0x1c4(0x04)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x1c8(0x01)
	char pad_1C9[0x1]; // 0x1c9(0x01)
	enum class ESoundGroup SoundGroup; // 0x1ca(0x01)
	char bLooping : 1; // 0x1cb(0x01)
	char bStreaming : 1; // 0x1cb(0x01)
	char bSeekableStreaming : 1; // 0x1cb(0x01)
	char pad_1CB_3 : 5; // 0x1cb(0x01)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x1cc(0x01)
	char pad_1CD_0 : 6; // 0x1cd(0x01)
	char bMature : 1; // 0x1cd(0x01)
	char bManualWordWrap : 1; // 0x1cd(0x01)
	char bSingleLine : 1; // 0x1ce(0x01)
	char bIsAmbisonics : 1; // 0x1ce(0x01)
	char pad_1CE_2 : 6; // 0x1ce(0x01)
	char pad_1CF[0x1]; // 0x1cf(0x01)
	struct TArray<float> FrequenciesToAnalyze; // 0x1d0(0x10)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x1e0(0x10)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x1f0(0x10)
	int32_t InitialChunkSize; // 0x200(0x04)
	char pad_204[0x44]; // 0x204(0x44)
	struct FString SpokenText; // 0x248(0x10)
	float SubtitlePriority; // 0x258(0x04)
	float Volume; // 0x25c(0x04)
	float Pitch; // 0x260(0x04)
	int32_t NumChannels; // 0x264(0x04)
	int32_t SampleRate; // 0x268(0x04)
	char pad_26C[0xc]; // 0x26c(0x0c)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x278(0x10)
	struct UCurveTable* Curves; // 0x288(0x08)
	struct UCurveTable* InternalCurves; // 0x290(0x08)
	char pad_298[0xe8]; // 0x298(0xe8)
};

// Class Engine.SoundWaveProcedural
// Size: 0x3d0 (Inherited: 0x380)
struct USoundWaveProcedural : USoundWave {
	char pad_380[0x50]; // 0x380(0x50)
};

// Class Engine.Model
// Size: 0x298 (Inherited: 0x30)
struct UModel : UObject {
	char pad_30[0x268]; // 0x30(0x268)
};

// Class Engine.Channel
// Size: 0x78 (Inherited: 0x30)
struct UChannel : UObject {
	struct UNetConnection* Connection; // 0x30(0x08)
	char pad_38[0x40]; // 0x38(0x40)
};

// Class Engine.ActorChannel
// Size: 0x2a8 (Inherited: 0x78)
struct UActorChannel : UChannel {
	struct AActor* Actor; // 0x78(0x08)
	char pad_80[0xe8]; // 0x80(0xe8)
	struct TArray<struct UObject*> CreateSubObjects; // 0x168(0x10)
	char pad_178[0x130]; // 0x178(0x130)
};

// Class Engine.AnimationAsset
// Size: 0x90 (Inherited: 0x30)
struct UAnimationAsset : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct USkeleton* Skeleton; // 0x40(0x08)
	char pad_48[0x20]; // 0x48(0x20)
	struct TArray<struct UAnimMetaData*> MetaData; // 0x68(0x10)
	char pad_78[0x4]; // 0x78(0x04)
	uint32_t SkeletonHash; // 0x7c(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x80(0x10)
};

// Class Engine.BlendSpaceBase
// Size: 0x158 (Inherited: 0x90)
struct UBlendSpaceBase : UAnimationAsset {
	char pad_90[0x8]; // 0x90(0x08)
	bool bRotationBlendInMeshSpace; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float AnimLength; // 0x9c(0x04)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0xa0(0x18)
	float TargetWeightInterpolationSpeedPerSec; // 0xb8(0x04)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xc0(0x10)
	int32_t SampleIndexWithMarkers; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct TArray<struct FBlendSample> SampleData; // 0xd8(0x10)
	struct TArray<struct FEditorElement> GridSamples; // 0xe8(0x10)
	struct FBlendParameter BlendParameters[0x3]; // 0xf8(0x60)
};

// Class Engine.BlendSpace
// Size: 0x160 (Inherited: 0x158)
struct UBlendSpace : UBlendSpaceBase {
	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x160 (Inherited: 0x160)
struct UAimOffsetBlendSpace : UBlendSpace {
};

// Class Engine.BlendSpace1D
// Size: 0x160 (Inherited: 0x158)
struct UBlendSpace1D : UBlendSpaceBase {
	bool bScaleAnimation; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x160 (Inherited: 0x160)
struct UAimOffsetBlendSpace1D : UBlendSpace1D {
};

// Class Engine.AmbientSound
// Size: 0x3d8 (Inherited: 0x3d0)
struct AAmbientSound : AActor {
	struct UAudioComponent* AudioComponent; // 0x3d0(0x08)

	void Stop(); // Function Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x512f440
	void Play(float StartTime); // Function Engine.AmbientSound.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x512ed50
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x512eb20
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x512ea50
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x512e8d0
};

// Class Engine.AnimationSettings
// Size: 0xe0 (Inherited: 0x48)
struct UAnimationSettings : UDeveloperSettings {
	int32_t CompressCommandletVersion; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x50(0x10)
	bool ForceRecompression; // 0x60(0x01)
	bool bForceBelowThreshold; // 0x61(0x01)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x62(0x01)
	bool bRaiseMaxErrorToExisting; // 0x63(0x01)
	bool bEnablePerformanceLog; // 0x64(0x01)
	bool bStripAnimationDataOnDedicatedServer; // 0x65(0x01)
	bool bTickAnimationOnSkeletalMeshInit; // 0x66(0x01)
	char pad_67[0x1]; // 0x67(0x01)
	struct TArray<struct FCustomAttributeSetting> BoneCustomAttributesNames; // 0x68(0x10)
	struct TArray<struct FString> BoneNamesWithCustomAttributes; // 0x78(0x10)
	struct TMap<struct FName, enum class ECustomAttributeBlendType> AttributeBlendModes; // 0x88(0x50)
	enum class ECustomAttributeBlendType DefaultAttributeBlendMode; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.AnimBlueprint
// Size: 0xd0 (Inherited: 0xa8)
struct UAnimBlueprint : UBlueprint {
	char pad_A8[0x8]; // 0xa8(0x08)
	struct USkeleton* TargetSkeleton; // 0xb0(0x08)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xb8(0x10)
	bool bUseMultiThreadedAnimationUpdate; // 0xc8(0x01)
	bool bWarnAboutBlueprintUsage; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x5c0 (Inherited: 0x338)
struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass {
	char pad_338[0x8]; // 0x338(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x340(0x10)
	struct USkeleton* TargetSkeleton; // 0x350(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x358(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x368(0x50)
	char pad_3B8[0x80]; // 0x3b8(0x80)
	struct TArray<struct FName> SyncGroupNames; // 0x438(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x448(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x458(0x50)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x4a8(0x50)
	struct FPropertyAccessLibrary PropertyAccessLibrary; // 0x4f8(0xc8)
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x40 (Inherited: 0x30)
struct UAnimBoneCompressionSettings : UObject {
	struct TArray<struct UAnimBoneCompressionCodec*> Codecs; // 0x30(0x10)
};

// Class Engine.AnimClassData
// Size: 0x338 (Inherited: 0x30)
struct UAnimClassData : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x38(0x10)
	struct USkeleton* TargetSkeleton; // 0x48(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x50(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x60(0x50)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xb0(0x10)
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xc0(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> AnimNodeProperties; // 0xd0(0x10)
	char pad_E0[0x10]; // 0xe0(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimGraphNodeProperties; // 0xf0(0x10)
	char pad_100[0x10]; // 0x100(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimLayerNodeProperties; // 0x110(0x10)
	char pad_120[0x10]; // 0x120(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> PreUpdateNodeProperties; // 0x130(0x10)
	char pad_140[0x10]; // 0x140(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> DynamicResetNodeProperties; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> StateMachineNodeProperties; // 0x170(0x10)
	char pad_180[0x10]; // 0x180(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> InitializationNodeProperties; // 0x190(0x10)
	char pad_1A0[0x10]; // 0x1a0(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1b0(0x50)
	struct TArray<struct FName> SyncGroupNames; // 0x200(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x210(0x10)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x220(0x50)
	struct FPropertyAccessLibrary PropertyAccessLibrary; // 0x270(0xc8)
};

// Class Engine.AnimClassInterface
// Size: 0x30 (Inherited: 0x30)
struct UAnimClassInterface : UInterface {
};

// Class Engine.AnimSequenceBase
// Size: 0xb8 (Inherited: 0x90)
struct UAnimSequenceBase : UAnimationAsset {
	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x90(0x10)
	float SequenceLength; // 0xa0(0x04)
	float RateScale; // 0xa4(0x04)
	struct FRawCurveTracks RawCurveData; // 0xa8(0x10)

	struct TArray<struct UAnimNotifyState*> GetStateNotifiesByType(struct TSoftClassPtr<UObject> NotifyClass, struct TArray<float>& StartTimes, struct TArray<float>& Durations); // Function Engine.AnimSequenceBase.GetStateNotifiesByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5157c10
	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength // (Native|Public|BlueprintCallable) // @ game+0x5157bd0
	struct UAnimNotifyState* GetNotifyStateByType(struct TSoftClassPtr<UObject> NotifyClass, float& StartTime, float& Duration); // Function Engine.AnimSequenceBase.GetNotifyStateByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5157a50
	struct UAnimNotify* GetNotifyByType(struct TSoftClassPtr<UObject> NotifyClass, float& StartTime); // Function Engine.AnimSequenceBase.GetNotifyByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5157900
	struct TArray<struct UAnimNotify*> GetNotifiesByType(struct TSoftClassPtr<UObject> NotifyClass, struct TArray<float>& StartTimes); // Function Engine.AnimSequenceBase.GetNotifiesByType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5157770
};

// Class Engine.AnimCompositeBase
// Size: 0xb8 (Inherited: 0xb8)
struct UAnimCompositeBase : UAnimSequenceBase {
};

// Class Engine.AnimComposite
// Size: 0xc8 (Inherited: 0xb8)
struct UAnimComposite : UAnimCompositeBase {
	struct FAnimTrack AnimationTrack; // 0xb8(0x10)
};

// Class Engine.AnimCompress
// Size: 0x48 (Inherited: 0x40)
struct UAnimCompress : UAnimBoneCompressionCodec {
	char bNeedsSkeleton : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x44(0x01)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x45(0x01)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x46(0x01)
	char pad_47[0x1]; // 0x47(0x01)
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x48 (Inherited: 0x48)
struct UAnimCompress_BitwiseCompressOnly : UAnimCompress {
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x48 (Inherited: 0x48)
struct UAnimCompress_LeastDestructive : UAnimCompress_BitwiseCompressOnly {
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x68 (Inherited: 0x48)
struct UAnimCompress_RemoveLinearKeys : UAnimCompress {
	float MaxPosDiff; // 0x48(0x04)
	float MaxAngleDiff; // 0x4c(0x04)
	float MaxScaleDiff; // 0x50(0x04)
	float MaxEffectorDiff; // 0x54(0x04)
	float MinEffectorDiff; // 0x58(0x04)
	float EffectorDiffSocket; // 0x5c(0x04)
	float ParentKeyScale; // 0x60(0x04)
	char bRetarget : 1; // 0x64(0x01)
	char bActuallyFilterLinearKeys : 1; // 0x64(0x01)
	char pad_64_2 : 6; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xe0 (Inherited: 0x68)
struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys {
	float MaxZeroingThreshold; // 0x68(0x04)
	float MaxPosDiffBitwise; // 0x6c(0x04)
	float MaxAngleDiffBitwise; // 0x70(0x04)
	float MaxScaleDiffBitwise; // 0x74(0x04)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x78(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x88(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x98(0x10)
	char bResampleAnimation : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	float ResampledFramerate; // 0xac(0x04)
	int32_t MinKeysForResampling; // 0xb0(0x04)
	char bUseAdaptiveError : 1; // 0xb4(0x01)
	char bUseOverrideForEndEffectors : 1; // 0xb4(0x01)
	char pad_B4_2 : 6; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	int32_t TrackHeightBias; // 0xb8(0x04)
	float ParentingDivisor; // 0xbc(0x04)
	float ParentingDivisorExponent; // 0xc0(0x04)
	char bUseAdaptiveError2 : 1; // 0xc4(0x01)
	char pad_C4_1 : 7; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	float RotationErrorSourceRatio; // 0xc8(0x04)
	float TranslationErrorSourceRatio; // 0xcc(0x04)
	float ScaleErrorSourceRatio; // 0xd0(0x04)
	float MaxErrorPerTrackRatio; // 0xd4(0x04)
	float PerturbationProbeSize; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x50 (Inherited: 0x48)
struct UAnimCompress_RemoveEverySecondKey : UAnimCompress {
	int32_t MinKeys; // 0x48(0x04)
	char bStartAtSecondKey : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x58 (Inherited: 0x48)
struct UAnimCompress_RemoveTrivialKeys : UAnimCompress {
	float MaxPosDiff; // 0x48(0x04)
	float MaxAngleDiff; // 0x4c(0x04)
	float MaxScaleDiff; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x30 (Inherited: 0x30)
struct UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x30 (Inherited: 0x30)
struct UAnimCurveCompressionCodec_UniformIndexable : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x30 (Inherited: 0x30)
struct UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x38 (Inherited: 0x30)
struct UAnimCurveCompressionSettings : UObject {
	struct UAnimCurveCompressionCodec* Codec; // 0x30(0x08)
};

// Class Engine.AnimInstanceReplicationComponent
// Size: 0x168 (Inherited: 0xe8)
struct UAnimInstanceReplicationComponent : UActorComponent {
	struct TArray<struct FAnimInstanceStateMachines> AnimInstancesStateMachines; // 0xe8(0x10)
	struct TMap<int32_t, struct FAnimInstanceBlendSpaces> AnimInstancesBlendSpaces; // 0xf8(0x50)
	char pad_148[0x20]; // 0x148(0x20)
};

// Class Engine.AnimLayerInterface
// Size: 0x30 (Inherited: 0x30)
struct UAnimLayerInterface : UInterface {
};

// Class Engine.AnimMetaData
// Size: 0x30 (Inherited: 0x30)
struct UAnimMetaData : UObject {
};

// Class Engine.AnimMontage
// Size: 0x1e8 (Inherited: 0xb8)
struct UAnimMontage : UAnimCompositeBase {
	struct FAlphaBlend BlendIn; // 0xb8(0x30)
	float BlendInTime; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FAlphaBlend BlendOut; // 0xf0(0x30)
	float BlendOutTime; // 0x120(0x04)
	float BlendOutTriggerTime; // 0x124(0x04)
	struct FName SyncGroup; // 0x128(0x0c)
	int32_t SyncSlotIndex; // 0x134(0x04)
	struct FMarkerSyncData MarkerData; // 0x138(0x20)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x158(0x10)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x168(0x10)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x178(0x10)
	bool bEnableRootMotionTranslation; // 0x188(0x01)
	bool bEnableRootMotionRotation; // 0x189(0x01)
	bool bEnableAutoBlendOut; // 0x18a(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x18b(0x01)
	char pad_18C[0x4]; // 0x18c(0x04)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x190(0x10)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x1a0(0x10)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1b0(0x28)
	struct FName TimeStretchCurveName; // 0x1d8(0x0c)
	char pad_1E4[0x4]; // 0x1e4(0x04)

	bool IsValidSlot(struct FName InSlotName); // Function Engine.AnimMontage.IsValidSlot // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5148430
	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5e350
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x40 (Inherited: 0x40)
struct UAnimNotify_PauseClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0x90 (Inherited: 0x40)
struct UAnimNotify_PlayParticleEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
	struct FVector Scale; // 0x60(0x0c)
	char pad_6C[0x14]; // 0x6c(0x14)
	char Attached : 1; // 0x80(0x01)
	char bFirstPerson : 1; // 0x80(0x01)
	char pad_80_2 : 6; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FName SocketName; // 0x84(0x0c)
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x60 (Inherited: 0x40)
struct UAnimNotify_PlaySound : UAnimNotify {
	struct USoundBase* Sound; // 0x40(0x08)
	float VolumeMultiplier; // 0x48(0x04)
	float PitchMultiplier; // 0x4c(0x04)
	char bFollow : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FName AttachName; // 0x54(0x0c)
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x40 (Inherited: 0x40)
struct UAnimNotify_ResetClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x40 (Inherited: 0x40)
struct UAnimNotify_ResetDynamics : UAnimNotify {
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x40 (Inherited: 0x40)
struct UAnimNotify_ResumeClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_DisableRootMotion : UAnimNotifyState {
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x68 (Inherited: 0x38)
struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FName SocketName; // 0x40(0x0c)
	struct FVector LocationOffset; // 0x4c(0x0c)
	struct FRotator RotationOffset; // 0x58(0x0c)
	bool bDestroyAtEnd; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x70 (Inherited: 0x38)
struct UAnimNotifyState_Trail : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FName FirstSocketName; // 0x40(0x0c)
	struct FName SecondSocketName; // 0x4c(0x0c)
	enum class ETrailWidthMode WidthScaleMode; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FName WidthScaleCurve; // 0x5c(0x0c)
	char bRecycleSpawnedSystems : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // @ game+0x33d1d50
};

// Class Engine.AnimSequence
// Size: 0x1c0 (Inherited: 0xb8)
struct UAnimSequence : UAnimSequenceBase {
	int32_t NumFrames; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0xc0(0x10)
	char pad_D0[0x10]; // 0xd0(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xe0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xe8(0x08)
	char pad_F0[0x70]; // 0xf0(0x70)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x160(0x01)
	enum class EAdditiveBasePoseType RefPoseType; // 0x161(0x01)
	char pad_162[0x6]; // 0x162(0x06)
	struct UAnimSequence* RefPoseSeq; // 0x168(0x08)
	int32_t RefFrameIndex; // 0x170(0x04)
	struct FName RetargetSource; // 0x174(0x0c)
	enum class EAnimInterpolationType Interpolation; // 0x180(0x01)
	bool bEnableRootMotion; // 0x181(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x182(0x01)
	bool bForceRootLock; // 0x183(0x01)
	bool bUseNormalizedRootMotionScale; // 0x184(0x01)
	bool bRootMotionSettingsCopiedFromMontage; // 0x185(0x01)
	char pad_186[0x2]; // 0x186(0x02)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x188(0x10)
	char pad_198[0x18]; // 0x198(0x18)
	struct TArray<struct FBakedCustomAttributePerBoneData> BakedPerBoneCustomAttributeData; // 0x1b0(0x10)
};

// Class Engine.AnimSet
// Size: 0x100 (Inherited: 0x30)
struct UAnimSet : UObject {
	char bAnimRotationOnly : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FName> TrackBoneNames; // 0x38(0x10)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x48(0x10)
	struct TArray<char> BoneUseAnimTranslation; // 0x58(0x10)
	struct TArray<char> ForceUseMeshTranslation; // 0x68(0x10)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x78(0x10)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x88(0x10)
	struct FName PreviewSkelMeshName; // 0x98(0x0c)
	struct FName BestRatioSkelMeshName; // 0xa4(0x0c)
	char pad_B0[0x50]; // 0xb0(0x50)
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x320 (Inherited: 0x300)
struct UAnimSingleNodeInstance : UAnimInstance {
	struct UAnimationAsset* CurrentAsset; // 0x300(0x08)
	struct FDelegate PostEvaluateAnimEvent; // 0x308(0x14)
	char pad_31C[0x4]; // 0x31c(0x04)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x5158610
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x5158580
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5158460
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime // (Final|Native|Public|BlueprintCallable) // @ game+0x5158340
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x5158260
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x5158150
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x51581d0
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping // (Final|Native|Public|BlueprintCallable) // @ game+0x51580c0
	void SetBlendSpaceInput(struct FVector& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5158030
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset // (Native|Public|BlueprintCallable) // @ game+0x5157f10
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x5157e00
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength // (Final|Native|Public|BlueprintCallable) // @ game+0x5157740
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5157700
};

// Class Engine.AnimStateMachineTypes
// Size: 0x30 (Inherited: 0x30)
struct UAnimStateMachineTypes : UObject {
};

// Class Engine.AnimStreamable
// Size: 0xf8 (Inherited: 0xb8)
struct UAnimStreamable : UAnimSequenceBase {
	int32_t NumFrames; // 0xb8(0x04)
	enum class EAnimInterpolationType Interpolation; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct FName RetargetSource; // 0xc0(0x0c)
	char pad_CC[0x14]; // 0xcc(0x14)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xe0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xe8(0x08)
	bool bEnableRootMotion; // 0xf0(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xf1(0x01)
	bool bForceRootLock; // 0xf2(0x01)
	bool bUseNormalizedRootMotionScale; // 0xf3(0x01)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x178 (Inherited: 0xe8)
struct UApplicationLifecycleComponent : UActorComponent {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xf8(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x108(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x118(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x128(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x138(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x148(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x158(0x10)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x168(0x10)
};

// Class Engine.AresProceduralTexture
// Size: 0x30 (Inherited: 0x30)
struct UAresProceduralTexture : UObject {
};

// Class Engine.ArrowComponent
// Size: 0x560 (Inherited: 0x550)
struct UArrowComponent : UPrimitiveComponent {
	struct FColor ArrowColor; // 0x548(0x04)
	float ArrowSize; // 0x54c(0x04)
	float ArrowLength; // 0x550(0x04)
	float ScreenSize; // 0x554(0x04)
	char bIsScreenSizeScaled : 1; // 0x558(0x01)
	char bTreatAsASprite : 1; // 0x558(0x01)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51604b0
};

// Class Engine.AssetExportTask
// Size: 0x80 (Inherited: 0x30)
struct UAssetExportTask : UObject {
	struct UObject* Object; // 0x30(0x08)
	struct UExporter* Exporter; // 0x38(0x08)
	struct FString Filename; // 0x40(0x10)
	bool bSelected; // 0x50(0x01)
	bool bReplaceIdentical; // 0x51(0x01)
	bool bPrompt; // 0x52(0x01)
	bool bAutomated; // 0x53(0x01)
	bool bUseFileArchive; // 0x54(0x01)
	bool bWriteEmptyFiles; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
	struct TArray<struct UObject*> IgnoreObjectList; // 0x58(0x10)
	struct UObject* Options; // 0x68(0x08)
	struct TArray<struct FString> Errors; // 0x70(0x10)
};

// Class Engine.AssetImportData
// Size: 0x30 (Inherited: 0x30)
struct UAssetImportData : UObject {
};

// Class Engine.AssetManagerSettings
// Size: 0x120 (Inherited: 0x48)
struct UAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x48(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x58(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExcludeFromMobile; // 0x68(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x78(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x88(0x10)
	bool bOnlyCookProductionAssets; // 0x98(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x99(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x9a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x9b(0x01)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0xa0(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0xb0(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0xc0(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0xd0(0x50)
};

// Class Engine.AssetMappingTable
// Size: 0x40 (Inherited: 0x30)
struct UAssetMappingTable : UObject {
	struct TArray<struct FAssetMapping> MappedAssets; // 0x30(0x10)
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x70 (Inherited: 0x38)
struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x38(0x10)
	char pad_48[0x20]; // 0x48(0x20)
	struct USaveGame* SaveGameObject; // 0x68(0x08)

	struct UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5160340
	struct UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x515fc80
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x80 (Inherited: 0x38)
struct UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase {
	char pad_38[0x48]; // 0x38(0x48)
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x90 (Inherited: 0x80)
struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x515fdc0
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x90 (Inherited: 0x80)
struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x515ff10
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x90 (Inherited: 0x80)
struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x51601d0
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x90 (Inherited: 0x80)
struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x80(0x10)

	struct UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5160060
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x90 (Inherited: 0x80)
struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x80(0x10)

	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x515fac0
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x515f950
};

// Class Engine.AtmosphericFog
// Size: 0x3d8 (Inherited: 0x3d0)
struct AAtmosphericFog : AInfo {
	struct UAtmosphericFogComponent* AtmosphericFogComponent; // 0x3d0(0x08)
};

// Class Engine.AtmosphericFogComponent
// Size: 0x390 (Inherited: 0x290)
struct UAtmosphericFogComponent : USceneComponent {
	float SunMultiplier; // 0x288(0x04)
	float FogMultiplier; // 0x28c(0x04)
	float DensityMultiplier; // 0x290(0x04)
	float DensityOffset; // 0x294(0x04)
	float DistanceScale; // 0x298(0x04)
	float AltitudeScale; // 0x29c(0x04)
	float DistanceOffset; // 0x2a0(0x04)
	float GroundOffset; // 0x2a4(0x04)
	float StartDistance; // 0x2a8(0x04)
	float SunDiscScale; // 0x2ac(0x04)
	float DefaultBrightness; // 0x2b0(0x04)
	struct FColor DefaultLightColor; // 0x2b4(0x04)
	char bDisableSunDisk : 1; // 0x2b8(0x01)
	char bAtmosphereAffectsSunIlluminance : 1; // 0x2b8(0x01)
	char bDisableGroundScattering : 1; // 0x2b8(0x01)
	struct FAtmospherePrecomputeParameters PrecomputeParams; // 0x2bc(0x2c)
	struct UTexture2D* TransmittanceTexture; // 0x2e8(0x08)
	struct UTexture2D* IrradianceTexture; // 0x2f0(0x08)
	char pad_2FC_3 : 5; // 0x2fc(0x01)
	char pad_2FD[0x93]; // 0x2fd(0x93)

	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute // (Final|Native|Public|BlueprintCallable) // @ game+0x1cc6720
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x51673b0
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5167260
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166f10
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166b90
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166a20
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x51669a0
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166920
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x51668a0
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5166810
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166790
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5166480
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x51659c0
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5165930
};

// Class Engine.AudioBus
// Size: 0x38 (Inherited: 0x30)
struct UAudioBus : UObject {
	enum class EAudioBusChannels AudioBusChannels; // 0x30(0x01)
	bool bIsAutomatic; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
};

// Class Engine.AudioSettings
// Size: 0x198 (Inherited: 0x48)
struct UAudioSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultSoundClassName; // 0x48(0x20)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x68(0x20)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x88(0x20)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0xa8(0x20)
	struct FSoftObjectPath VoiPSoundClass; // 0xc8(0x20)
	struct FSoftObjectPath MasterSubmix; // 0xe8(0x20)
	struct FSoftObjectPath ReverbSubmix; // 0x108(0x20)
	struct FSoftObjectPath EQSubmix; // 0x128(0x20)
	enum class EVoiceSampleRate VoiPSampleRate; // 0x148(0x04)
	float DefaultReverbSendLevel; // 0x14c(0x04)
	int32_t MaximumConcurrentStreams; // 0x150(0x04)
	float GlobalMinPitchScale; // 0x154(0x04)
	float GlobalMaxPitchScale; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0x160(0x10)
	char bAllowPlayWhenSilent : 1; // 0x170(0x01)
	char bDisableMasterEQ : 1; // 0x170(0x01)
	char bAllowCenterChannel3DPanning : 1; // 0x170(0x01)
	char pad_170_3 : 5; // 0x170(0x01)
	char pad_171[0x3]; // 0x171(0x03)
	uint32_t NumStoppingSources; // 0x174(0x04)
	enum class EPanningMethod PanningMethod; // 0x178(0x01)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x179(0x01)
	char pad_17A[0x6]; // 0x17a(0x06)
	struct FString DialogueFilenameFormat; // 0x180(0x10)
	char pad_190[0x8]; // 0x190(0x08)
};

// Class Engine.AudioVolume
// Size: 0x478 (Inherited: 0x408)
struct AAudioVolume : AVolume {
	float Priority; // 0x408(0x04)
	char bEnabled : 1; // 0x40c(0x01)
	char pad_40C_1 : 7; // 0x40c(0x01)
	char pad_40D[0x3]; // 0x40d(0x03)
	struct FReverbSettings Settings; // 0x410(0x20)
	struct FInteriorSettings AmbientZoneSettings; // 0x430(0x24)
	char pad_454[0x4]; // 0x454(0x04)
	struct TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings; // 0x458(0x10)
	struct TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings; // 0x468(0x10)

	void SetSubmixSendSettings(struct TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings); // Function Engine.AudioVolume.SetSubmixSendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x516d670
	void SetSubmixOverrideSettings(struct TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings); // Function Engine.AudioVolume.SetSubmixOverrideSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x516d590
	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x516d4e0
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x516d460
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x516d3c0
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x516d330
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled // (Final|Native|Private) // @ game+0x516d230
};

// Class Engine.AutoDestroySubsystem
// Size: 0x60 (Inherited: 0x38)
struct UAutoDestroySubsystem : UWorldSubsystem {
	char pad_38[0x18]; // 0x38(0x18)
	struct TArray<struct AActor*> ActorsToPoll; // 0x50(0x10)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x516d160
};

// Class Engine.AutomationTestSettings
// Size: 0x350 (Inherited: 0x30)
struct UAutomationTestSettings : UObject {
	struct TArray<struct FString> EngineTestModules; // 0x30(0x10)
	struct TArray<struct FString> EditorTestModules; // 0x40(0x10)
	struct FSoftObjectPath AutomationTestmap; // 0x50(0x20)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x70(0x10)
	struct TArray<struct FSoftObjectPath> AssetsToOpen; // 0x80(0x10)
	struct TArray<struct FString> MapsToPIETest; // 0x90(0x10)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0xa0(0x1f0)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x290(0x30)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2c0(0x10)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2d0(0x30)
	struct TArray<struct FString> TestLevelFolders; // 0x300(0x10)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x310(0x10)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x320(0x10)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x330(0x10)
	struct FIntPoint DefaultScreenshotResolution; // 0x340(0x08)
	float PIETestDuration; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
};

// Class Engine.AvoidanceManager
// Size: 0xe8 (Inherited: 0x30)
struct UAvoidanceManager : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	float DefaultTimeToLive; // 0x38(0x04)
	float LockTimeAfterAvoid; // 0x3c(0x04)
	float LockTimeAfterClean; // 0x40(0x04)
	float DeltaTimeToPredict; // 0x44(0x04)
	float ArtificialRadiusExpansion; // 0x48(0x04)
	float TestHeightDifference; // 0x4c(0x04)
	float HeightCheckMargin; // 0x50(0x04)
	char pad_54[0x94]; // 0x54(0x94)

	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x516d260
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount // (Final|Native|Public|BlueprintCallable) // @ game+0x516d130
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID // (Final|Native|Public|BlueprintCallable) // @ game+0x516d100
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x516d050
};

// Class Engine.BandwidthTestActor
// Size: 0x3f0 (Inherited: 0x3d0)
struct ABandwidthTestActor : AActor {
	struct FBandwidthTestGenerator BandwidthGenerator; // 0x3d0(0x20)
};

// Class Engine.BillboardComponent
// Size: 0x570 (Inherited: 0x550)
struct UBillboardComponent : UPrimitiveComponent {
	struct UTexture2D* Sprite; // 0x548(0x08)
	char bIsScreenSizeScaled : 1; // 0x550(0x01)
	float ScreenSize; // 0x554(0x04)
	float U; // 0x558(0x04)
	float UL; // 0x55c(0x04)
	float V; // 0x560(0x04)
	float VL; // 0x564(0x04)
	char pad_56C_1 : 7; // 0x56c(0x01)
	char pad_56D[0x3]; // 0x56d(0x03)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // @ game+0x51757c0
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV // (Native|Public|BlueprintCallable) // @ game+0x5175620
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite // (Native|Public|BlueprintCallable) // @ game+0x3ffc980
};

// Class Engine.BlendableInterface
// Size: 0x30 (Inherited: 0x30)
struct UBlendableInterface : UInterface {
};

// Class Engine.Skeleton
// Size: 0x370 (Inherited: 0x30)
struct USkeleton : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct FBoneNode> BoneTree; // 0x40(0x10)
	struct TArray<struct FTransform> RefLocalPoses; // 0x50(0x10)
	char pad_60[0x118]; // 0x60(0x118)
	struct FGuid VirtualBoneGuid; // 0x178(0x10)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x188(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x198(0x10)
	char pad_1A8[0x50]; // 0x1a8(0x50)
	struct FSmartNameContainer SmartNames; // 0x1f8(0x50)
	char pad_248[0x30]; // 0x248(0x30)
	struct TArray<struct UBlendProfile*> BlendProfiles; // 0x278(0x10)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x288(0x10)
	char pad_298[0xc8]; // 0x298(0xc8)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x360(0x10)
};

// Class Engine.BlendProfile
// Size: 0x50 (Inherited: 0x30)
struct UBlendProfile : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct USkeleton* OwningSkeleton; // 0x38(0x08)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x40(0x10)
};

// Class Engine.BlockingVolume
// Size: 0x408 (Inherited: 0x408)
struct ABlockingVolume : AVolume {
};

// Class Engine.BlueprintExtension
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintExtension : UObject {
};

// Class Engine.BlueprintMapLibrary
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintMapLibrary : UBlueprintFunctionLibrary {

	void SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517cd60
	void Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517bff0
	bool Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517be30
	int32_t Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517bd80
	void Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517bc70
	bool Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517b9b0
	bool Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517b7e0
	void Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517b740
	void Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x517b4a0
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintPathsLibrary : UBlueprintFunctionLibrary {

	struct FString VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517d320
	void ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517d1c0
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517cfd0
	struct FString SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c3b0
	bool ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517cfa0
	struct FString ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517cf10
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x517ce70
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517cc10
	struct FString ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517cb80
	struct FString SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517caf0
	struct FString RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ca60
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517c950
	struct FString ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c8c0
	struct FString ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c830
	struct FString ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c7a0
	struct FString ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c710
	struct FString ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c680
	struct FString ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c5f0
	struct FString ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c560
	struct FString ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c4d0
	struct FString ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c440
	struct FString ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c3b0
	struct FString ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517c320
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517c210
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517c100
	struct FString MakeValidFileName(struct FString inString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517b350
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517b240
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517b130
	bool MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x517afb0
	struct FString LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517af20
	bool IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ae10
	bool IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ad60
	bool IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517acb0
	bool IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ac80
	bool IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517abd0
	bool HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517aba0
	struct TArray<struct FString> GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ab60
	struct TArray<struct FString> GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517ab20
	struct FString GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517aae0
	struct TArray<struct FString> GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517aaa0
	struct FString GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517aa10
	struct FString GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a920
	struct FString GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a890
	struct TArray<struct FString> GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a850
	struct FString GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a710
	struct TArray<struct FString> GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a6d0
	struct TArray<struct FString> GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a690
	struct FString GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a5a0
	struct FString GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a460
	struct FString GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a3d0
	struct FString GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a340
	struct FString GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a2b0
	struct FString GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a220
	struct FString GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a190
	bool FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a0e0
	struct FString FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x517a050
	struct FString EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179fc0
	struct FString EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179f30
	struct FString EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179ea0
	struct FString EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179e10
	struct FString EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179d80
	struct FString EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179cf0
	struct FString EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179c60
	struct FString EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179bd0
	struct FString EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179b40
	struct FString EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179ab0
	struct FString EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179a20
	struct FString EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179990
	bool DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x51798e0
	struct FString DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179850
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x51796a0
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179550
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5179400
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x51792b0
	struct FString Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5179190
	bool CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5179070
	struct FString CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178fe0
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178e90
	struct FString BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178e00
	struct FString AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178d70
	struct FString AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178ce0
	struct FString AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5178c50
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintPlatformLibrary : UBlueprintFunctionLibrary {

	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5181a30
	void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5181950
	int32_t ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5181800
	int32_t ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5181580
	void GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5181430
	enum class EScreenOrientation GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5181400
	void ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51813e0
	void CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5181360
	void CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51812c0
};

// Class Engine.BlueprintSetLibrary
// Size: 0x30 (Inherited: 0x30)
struct UBlueprintSetLibrary : UBlueprintFunctionLibrary {

	void SetSetPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5181c50
	void Set_Union(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Union // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182a20
	void Set_ToArray(struct TSet<int32_t>& A, struct TArray<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_ToArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182910
	void Set_RemoveItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items); // Function Engine.BlueprintSetLibrary.Set_RemoveItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182800
	bool Set_Remove(struct TSet<int32_t>& TargetSet, int32_t& Item); // Function Engine.BlueprintSetLibrary.Set_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182640
	int32_t Set_Length(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5182590
	void Set_Intersection(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Intersection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182410
	void Set_Difference(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Difference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182290
	bool Set_Contains(struct TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Function Engine.BlueprintSetLibrary.Set_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x51820d0
	void Set_Clear(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5182030
	void Set_AddItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems); // Function Engine.BlueprintSetLibrary.Set_AddItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5181f20
	void Set_Add(struct TSet<int32_t>& TargetSet, int32_t& NewItem); // Function Engine.BlueprintSetLibrary.Set_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5181d60
};

// Class Engine.BodySetup
// Size: 0x2b0 (Inherited: 0x50)
struct UBodySetup : UBodySetupCore {
	struct FKAggregateGeom AggGeom; // 0x50(0x58)
	char bAlwaysFullAnimWeight : 1; // 0xa8(0x01)
	char bConsiderForBounds : 1; // 0xa8(0x01)
	char bMeshCollideAll : 1; // 0xa8(0x01)
	char bDoubleSidedGeometry : 1; // 0xa8(0x01)
	char bGenerateNonMirroredCollision : 1; // 0xa8(0x01)
	char bSharedCookedData : 1; // 0xa8(0x01)
	char bGenerateMirroredCollision : 1; // 0xa8(0x01)
	char bSupportUVsAndFaceRemap : 1; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct UPhysicalMaterial* PhysMaterial; // 0xb0(0x08)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xb8(0x10)
	char pad_C8[0x68]; // 0xc8(0x68)
	struct FBodyInstance DefaultInstance; // 0x130(0x160)
	char pad_290[0x8]; // 0x290(0x08)
	struct FVector BuildScale3D; // 0x298(0x0c)
	char pad_2A4[0xc]; // 0x2a4(0x0c)
};

// Class Engine.BoneMaskFilter
// Size: 0x40 (Inherited: 0x30)
struct UBoneMaskFilter : UObject {
	struct TArray<struct FInputBlendPose> BlendPoses; // 0x30(0x10)
};

// Class Engine.BookmarkBase
// Size: 0x30 (Inherited: 0x30)
struct UBookmarkBase : UObject {
};

// Class Engine.BookMark
// Size: 0x58 (Inherited: 0x30)
struct UBookMark : UBookmarkBase {
	struct FVector Location; // 0x30(0x0c)
	struct FRotator Rotation; // 0x3c(0x0c)
	struct TArray<struct FString> HiddenLevels; // 0x48(0x10)
};

// Class Engine.BookMark2D
// Size: 0x40 (Inherited: 0x30)
struct UBookMark2D : UBookmarkBase {
	float Zoom2D; // 0x30(0x04)
	struct FIntPoint Location; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.BoundsCopyComponent
// Size: 0x160 (Inherited: 0xe8)
struct UBoundsCopyComponent : UActorComponent {
	struct TSoftObjectPtr<AActor> BoundsSourceActor; // 0xe8(0x30)
	bool bUseCollidingComponentsForSourceBounds; // 0x118(0x01)
	bool bKeepOwnBoundsScale; // 0x119(0x01)
	bool bUseCollidingComponentsForOwnBounds; // 0x11a(0x01)
	char pad_11B[0x5]; // 0x11b(0x05)
	struct FTransform PostTransform; // 0x120(0x30)
	bool bCopyXBounds; // 0x150(0x01)
	bool bCopyYBounds; // 0x151(0x01)
	bool bCopyZBounds; // 0x152(0x01)
	char pad_153[0xd]; // 0x153(0x0d)
};

// Class Engine.ReflectionCapture
// Size: 0x3d8 (Inherited: 0x3d0)
struct AReflectionCapture : AActor {
	struct UReflectionCaptureComponent* CaptureComponent; // 0x3d0(0x08)
};

// Class Engine.BoxReflectionCapture
// Size: 0x3d8 (Inherited: 0x3d8)
struct ABoxReflectionCapture : AReflectionCapture {
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x320 (Inherited: 0x290)
struct UReflectionCaptureComponent : USceneComponent {
	struct UBillboardComponent* CaptureOffsetComponent; // 0x288(0x08)
	enum class EReflectionSourceType ReflectionSourceType; // 0x290(0x01)
	enum class EMobileReflectionCompression MobileReflectionCompression; // 0x291(0x01)
	struct UTextureCube* Cubemap; // 0x298(0x08)
	float SourceCubemapAngle; // 0x2a0(0x04)
	float Brightness; // 0x2a4(0x04)
	bool bModifyMaxValueRGBM; // 0x2a8(0x01)
	char pad_2AB[0x1]; // 0x2ab(0x01)
	float MaxValueRGBM; // 0x2ac(0x04)
	struct FVector CaptureOffset; // 0x2b0(0x0c)
	struct FGuid MapBuildDataId; // 0x2bc(0x10)
	char pad_2CC[0x14]; // 0x2cc(0x14)
	struct UTextureCube* CachedEncodedHDRCubemap; // 0x2e0(0x08)
	char pad_2E8[0x38]; // 0x2e8(0x38)
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x318(0x04)
	struct UBoxComponent* PreviewInfluenceBox; // 0x320(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x328(0x08)
};

// Class Engine.Breakpoint
// Size: 0x48 (Inherited: 0x30)
struct UBreakpoint : UObject {
	char bEnabled : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UEdGraphNode* Node; // 0x38(0x08)
	char bStepOnce : 1; // 0x40(0x01)
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x40(0x01)
	char bStepOnce_RemoveAfterHit : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.BrushBuilder
// Size: 0x88 (Inherited: 0x30)
struct UBrushBuilder : UObject {
	struct FString BitmapFilename; // 0x30(0x10)
	struct FString ToolTip; // 0x40(0x10)
	char NotifyBadParams : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FVector> Vertices; // 0x58(0x10)
	struct TArray<struct FBuilderPoly> Polys; // 0x68(0x10)
	struct FName Layer; // 0x78(0x0c)
	char MergeCoplanars : 1; // 0x84(0x01)
	char pad_84_1 : 7; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
};

// Class Engine.BrushComponent
// Size: 0x560 (Inherited: 0x550)
struct UBrushComponent : UPrimitiveComponent {
	struct UModel* Brush; // 0x548(0x08)
	struct UBodySetup* BrushBodySetup; // 0x550(0x08)
};

// Class Engine.BrushShape
// Size: 0x408 (Inherited: 0x408)
struct ABrushShape : ABrush {
};

// Class Engine.ButtonStyleAsset
// Size: 0x2d8 (Inherited: 0x30)
struct UButtonStyleAsset : UObject {
	struct FButtonStyle ButtonStyle; // 0x30(0x2a8)
};

// Class Engine.CameraAnim
// Size: 0x670 (Inherited: 0x30)
struct UCameraAnim : UObject {
	struct UInterpGroup* CameraInterpGroup; // 0x30(0x08)
	float AnimLength; // 0x38(0x04)
	struct FBox BoundingBox; // 0x3c(0x1c)
	char bRelativeToInitialTransform : 1; // 0x58(0x01)
	char bRelativeToInitialFOV : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float BaseFOV; // 0x5c(0x04)
	struct FPostProcessSettings BasePostProcessSettings; // 0x60(0x600)
	float BasePostProcessBlendWeight; // 0x660(0x04)
	char pad_664[0xc]; // 0x664(0x0c)
};

// Class Engine.CameraAnimInst
// Size: 0x120 (Inherited: 0x30)
struct UCameraAnimInst : UObject {
	struct UCameraAnim* CamAnim; // 0x30(0x08)
	struct UInterpGroupInst* InterpGroupInst; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	float PlayRate; // 0x58(0x04)
	char pad_5C[0x14]; // 0x5c(0x14)
	struct UInterpTrackMove* MoveTrack; // 0x70(0x08)
	struct UInterpTrackInstMove* MoveInst; // 0x78(0x08)
	enum class ECameraShakePlaySpace PlaySpace; // 0x80(0x01)
	char pad_81[0x9f]; // 0x81(0x9f)

	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x5188b30
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale // (Final|Native|Public|BlueprintCallable) // @ game+0x5188a20
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x5188720
};

// Class Engine.CameraBlockingVolume
// Size: 0x408 (Inherited: 0x408)
struct ACameraBlockingVolume : AVolume {
};

// Class Engine.CameraModifier
// Size: 0x50 (Inherited: 0x30)
struct UCameraModifier : UObject {
	char bDebug : 1; // 0x30(0x01)
	char bExclusive : 1; // 0x30(0x01)
	char bEnablePostprocessModification : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	char Priority; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct APlayerCameraManager* CameraOwner; // 0x38(0x08)
	float AlphaInTime; // 0x40(0x04)
	float AlphaOutTime; // 0x44(0x04)
	float Alpha; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)

	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cabfb0
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5188450
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier // (Native|Public|BlueprintCallable) // @ game+0x2be7200
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier // (Native|Public|BlueprintCallable) // @ game+0x5188160
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x33d1d50
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFov); // Function Engine.CameraModifier.BlueprintModifyCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xf0 (Inherited: 0x50)
struct UCameraModifier_CameraShake : UCameraModifier {
	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes; // 0x50(0x10)
	struct TMap<struct UCameraShakeBase*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x60(0x50)
	float SplitScreenShakeScale; // 0xb0(0x04)
	char pad_B4[0xc]; // 0xb4(0x0c)
	struct FTransform LastModification; // 0xc0(0x30)
};

// Class Engine.MatineeCameraShake
// Size: 0x190 (Inherited: 0xb0)
struct UMatineeCameraShake : UCameraShakeBase {
	float OscillationDuration; // 0xa8(0x04)
	float OscillationBlendInTime; // 0xac(0x04)
	float OscillationBlendOutTime; // 0xb0(0x04)
	struct FROscillator RotOscillation; // 0xb4(0x24)
	struct FVOscillator LocOscillation; // 0xd8(0x24)
	struct FFOscillator FOVOscillation; // 0xfc(0x0c)
	float AnimPlayRate; // 0x108(0x04)
	float AnimScale; // 0x10c(0x04)
	float AnimBlendInTime; // 0x110(0x04)
	float AnimBlendOutTime; // 0x114(0x04)
	float RandomAnimSegmentDuration; // 0x118(0x04)
	struct UCameraAnim* Anim; // 0x120(0x08)
	char bRandomAnimSegment : 1; // 0x128(0x01)
	float OscillatorTimeRemaining; // 0x12c(0x04)
	struct UCameraAnimInst* AnimInst; // 0x130(0x08)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x57]; // 0x139(0x57)

	void ReceiveStopShake(bool bImmediately); // Function Engine.MatineeCameraShake.ReceiveStopShake // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceivePlayShake(float Scale); // Function Engine.MatineeCameraShake.ReceivePlayShake // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	bool ReceiveIsFinished(); // Function Engine.MatineeCameraShake.ReceiveIsFinished // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2c58360
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo& POV, struct FMinimalViewInfo& ModifiedPOV); // Function Engine.MatineeCameraShake.BlueprintUpdateCameraShake // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x33d1d50
};

// Class Engine.CameraShakeSourceActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ACameraShakeSourceActor : AActor {
	struct UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x3d0(0x08)
};

// Class Engine.CameraShakeSourceComponent
// Size: 0x2b0 (Inherited: 0x290)
struct UCameraShakeSourceComponent : USceneComponent {
	enum class ECameraShakeAttenuation Attenuation; // 0x288(0x01)
	float InnerAttenuationRadius; // 0x28c(0x04)
	float OuterAttenuationRadius; // 0x290(0x04)
	struct UCameraShakeBase* CameraShake; // 0x298(0x08)
	bool bAutoStart; // 0x2a0(0x01)
	char pad_2A2[0xe]; // 0x2a2(0x0e)

	void StopAllCameraShakesOfType(struct UCameraShakeBase* InCameraShake, bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x5190640
	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // @ game+0x51905b0
	void StartCameraShake(struct UCameraShakeBase* InCameraShake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.CameraShakeSourceComponent.StartCameraShake // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5190430
	void Start(); // Function Engine.CameraShakeSourceComponent.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x5190410
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x518e8c0
};

// Class Engine.Canvas
// Size: 0x2d0 (Inherited: 0x30)
struct UCanvas : UObject {
	float OrgX; // 0x30(0x04)
	float OrgY; // 0x34(0x04)
	float ClipX; // 0x38(0x04)
	float ClipY; // 0x3c(0x04)
	struct FColor DrawColor; // 0x40(0x04)
	char bCenterX : 1; // 0x44(0x01)
	char bCenterY : 1; // 0x44(0x01)
	char bNoSmooth : 1; // 0x44(0x01)
	char pad_44_3 : 5; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	struct FPlane ColorModulate; // 0x50(0x10)
	struct UTexture2D* DefaultTexture; // 0x60(0x08)
	struct UTexture2D* GradientTexture0; // 0x68(0x08)
	struct UReporterGraph* ReporterGraph; // 0x70(0x08)
	char pad_78[0x258]; // 0x78(0x258)

	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51902c0
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51901c0
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5190110
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x518ffd0
	void K2_DrawTransparentLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawTransparentLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518fe70
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518fbc0
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518f7e0
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518f630
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x518f4f0
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518f2b0
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518f150
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518eff0
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x518eb60
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x518ea40
};

// Class Engine.TextureRenderTarget
// Size: 0xf8 (Inherited: 0xf0)
struct UTextureRenderTarget : UTexture {
	float TargetGamma; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Engine.TextureRenderTarget2D
// Size: 0x120 (Inherited: 0xf8)
struct UTextureRenderTarget2D : UTextureRenderTarget {
	int32_t SizeX; // 0xf8(0x04)
	int32_t SizeY; // 0xfc(0x04)
	struct FLinearColor ClearColor; // 0x100(0x10)
	enum class TextureAddress AddressX; // 0x110(0x01)
	enum class TextureAddress AddressY; // 0x111(0x01)
	char bForceLinearGamma : 1; // 0x112(0x01)
	char bHDR : 1; // 0x112(0x01)
	char bGPUSharedFlag : 1; // 0x112(0x01)
	char pad_112_3 : 5; // 0x112(0x01)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0x113(0x01)
	char bAutoGenerateMips : 1; // 0x114(0x01)
	char pad_114_1 : 7; // 0x114(0x01)
	enum class TextureFilter MipsSamplerFilter; // 0x115(0x01)
	enum class TextureAddress MipsAddressU; // 0x116(0x01)
	enum class TextureAddress MipsAddressV; // 0x117(0x01)
	enum class EPixelFormat OverrideFormat; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x140 (Inherited: 0x120)
struct UCanvasRenderTarget2D : UTextureRenderTarget2D {
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0x120(0x10)
	struct TWeakObjectPtr<struct UWorld> World; // 0x130(0x08)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // @ game+0x2bc6fd0
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x518e960
	struct UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, struct UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x518e780
};

// Class Engine.CapsuleComponent
// Size: 0x570 (Inherited: 0x560)
struct UCapsuleComponent : UShapeComponent {
	float CapsuleHalfHeight; // 0x560(0x04)
	float CapsuleRadius; // 0x564(0x04)
	char pad_568[0x8]; // 0x568(0x08)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x5199dc0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x5199ce0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x5199c00
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198e00
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198d10
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198cf0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198cc0
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198ca0
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198c60
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198b40
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198a30
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51989f0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51989a0
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5198970
};

// Class Engine.CharacterCapsuleComponent
// Size: 0x570 (Inherited: 0x570)
struct UCharacterCapsuleComponent : UCapsuleComponent {
};

// Class Engine.CheckBoxStyleAsset
// Size: 0x610 (Inherited: 0x30)
struct UCheckBoxStyleAsset : UObject {
	struct FCheckBoxStyle CheckBoxStyle; // 0x30(0x5e0)
};

// Class Engine.ChildActorComponent
// Size: 0x2d0 (Inherited: 0x290)
struct UChildActorComponent : USceneComponent {
	struct AActor* ChildActorClass; // 0x288(0x08)
	struct AActor* ChildActor; // 0x290(0x08)
	struct AActor* ChildActorTemplate; // 0x298(0x08)
	char pad_2A8[0x28]; // 0x2a8(0x28)

	void SetChildActorClass(struct AActor* InClass); // Function Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // @ game+0x51a1360
};

// Class Engine.ChildConnection
// Size: 0x1b48 (Inherited: 0x1b40)
struct UChildConnection : UNetConnection {
	struct UNetConnection* Parent; // 0x1b40(0x08)
};

// Class Engine.PlatformInterfaceBase
// Size: 0x40 (Inherited: 0x30)
struct UPlatformInterfaceBase : UObject {
	struct TArray<struct FDelegateArray> AllDelegates; // 0x30(0x10)
};

// Class Engine.CloudStorageBase
// Size: 0x58 (Inherited: 0x40)
struct UCloudStorageBase : UPlatformInterfaceBase {
	struct TArray<struct FString> LocalCloudFiles; // 0x40(0x10)
	char bSuppressDelegateCalls : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.CollisionProfile
// Size: 0x180 (Inherited: 0x48)
struct UCollisionProfile : UDeveloperSettings {
	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x48(0x10)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x58(0x10)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x68(0x10)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x78(0x10)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x88(0x10)
	char pad_98[0xe8]; // 0x98(0xe8)
};

// Class Engine.Commandlet
// Size: 0x88 (Inherited: 0x30)
struct UCommandlet : UObject {
	struct FString HelpDescription; // 0x30(0x10)
	struct FString HelpUsage; // 0x40(0x10)
	struct FString HelpWebLink; // 0x50(0x10)
	struct TArray<struct FString> HelpParamNames; // 0x60(0x10)
	struct TArray<struct FString> HelpParamDescriptions; // 0x70(0x10)
	char IsServer : 1; // 0x80(0x01)
	char IsClient : 1; // 0x80(0x01)
	char IsEditor : 1; // 0x80(0x01)
	char LogToConsole : 1; // 0x80(0x01)
	char ShowErrorCount : 1; // 0x80(0x01)
	char ShowProgress : 1; // 0x80(0x01)
	char pad_80_6 : 2; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ComponentDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UComponentDelegateBinding : UDynamicBlueprintBinding {
	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x30(0x10)
};

// Class Engine.ActorComponentInstanceDataTransientOuter
// Size: 0x30 (Inherited: 0x30)
struct UActorComponentInstanceDataTransientOuter : UObject {
};

// Class Engine.CurveTable
// Size: 0xa8 (Inherited: 0x30)
struct UCurveTable : UObject {
	char pad_30[0x78]; // 0x30(0x78)
};

// Class Engine.CompositeCurveTable
// Size: 0xd0 (Inherited: 0xa8)
struct UCompositeCurveTable : UCurveTable {
	struct TArray<struct UCurveTable*> ParentTables; // 0xa8(0x10)
	struct TArray<struct UCurveTable*> OldParentTables; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class Engine.DataTable
// Size: 0xb8 (Inherited: 0x30)
struct UDataTable : UObject {
	struct UScriptStruct* RowStruct; // 0x30(0x08)
	char pad_38[0x50]; // 0x38(0x50)
	char bStripFromClientBuilds : 1; // 0x88(0x01)
	char bIgnoreExtraFields : 1; // 0x88(0x01)
	char bIgnoreMissingFields : 1; // 0x88(0x01)
	char pad_88_3 : 5; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FString ImportKeyField; // 0x90(0x10)
	char pad_A0[0x18]; // 0xa0(0x18)
};

// Class Engine.CompositeDataTable
// Size: 0xe0 (Inherited: 0xb8)
struct UCompositeDataTable : UDataTable {
	struct TArray<struct UDataTable*> ParentTables; // 0xb8(0x10)
	struct TArray<struct UDataTable*> OldParentTables; // 0xc8(0x10)
	char pad_D8[0x8]; // 0xd8(0x08)
};

// Class Engine.Console
// Size: 0x150 (Inherited: 0x30)
struct UConsole : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct ULocalPlayer* ConsoleTargetPlayer; // 0x40(0x08)
	struct UTexture2D* DefaultTexture_Black; // 0x48(0x08)
	struct UTexture2D* DefaultTexture_White; // 0x50(0x08)
	char pad_58[0x18]; // 0x58(0x18)
	struct TArray<struct FString> HistoryBuffer; // 0x70(0x10)
	char pad_80[0xd0]; // 0x80(0xd0)
};

// Class Engine.ContentVersioningSettings
// Size: 0x80 (Inherited: 0x48)
struct UContentVersioningSettings : UDeveloperSettings {
	bool bAutoCreationForLayerAssets; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct FContentVersionDef> ContentVersionDefs; // 0x50(0x10)
	struct FString ActiveContentVersion; // 0x60(0x10)
	struct FString ActiveLayer; // 0x70(0x10)
};

// Class Engine.ControlChannel
// Size: 0x90 (Inherited: 0x78)
struct UControlChannel : UChannel {
	char pad_78[0x18]; // 0x78(0x18)
};

// Class Engine.StreamingSettings
// Size: 0x80 (Inherited: 0x48)
struct UStreamingSettings : UDeveloperSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x48(0x01)
	char WarnIfTimeLimitExceeded : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float TimeLimitExceededMultiplier; // 0x4c(0x04)
	float TimeLimitExceededMinTime; // 0x50(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x54(0x04)
	char UseBackgroundLevelStreaming : 1; // 0x58(0x01)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float AsyncLoadingTimeLimit; // 0x5c(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x60(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x64(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x68(0x04)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x6c(0x04)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x70(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x74(0x04)
	char FlushStreamingOnExit : 1; // 0x78(0x01)
	char EventDrivenLoaderEnabled : 1; // 0x78(0x01)
	char pad_78_2 : 6; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.GarbageCollectionSettings
// Size: 0x68 (Inherited: 0x48)
struct UGarbageCollectionSettings : UDeveloperSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x48(0x04)
	char FlushStreamingOnGC : 1; // 0x4c(0x01)
	char AllowParallelGC : 1; // 0x4c(0x01)
	char IncrementalBeginDestroyEnabled : 1; // 0x4c(0x01)
	char MultithreadedDestructionEnabled : 1; // 0x4c(0x01)
	char CreateGCClusters : 1; // 0x4c(0x01)
	char AssetClusteringEnabled : 1; // 0x4c(0x01)
	char ActorClusteringEnabled : 1; // 0x4c(0x01)
	char BlueprintClusteringEnabled : 1; // 0x4c(0x01)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x4d(0x01)
	char pad_4D_1 : 7; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	int32_t MinGCClusterSize; // 0x50(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x54(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x58(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x5c(0x04)
	int32_t MaxObjectsInGame; // 0x60(0x04)
	int32_t MaxObjectsInEditor; // 0x64(0x04)
};

// Class Engine.CullDistanceVolume
// Size: 0x420 (Inherited: 0x408)
struct ACullDistanceVolume : AVolume {
	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x408(0x10)
	char bEnabled : 1; // 0x418(0x01)
	char pad_418_1 : 7; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
};

// Class Engine.CurveBase
// Size: 0x38 (Inherited: 0x30)
struct UCurveBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x51ade70
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x51add90
};

// Class Engine.CurveEdPresetCurve
// Size: 0x30 (Inherited: 0x30)
struct UCurveEdPresetCurve : UObject {
};

// Class Engine.CurveFloat
// Size: 0xc0 (Inherited: 0x38)
struct UCurveFloat : UCurveBase {
	struct FRichCurve FloatCurve; // 0x38(0x80)
	bool bIsEventCurve; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51adc40
};

// Class Engine.CurveLinearColor
// Size: 0x258 (Inherited: 0x38)
struct UCurveLinearColor : UCurveBase {
	struct FRichCurve FloatCurves[0x4]; // 0x38(0x200)
	float AdjustHue; // 0x238(0x04)
	float AdjustSaturation; // 0x23c(0x04)
	float AdjustBrightness; // 0x240(0x04)
	float AdjustBrightnessCurve; // 0x244(0x04)
	float AdjustVibrance; // 0x248(0x04)
	float AdjustMinAlpha; // 0x24c(0x04)
	float AdjustMaxAlpha; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)

	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51adce0
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51ad3d0
};

// Class Engine.Texture2D
// Size: 0x118 (Inherited: 0xf0)
struct UTexture2D : UTexture {
	int32_t LevelIndex; // 0xf0(0x04)
	int32_t FirstResourceMemMip; // 0xf4(0x04)
	char bTemporarilyDisableStreaming : 1; // 0xf8(0x01)
	char pad_F8_1 : 7; // 0xf8(0x01)
	enum class TextureAddress AddressX; // 0xf9(0x01)
	enum class TextureAddress AddressY; // 0xfa(0x01)
	char pad_FB[0x1]; // 0xfb(0x01)
	struct FIntPoint ImportedSize; // 0xfc(0x08)
	char pad_104[0x14]; // 0x104(0x14)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a580
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a550
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x130 (Inherited: 0x118)
struct UCurveLinearColorAtlas : UTexture2D {
	uint32_t TextureSize; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct UCurveLinearColor*> GradientCurves; // 0x120(0x10)

	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x51ad480
};

// Class Engine.CurveSourceInterface
// Size: 0x30 (Inherited: 0x30)
struct UCurveSourceInterface : UInterface {

	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x51ad560
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x51ad620
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d0d740
};

// Class Engine.CurveVector
// Size: 0x1b8 (Inherited: 0x38)
struct UCurveVector : UCurveBase {
	struct FRichCurve FloatCurves[0x3]; // 0x38(0x180)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x51adf50
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UDataTableFunctionLibrary : UBlueprintFunctionLibrary {

	void GetDataTableRowNames(struct UDataTable* Table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x51adb50
	bool GetDataTableRowFromName(struct UDataTable* Table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x51ad870
	struct TArray<struct FString> GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51ad6e0
	void EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x51ad1a0
	bool DoesDataTableRowExist(struct UDataTable* Table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51ad0c0
};

// Class Engine.DebugCameraController
// Size: 0x848 (Inherited: 0x738)
struct ADebugCameraController : APlayerController {
	char bShowSelectedInfo : 1; // 0x738(0x01)
	char bIsFrozenRendering : 1; // 0x738(0x01)
	char bIsOrbitingSelectedActor : 1; // 0x738(0x01)
	char bOrbitPivotUseCenter : 1; // 0x738(0x01)
	char bEnableBufferVisualization : 1; // 0x738(0x01)
	char bEnableBufferVisualizationFullMode : 1; // 0x738(0x01)
	char bIsBufferVisualizationInputSetup : 1; // 0x738(0x01)
	char bLastDisplayEnabled : 1; // 0x738(0x01)
	char pad_739[0x7]; // 0x739(0x07)
	struct UDrawFrustumComponent* DrawFrustum; // 0x740(0x08)
	struct AActor* SelectedActor; // 0x748(0x08)
	struct UPrimitiveComponent* SelectedComponent; // 0x750(0x08)
	struct FHitResult SelectedHitPoint; // 0x758(0x94)
	char pad_7EC[0x4]; // 0x7ec(0x04)
	struct APlayerController* OriginalControllerRef; // 0x7f0(0x08)
	struct UPlayer* OriginalPlayer; // 0x7f8(0x08)
	float SpeedScale; // 0x800(0x04)
	float InitialMaxSpeed; // 0x804(0x04)
	float InitialAccel; // 0x808(0x04)
	float InitialDecel; // 0x80c(0x04)
	char pad_810[0x38]; // 0x810(0x38)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5640
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo // (Exec|Native|Public) // @ game+0x51b5610
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5500
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98350
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x58 (Inherited: 0x48)
struct UDebugCameraControllerSettings : UDeveloperSettings {
	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x48(0x10)
};

// Class Engine.DebugCameraHUD
// Size: 0x4d0 (Inherited: 0x4d0)
struct ADebugCameraHUD : AHUD {
};

// Class Engine.DebugDrawService
// Size: 0x30 (Inherited: 0x30)
struct UDebugDrawService : UBlueprintFunctionLibrary {
};

// Class Engine.DecalActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ADecalActor : AActor {
	struct UDecalComponent* Decal; // 0x3d0(0x08)

	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5170
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4e40
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x51b4dc0
};

// Class Engine.DecalComponent
// Size: 0x2f0 (Inherited: 0x290)
struct UDecalComponent : USceneComponent {
	struct UMaterialInterface* DecalMaterial; // 0x288(0x08)
	int32_t SortOrder; // 0x290(0x04)
	float FadeScreenSize; // 0x294(0x04)
	float FadeStartDelay; // 0x298(0x04)
	float FadeDuration; // 0x29c(0x04)
	float FadeInDuration; // 0x2a0(0x04)
	float FadeInStartDelay; // 0x2a4(0x04)
	char bDestroyOwnerAfterFade : 1; // 0x2a8(0x01)
	struct FVector DecalSize; // 0x2ac(0x0c)
	enum class EDecalLightColorType LightColorType; // 0x2b8(0x01)
	char bOverrideIntensity : 1; // 0x2bc(0x01)
	char pad_2BD_2 : 6; // 0x2bd(0x01)
	char pad_2BE[0x2]; // 0x2be(0x02)
	float LightIntensityOverride; // 0x2c0(0x04)
	char bOverrideColor : 1; // 0x2c4(0x01)
	char pad_2C4_1 : 7; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	struct FColor LightColorOverride; // 0x2c8(0x04)
	bool bAllowCullingWhenFacingCamera; // 0x2cc(0x01)
	bool bEnableAlphaWrite; // 0x2cd(0x01)
	char pad_2CE[0x2]; // 0x2ce(0x02)
	float CachedVertexFogIntensityFromVolumes; // 0x2d0(0x04)
	int32_t VisibilityId; // 0x2d4(0x04)
	char pad_2D8[0x18]; // 0x2d8(0x18)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5580
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5480
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5360
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5290
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x51b5200
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4f00
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4ed0
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4ea0
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51b4e70
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7cee0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x51b4e00
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x418 (Inherited: 0x418)
struct ADefaultPhysicsVolume : APhysicsVolume {
};

// Class Engine.DeletedObject
// Size: 0x30 (Inherited: 0x30)
struct UDeletedObject : UObject {
};

// Class Engine.DemoNetConnection
// Size: 0x1bb0 (Inherited: 0x1b40)
struct UDemoNetConnection : UNetConnection {
	char pad_1B40[0x70]; // 0x1b40(0x70)
};

// Class Engine.DemoNetDriver
// Size: 0x1368 (Inherited: 0x7e0)
struct UDemoNetDriver : UNetDriver {
	char pad_7E0[0xf8]; // 0x7e0(0xf8)
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x8d8(0x50)
	char pad_928[0x15c]; // 0x928(0x15c)
	float CheckpointSaveMaxMSPerFrame; // 0xa84(0x04)
	char pad_A88[0x20]; // 0xa88(0x20)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0xaa8(0x10)
	bool bIsLocalReplay; // 0xab8(0x01)
	char pad_AB9[0x7]; // 0xab9(0x07)
	struct TArray<struct APlayerController*> SpectatorControllers; // 0xac0(0x10)
	char pad_AD0[0x898]; // 0xad0(0x898)
};

// Class Engine.PendingNetGame
// Size: 0xc8 (Inherited: 0x30)
struct UPendingNetGame : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UNetDriver* NetDriver; // 0x38(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x40(0x08)
	char pad_48[0x80]; // 0x48(0x80)
};

// Class Engine.DemoPendingNetGame
// Size: 0xc8 (Inherited: 0xc8)
struct UDemoPendingNetGame : UPendingNetGame {
};

// Class Engine.DestructibleInterface
// Size: 0x30 (Inherited: 0x30)
struct UDestructibleInterface : UInterface {
};

// Class Engine.TextureLODSettings
// Size: 0x40 (Inherited: 0x30)
struct UTextureLODSettings : UObject {
	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x30(0x10)
};

// Class Engine.DeviceProfile
// Size: 0xb0 (Inherited: 0x40)
struct UDeviceProfile : UTextureLODSettings {
	struct FString DeviceType; // 0x40(0x10)
	struct FString BaseProfileName; // 0x50(0x10)
	struct UObject* Parent; // 0x60(0x08)
	char pad_68[0x28]; // 0x68(0x28)
	struct TArray<struct FString> CVars; // 0x90(0x10)
	char pad_A0[0x10]; // 0xa0(0x10)
};

// Class Engine.DeviceProfileFragment
// Size: 0x40 (Inherited: 0x30)
struct UDeviceProfileFragment : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.DeviceProfileManager
// Size: 0xb8 (Inherited: 0x30)
struct UDeviceProfileManager : UObject {
	struct TArray<struct UObject*> Profiles; // 0x30(0x10)
	char pad_40[0x78]; // 0x40(0x78)
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x1d8 (Inherited: 0x1c0)
struct UDialogueSoundWaveProxy : USoundBase {
	char pad_1C0[0x18]; // 0x1c0(0x18)
};

// Class Engine.DialogueVoice
// Size: 0x48 (Inherited: 0x30)
struct UDialogueVoice : UObject {
	enum class EGrammaticalGender Gender; // 0x30(0x01)
	enum class EGrammaticalNumber Plurality; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	struct FGuid LocalizationGUID; // 0x34(0x10)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.DialogueWave
// Size: 0x78 (Inherited: 0x30)
struct UDialogueWave : UObject {
	char bMature : 1; // 0x30(0x01)
	char bOverride_SubtitleOverride : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FString SpokenText; // 0x38(0x10)
	struct FString SubtitleOverride; // 0x48(0x10)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x58(0x10)
	struct FGuid LocalizationGUID; // 0x68(0x10)
};

// Class Engine.Light
// Size: 0x3e0 (Inherited: 0x3d0)
struct ALight : AActor {
	struct ULightComponent* LightComponent; // 0x3d0(0x08)
	char bEnabled : 1; // 0x3d8(0x01)
	char pad_3D8_1 : 7; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4af0
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52e43e0
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x52e42c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x52e41c0
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52e3fd0
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3b80
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3870
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x52e37f0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x52e34d0
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled // (Native|Public) // @ game+0x2beff70
	bool IsEnabled(); // Function Engine.Light.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2da0
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2d00
	float GetBrightness(); // Function Engine.Light.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2c70
};

// Class Engine.DirectionalLight
// Size: 0x3e0 (Inherited: 0x3e0)
struct ADirectionalLight : ALight {
};

// Class Engine.LightComponentBase
// Size: 0x2d0 (Inherited: 0x290)
struct ULightComponentBase : USceneComponent {
	struct FGuid LightGuid; // 0x288(0x10)
	float Brightness; // 0x298(0x04)
	float Intensity; // 0x29c(0x04)
	struct FColor LightColor; // 0x2a0(0x04)
	char bAffectsWorld : 1; // 0x2a4(0x01)
	char CastShadows : 1; // 0x2a4(0x01)
	char CastStaticShadows : 1; // 0x2a4(0x01)
	char CastDynamicShadows : 1; // 0x2a4(0x01)
	char bAffectTranslucentLighting : 1; // 0x2a4(0x01)
	char bTransmission : 1; // 0x2a4(0x01)
	char bCastVolumetricShadow : 1; // 0x2a4(0x01)
	char bCastDeepShadow : 1; // 0x2a4(0x01)
	char bCastRaytracedShadow : 1; // 0x2a5(0x01)
	char bAffectReflection : 1; // 0x2a5(0x01)
	char bAffectGlobalIllumination : 1; // 0x2a5(0x01)
	float DeepShadowLayerDistribution; // 0x2a8(0x04)
	float IndirectLightingIntensity; // 0x2ac(0x04)
	float VolumetricScatteringIntensity; // 0x2b0(0x04)
	int32_t SamplesPerPixel; // 0x2b4(0x04)
	bool bLightProbeIntensityOverride; // 0x2b8(0x01)
	bool bLightProbeColorOverride; // 0x2b9(0x01)
	bool bLightProbeIndirectIntensityOverride; // 0x2ba(0x01)
	float LightProbeIntensity; // 0x2bc(0x04)
	struct FColor LightProbeColor; // 0x2c0(0x04)
	float LightProbeIndirectIntensity; // 0x2c4(0x04)
	char pad_2CC_3 : 5; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // @ game+0x52eb260
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x52eb150
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x52eb0c0
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x52eb030
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x52eafa0
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x52eae90
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination // (Final|Native|Public|BlueprintCallable) // @ game+0x52eae00
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x52eacb0
};

// Class Engine.LightComponent
// Size: 0x3d0 (Inherited: 0x2d0)
struct ULightComponent : ULightComponentBase {
	float Temperature; // 0x2c8(0x04)
	float MaxDrawDistance; // 0x2cc(0x04)
	float MaxDistanceFadeRange; // 0x2d0(0x04)
	char bUseTemperature : 1; // 0x2d4(0x01)
	int32_t ShadowMapChannel; // 0x2d8(0x04)
	float MinRoughness; // 0x2e0(0x04)
	float SpecularScale; // 0x2e4(0x04)
	float ShadowResolutionScale; // 0x2e8(0x04)
	float ShadowBias; // 0x2ec(0x04)
	float ShadowSlopeBias; // 0x2f0(0x04)
	float ShadowSharpen; // 0x2f4(0x04)
	float ContactShadowLength; // 0x2f8(0x04)
	char ContactShadowLengthInWS : 1; // 0x2fc(0x01)
	char InverseSquaredFalloff : 1; // 0x2fc(0x01)
	char CastTranslucentShadows : 1; // 0x2fc(0x01)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x2fc(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2fc(0x01)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x2fc(0x01)
	char pad_2FC_7 : 1; // 0x2fc(0x01)
	char pad_2FD[0x3]; // 0x2fd(0x03)
	struct FLightingChannels LightingChannels; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
	struct UMaterialInterface* LightFunctionMaterial; // 0x308(0x08)
	struct FVector LightFunctionScale; // 0x310(0x0c)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct UTextureLightProfile* IESTexture; // 0x320(0x08)
	char bUseIESBrightness : 1; // 0x328(0x01)
	char pad_328_1 : 7; // 0x328(0x01)
	char pad_329[0x3]; // 0x329(0x03)
	float IESBrightnessScale; // 0x32c(0x04)
	float LightFunctionFadeDistance; // 0x330(0x04)
	float DisabledBrightness; // 0x334(0x04)
	char bEnableLightShaftBloom : 1; // 0x338(0x01)
	char pad_338_1 : 7; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	float BloomScale; // 0x33c(0x04)
	float BloomThreshold; // 0x340(0x04)
	float BloomMaxBrightness; // 0x344(0x04)
	struct FColor BloomTint; // 0x348(0x04)
	bool bUseRayTracedDistanceFieldShadows; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)
	float RayStartOffsetDepthScale; // 0x350(0x04)
	char pad_354[0x7c]; // 0x354(0x7c)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4a70
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x52e49e0
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4950
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x52e48d0
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4850
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4740
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x52e46c0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4500
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52e4470
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4350
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4240
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4140
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52e4060
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3e30
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3db0
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3d20
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3ca0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3c10
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3af0
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x52e3770
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x52e36f0
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3670
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x52e35f0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3560
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3440
};

// Class Engine.DirectionalLightComponent
// Size: 0x490 (Inherited: 0x3d0)
struct UDirectionalLightComponent : ULightComponent {
	float ShadowCascadeBiasDistribution; // 0x3c8(0x04)
	char bEnableLightShaftOcclusion : 1; // 0x3cc(0x01)
	float OcclusionMaskDarkness; // 0x3d0(0x04)
	float OcclusionDepthRange; // 0x3d4(0x04)
	struct FVector LightShaftOverrideDirection; // 0x3d8(0x0c)
	float WholeSceneDynamicShadowRadius; // 0x3e4(0x04)
	float DynamicShadowDistanceMovableLight; // 0x3e8(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x3ec(0x04)
	int32_t DynamicShadowCascades; // 0x3f0(0x04)
	float CascadeDistributionExponent; // 0x3f4(0x04)
	float CascadeTransitionFraction; // 0x3f8(0x04)
	float ShadowDistanceFadeoutFraction; // 0x3fc(0x04)
	char bUseInsetShadowsForMovableObjects : 1; // 0x400(0x01)
	int32_t FarShadowCascadeCount; // 0x404(0x04)
	float FarShadowDistance; // 0x408(0x04)
	float DistanceFieldShadowDistance; // 0x40c(0x04)
	float LightSourceAngle; // 0x410(0x04)
	float LightSourceSoftAngle; // 0x414(0x04)
	float ShadowSourceAngleFactor; // 0x418(0x04)
	float TraceDistance; // 0x41c(0x04)
	char bUsedAsAtmosphereSunLight : 1; // 0x420(0x01)
	char pad_420_3 : 5; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	int32_t AtmosphereSunLightIndex; // 0x424(0x04)
	struct FLinearColor AtmosphereSunDiskColorScale; // 0x428(0x10)
	char bPerPixelAtmosphereTransmittance : 1; // 0x438(0x01)
	char bCastShadowsOnClouds : 1; // 0x438(0x01)
	char bCastShadowsOnAtmosphere : 1; // 0x438(0x01)
	char bCastCloudShadows : 1; // 0x438(0x01)
	char pad_438_4 : 4; // 0x438(0x01)
	char pad_439[0x3]; // 0x439(0x03)
	float CloudShadowStrength; // 0x43c(0x04)
	float CloudShadowOnAtmosphereStrength; // 0x440(0x04)
	float CloudShadowOnSurfaceStrength; // 0x444(0x04)
	float CloudShadowDepthBias; // 0x448(0x04)
	float CloudShadowExtent; // 0x44c(0x04)
	float CloudShadowMapResolutionScale; // 0x450(0x04)
	float CloudShadowRaySampleCountScale; // 0x454(0x04)
	struct FLinearColor CloudScatteredLuminanceScale; // 0x458(0x10)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x468(0x10)
	char bCastModulatedShadows : 1; // 0x478(0x01)
	char pad_478_1 : 7; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	struct FColor ModulatedShadowColor; // 0x47c(0x04)
	float ShadowAmount; // 0x480(0x04)
	char pad_484[0xc]; // 0x484(0x0c)

	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb640
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb5c0
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb540
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51bb4b0
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb420
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb3a0
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb320
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb290
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb210
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb190
	void SetAtmosphereSunLightIndex(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb100
	void SetAtmosphereSunLight(bool bNewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLight // (Final|Native|Public|BlueprintCallable) // @ game+0x51bb070
};

// Class Engine.Distribution
// Size: 0x38 (Inherited: 0x30)
struct UDistribution : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Engine.DistributionFloat
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloat : UDistribution {
	char bCanBeBaked : 1; // 0x38(0x01)
	char pad_38_1 : 1; // 0x38(0x01)
	char bBakedDataSuccesfully : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.DistributionFloatConstant
// Size: 0x48 (Inherited: 0x40)
struct UDistributionFloatConstant : UDistributionFloat {
	float Constant; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x58 (Inherited: 0x40)
struct UDistributionFloatConstantCurve : UDistributionFloat {
	struct FInterpCurveFloat ConstantCurve; // 0x40(0x18)
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x68 (Inherited: 0x48)
struct UDistributionFloatParameterBase : UDistributionFloatConstant {
	struct FName ParameterName; // 0x48(0x0c)
	float MinInput; // 0x54(0x04)
	float MaxInput; // 0x58(0x04)
	float MinOutput; // 0x5c(0x04)
	float MaxOutput; // 0x60(0x04)
	enum class DistributionParamMode ParamMode; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x68 (Inherited: 0x68)
struct UDistributionFloatParticleParameter : UDistributionFloatParameterBase {
};

// Class Engine.DistributionFloatUniform
// Size: 0x48 (Inherited: 0x40)
struct UDistributionFloatUniform : UDistributionFloat {
	float Min; // 0x40(0x04)
	float Max; // 0x44(0x04)
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x58 (Inherited: 0x40)
struct UDistributionFloatUniformCurve : UDistributionFloat {
	struct FInterpCurveVector2D ConstantCurve; // 0x40(0x18)
};

// Class Engine.DistributionVector
// Size: 0x40 (Inherited: 0x38)
struct UDistributionVector : UDistribution {
	char bCanBeBaked : 1; // 0x38(0x01)
	char bIsDirty : 1; // 0x38(0x01)
	char bBakedDataSuccesfully : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.DistributionVectorConstant
// Size: 0x58 (Inherited: 0x40)
struct UDistributionVectorConstant : UDistributionVector {
	struct FVector Constant; // 0x40(0x0c)
	char bLockAxes : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x60 (Inherited: 0x40)
struct UDistributionVectorConstantCurve : UDistributionVector {
	struct FInterpCurveVector ConstantCurve; // 0x40(0x18)
	char bLockAxes : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.DistributionVectorParameterBase
// Size: 0x98 (Inherited: 0x58)
struct UDistributionVectorParameterBase : UDistributionVectorConstant {
	struct FName ParameterName; // 0x58(0x0c)
	struct FVector MinInput; // 0x64(0x0c)
	struct FVector MaxInput; // 0x70(0x0c)
	struct FVector MinOutput; // 0x7c(0x0c)
	struct FVector MaxOutput; // 0x88(0x0c)
	enum class DistributionParamMode ParamModes[0x3]; // 0x94(0x03)
	char pad_97[0x1]; // 0x97(0x01)
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0x98 (Inherited: 0x98)
struct UDistributionVectorParticleParameter : UDistributionVectorParameterBase {
};

// Class Engine.DistributionVectorUniform
// Size: 0x68 (Inherited: 0x40)
struct UDistributionVectorUniform : UDistributionVector {
	struct FVector Max; // 0x40(0x0c)
	struct FVector Min; // 0x4c(0x0c)
	char bLockAxes : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x5c(0x01)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x5d(0x03)
	char bUseExtremes : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x68 (Inherited: 0x40)
struct UDistributionVectorUniformCurve : UDistributionVector {
	struct FInterpCurveTwoVectors ConstantCurve; // 0x40(0x18)
	char bLockAxes1 : 1; // 0x58(0x01)
	char bLockAxes2 : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x5c(0x02)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x5e(0x03)
	char pad_61[0x3]; // 0x61(0x03)
	char bUseExtremes : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.DocumentationActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ADocumentationActor : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
};

// Class Engine.DrawFrustumComponent
// Size: 0x570 (Inherited: 0x550)
struct UDrawFrustumComponent : UPrimitiveComponent {
	struct FColor FrustumColor; // 0x548(0x04)
	float FrustumAngle; // 0x54c(0x04)
	float FrustumAspectRatio; // 0x550(0x04)
	float FrustumStartDist; // 0x554(0x04)
	float FrustumEndDist; // 0x558(0x04)
	struct UTexture* Texture; // 0x560(0x08)
	char pad_56C[0x4]; // 0x56c(0x04)
};

// Class Engine.DrawSphereComponent
// Size: 0x570 (Inherited: 0x570)
struct UDrawSphereComponent : USphereComponent {
};

// Class Engine.DynamicBlockingComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UDynamicBlockingComponent : UActorComponent {
	struct TArray<struct TWeakObjectPtr<struct AActor>> ActiveDynamicBlockers; // 0xe8(0x10)

	struct TArray<struct AActor*> GetActiveDynamicBlockers(); // Function Engine.DynamicBlockingComponent.GetActiveDynamicBlockers // (Final|Native|Public|BlueprintCallable) // @ game+0x51bafe0
	void AuthRemoveDynamicBlocker(struct AActor* Blocker); // Function Engine.DynamicBlockingComponent.AuthRemoveDynamicBlocker // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2b329d0
	void AuthAddDynamicBlocker(struct AActor* Blocker, bool bCrushIfCurrentlyBlocking); // Function Engine.DynamicBlockingComponent.AuthAddDynamicBlocker // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2bf7ff0
};

// Class Engine.EdGraph
// Size: 0x68 (Inherited: 0x30)
struct UEdGraph : UObject {
	struct UEdGraphSchema* schema; // 0x30(0x08)
	struct TArray<struct UEdGraphNode*> Nodes; // 0x38(0x10)
	char bEditable : 1; // 0x48(0x01)
	char bAllowDeletion : 1; // 0x48(0x01)
	char bAllowRenaming : 1; // 0x48(0x01)
	char pad_48_3 : 5; // 0x48(0x01)
	char pad_49[0x1f]; // 0x49(0x1f)
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x58 (Inherited: 0x30)
struct UGraphNodeContextMenuContext : UObject {
	struct UBlueprint* Blueprint; // 0x30(0x08)
	struct UEdGraph* Graph; // 0x38(0x08)
	struct UEdGraphNode* Node; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
	bool bIsDebugging; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.EdGraphNode
// Size: 0xa0 (Inherited: 0x30)
struct UEdGraphNode : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins; // 0x40(0x10)
	int32_t NodePosX; // 0x50(0x04)
	int32_t NodePosY; // 0x54(0x04)
	int32_t NodeWidth; // 0x58(0x04)
	int32_t NodeHeight; // 0x5c(0x04)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x60(0x01)
	enum class ENodeEnabledState EnabledState; // 0x61(0x01)
	char pad_62[0x1]; // 0x62(0x01)
	char pad_63_0 : 1; // 0x63(0x01)
	char bDisplayAsDisabled : 1; // 0x63(0x01)
	char bUserSetEnabledState : 1; // 0x63(0x01)
	char pad_63_3 : 1; // 0x63(0x01)
	char bIsNodeEnabled : 1; // 0x63(0x01)
	char pad_63_5 : 1; // 0x63(0x01)
	char bHasCompilerMessage : 1; // 0x63(0x01)
	char pad_63_7 : 1; // 0x63(0x01)
	char pad_64[0x4]; // 0x64(0x04)
	struct FString NodeComment; // 0x68(0x10)
	int32_t ErrorType; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FString ErrorMsg; // 0x80(0x10)
	struct FGuid NodeGuid; // 0x90(0x10)
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xc0 (Inherited: 0xa0)
struct UEdGraphNode_Documentation : UEdGraphNode {
	struct FString Link; // 0xa0(0x10)
	struct FString Excerpt; // 0xb0(0x10)
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x138 (Inherited: 0x30)
struct UEdGraphPin_Deprecated : UObject {
	struct FString PinName; // 0x30(0x10)
	struct FString PinToolTip; // 0x40(0x10)
	enum class EEdGraphPinDirection Direction; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FEdGraphPinType PinType; // 0x58(0x70)
	struct FString DefaultValue; // 0xc8(0x10)
	struct FString AutogeneratedDefaultValue; // 0xd8(0x10)
	struct UObject* DefaultObject; // 0xe8(0x08)
	struct FText DefaultTextValue; // 0xf0(0x18)
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo; // 0x108(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins; // 0x118(0x10)
	struct UEdGraphPin_Deprecated* ParentPin; // 0x128(0x08)
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x130(0x08)
};

// Class Engine.EdGraphSchema
// Size: 0x30 (Inherited: 0x30)
struct UEdGraphSchema : UObject {
};

// Class Engine.Emitter
// Size: 0x420 (Inherited: 0x3d0)
struct AEmitter : AActor {
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x3d0(0x08)
	char bDestroyOnSystemFinish : 1; // 0x3d8(0x01)
	char bPostUpdateTickGroup : 1; // 0x3d8(0x01)
	char bCurrentlyActive : 1; // 0x3d8(0x01)
	char pad_3D8_3 : 5; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x400(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x410(0x10)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // @ game+0x51c4b50
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51c4a60
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate // (Native|Public|BlueprintCallable) // @ game+0x51c49d0
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x51c48e0
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x51c47f0
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51c4700
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x51c4610
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive // (Native|Public) // @ game+0x2c509e0
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished // (Native|Public) // @ game+0x51c4580
	bool IsActive(); // Function Engine.Emitter.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x51c4550
	void Deactivate(); // Function Engine.Emitter.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x51c4530
	void Activate(); // Function Engine.Emitter.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x51c44f0
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x490 (Inherited: 0x420)
struct AEmitterCameraLensEffectBase : AEmitter {
	struct UParticleSystem* PS_CameraEffect; // 0x420(0x08)
	struct UParticleSystem* PS_CameraEffectNonExtremeContent; // 0x428(0x08)
	struct APlayerCameraManager* BaseCamera; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)
	struct FTransform RelativeTransform; // 0x440(0x30)
	float BaseFOV; // 0x470(0x04)
	char bAllowMultipleInstances : 1; // 0x474(0x01)
	char bResetWhenRetriggered : 1; // 0x474(0x01)
	char pad_474_2 : 6; // 0x474(0x01)
	char pad_475[0x3]; // 0x475(0x03)
	struct TArray<struct AEmitterCameraLensEffectBase*> EmittersToTreatAsSame; // 0x478(0x10)
	float DistFromCamera; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
};

// Class Engine.ViewModeUtils
// Size: 0x30 (Inherited: 0x30)
struct UViewModeUtils : UObject {
};

// Class Engine.EngineBaseTypes
// Size: 0x30 (Inherited: 0x30)
struct UEngineBaseTypes : UObject {
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x30 (Inherited: 0x30)
struct UEngineHandlerComponentFactory : UHandlerComponentFactory {
};

// Class Engine.LocalMessage
// Size: 0x30 (Inherited: 0x30)
struct ULocalMessage : UObject {
};

// Class Engine.EngineMessage
// Size: 0xb0 (Inherited: 0x30)
struct UEngineMessage : ULocalMessage {
	struct FString FailedPlaceMessage; // 0x30(0x10)
	struct FString MaxedOutMessage; // 0x40(0x10)
	struct FString EnteredMessage; // 0x50(0x10)
	struct FString LeftMessage; // 0x60(0x10)
	struct FString GlobalNameChange; // 0x70(0x10)
	struct FString SpecEnteredMessage; // 0x80(0x10)
	struct FString NewPlayerMessage; // 0x90(0x10)
	struct FString NewSpecMessage; // 0xa0(0x10)
};

// Class Engine.EngineTypes
// Size: 0x30 (Inherited: 0x30)
struct UEngineTypes : UObject {
};

// Class Engine.ExponentialHeightFog
// Size: 0x3e0 (Inherited: 0x3d0)
struct AExponentialHeightFog : AInfo {
	struct UExponentialHeightFogComponent* Component; // 0x3d0(0x08)
	char bEnabled : 1; // 0x3d8(0x01)
	char pad_3D8_1 : 7; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // @ game+0x2beff70
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x330 (Inherited: 0x290)
struct UExponentialHeightFogComponent : USceneComponent {
	float FogDensity; // 0x288(0x04)
	float FogHeightFalloff; // 0x28c(0x04)
	struct FExponentialHeightFogData SecondFogData; // 0x290(0x0c)
	struct FLinearColor FogInscatteringColor; // 0x29c(0x10)
	struct UTextureCube* InscatteringColorCubemap; // 0x2b0(0x08)
	float InscatteringColorCubemapAngle; // 0x2b8(0x04)
	struct FLinearColor InscatteringTextureTint; // 0x2bc(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x2cc(0x04)
	float NonDirectionalInscatteringColorDistance; // 0x2d0(0x04)
	float DirectionalInscatteringExponent; // 0x2d4(0x04)
	float DirectionalInscatteringStartDistance; // 0x2d8(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x2dc(0x10)
	float FogMaxOpacity; // 0x2ec(0x04)
	float StartDistance; // 0x2f0(0x04)
	float FogCutoffDistance; // 0x2f4(0x04)
	bool bEnableVolumetricFog; // 0x2f8(0x01)
	float VolumetricFogScatteringDistribution; // 0x2fc(0x04)
	struct FColor VolumetricFogAlbedo; // 0x300(0x04)
	struct FLinearColor VolumetricFogEmissive; // 0x304(0x10)
	float VolumetricFogExtinctionScale; // 0x314(0x04)
	float VolumetricFogDistance; // 0x318(0x04)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x31c(0x04)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x320(0x01)
	char pad_322[0xe]; // 0x322(0x0e)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3890
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3810
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51f3780
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3700
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51f3680
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0x51f35f0
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3570
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f34f0
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51f33e0
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3360
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x51f32d0
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3250
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3140
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51f30b0
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x5166b90
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x51673b0
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3030
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x51f2fb0
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x51f2f30
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x51f2ea0
};

// Class Engine.Exporter
// Size: 0x80 (Inherited: 0x30)
struct UExporter : UObject {
	struct UObject* SupportedClass; // 0x30(0x08)
	struct UObject* ExportRootScope; // 0x38(0x08)
	struct TArray<struct FString> FormatExtension; // 0x40(0x10)
	struct TArray<struct FString> FormatDescription; // 0x50(0x10)
	int32_t PreferredFormatIndex; // 0x60(0x04)
	int32_t TextIndent; // 0x64(0x04)
	char bText : 1; // 0x68(0x01)
	char bSelectedOnly : 1; // 0x68(0x01)
	char bForceFileOperations : 1; // 0x68(0x01)
	char pad_68_3 : 5; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct UAssetExportTask* ExportTask; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)

	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // @ game+0x33d1d50
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x51f2df0
	bool RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x2f2d390
};

// Class Engine.FogIntensityVolume
// Size: 0x418 (Inherited: 0x408)
struct AFogIntensityVolume : AVolume {
	bool bEnabled; // 0x408(0x01)
	char pad_409[0x3]; // 0x409(0x03)
	float Priority; // 0x40c(0x04)
	float BlendRadius; // 0x410(0x04)
	float VertexFogIntensity; // 0x414(0x04)
};

// Class Engine.Font
// Size: 0x1e0 (Inherited: 0x30)
struct UFont : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	enum class EFontCacheType FontCacheType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FFontCharacter> Characters; // 0x40(0x10)
	struct TArray<struct UTexture2D*> Textures; // 0x50(0x10)
	int32_t IsRemapped; // 0x60(0x04)
	float EmScale; // 0x64(0x04)
	float Ascent; // 0x68(0x04)
	float Descent; // 0x6c(0x04)
	float Leading; // 0x70(0x04)
	int32_t Kerning; // 0x74(0x04)
	struct FFontImportOptionsData ImportOptions; // 0x78(0xb0)
	int32_t NumCharacters; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct TArray<int32_t> MaxCharHeight; // 0x130(0x10)
	float ScalingFactor; // 0x140(0x04)
	int32_t LegacyFontSize; // 0x144(0x04)
	struct FName LegacyFontName; // 0x148(0x0c)
	char pad_154[0x4]; // 0x154(0x04)
	struct FCompositeFont CompositeFont; // 0x158(0x38)
	char pad_190[0x50]; // 0x190(0x50)
};

// Class Engine.FontFace
// Size: 0x60 (Inherited: 0x30)
struct UFontFace : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FString SourceFilename; // 0x38(0x10)
	enum class EFontHinting Hinting; // 0x48(0x01)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x49(0x01)
	enum class EFontLayoutMethod LayoutMethod; // 0x4a(0x01)
	char pad_4B[0x15]; // 0x4b(0x15)
};

// Class Engine.FontImportOptions
// Size: 0xe0 (Inherited: 0x30)
struct UFontImportOptions : UObject {
	struct FFontImportOptionsData Data; // 0x30(0xb0)
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xe0 (Inherited: 0x30)
struct UForceFeedbackAttenuation : UObject {
	struct FForceFeedbackAttenuationSettings Attenuation; // 0x30(0xb0)
};

// Class Engine.ForceFeedbackComponent
// Size: 0x370 (Inherited: 0x290)
struct UForceFeedbackComponent : USceneComponent {
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0x288(0x08)
	char bAutoDestroy : 1; // 0x290(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x290(0x01)
	char bLooping : 1; // 0x290(0x01)
	char bIgnoreTimeDilation : 1; // 0x290(0x01)
	char bOverrideAttenuation : 1; // 0x290(0x01)
	float IntensityMultiplier; // 0x294(0x04)
	struct UForceFeedbackAttenuation* AttenuationSettings; // 0x298(0x08)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x2a0(0xb0)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x350(0x10)
	char pad_364_5 : 3; // 0x364(0x01)
	char pad_365[0xb]; // 0x365(0x0b)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x51f3910
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x51f3470
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x51f31c0
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x46b5b10
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x51f2cb0
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x51f2b70
};

// Class Engine.ForceFeedbackEffect
// Size: 0x48 (Inherited: 0x30)
struct UForceFeedbackEffect : UObject {
	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x30(0x10)
	float Duration; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.GameInstanceSubsystem
// Size: 0x38 (Inherited: 0x38)
struct UGameInstanceSubsystem : USubsystem {
};

// Class Engine.GameNetworkManager
// Size: 0x488 (Inherited: 0x3d0)
struct AGameNetworkManager : AInfo {
	float BadPacketLossThreshold; // 0x3d0(0x04)
	float SeverePacketLossThreshold; // 0x3d4(0x04)
	int32_t BadPingThreshold; // 0x3d8(0x04)
	int32_t SeverePingThreshold; // 0x3dc(0x04)
	int32_t AdjustedNetSpeed; // 0x3e0(0x04)
	float LastNetSpeedUpdateTime; // 0x3e4(0x04)
	int32_t TotalNetBandwidth; // 0x3e8(0x04)
	int32_t MinDynamicBandwidth; // 0x3ec(0x04)
	int32_t MaxDynamicBandwidth; // 0x3f0(0x04)
	char bIsStandbyCheckingEnabled : 1; // 0x3f4(0x01)
	char bHasStandbyCheatTriggered : 1; // 0x3f4(0x01)
	char pad_3F4_2 : 6; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float StandbyRxCheatTime; // 0x3f8(0x04)
	float StandbyTxCheatTime; // 0x3fc(0x04)
	float PercentMissingForRxStandby; // 0x400(0x04)
	float PercentMissingForTxStandby; // 0x404(0x04)
	float PercentForBadPing; // 0x408(0x04)
	float JoinInProgressStandbyWaitTime; // 0x40c(0x04)
	float MoveRepSize; // 0x410(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x414(0x04)
	float MAXSMALLPOSITIONERRORSQUARED; // 0x418(0x04)
	float MAXCROUCHERRORSQUARED; // 0x41c(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x420(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x424(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x428(0x04)
	float MaxClientForcedUpdateDuration; // 0x42c(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x430(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x434(0x04)
	float MaxMoveDeltaTime; // 0x438(0x04)
	float MaxClientSmoothingDeltaTime; // 0x43c(0x04)
	float ClientNetSendMoveDeltaTime; // 0x440(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x444(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x448(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x44c(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x450(0x04)
	bool ClientAuthorativePosition; // 0x454(0x01)
	char pad_455[0x3]; // 0x455(0x03)
	float ClientErrorUpdateRateLimit; // 0x458(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x45c(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x460(0x04)
	bool bMovementTimeDiscrepancyDetection; // 0x464(0x01)
	bool bMovementTimeDiscrepancyResolution; // 0x465(0x01)
	char pad_466[0x2]; // 0x466(0x02)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x468(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x46c(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x470(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x474(0x04)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x478(0x01)
	bool bUseDistanceBasedRelevancy; // 0x479(0x01)
	char pad_47A[0xe]; // 0x47a(0x0e)
};

// Class Engine.GameplayStatics
// Size: 0x30 (Inherited: 0x30)
struct UGameplayStatics : UBlueprintFunctionLibrary {

	void UnloadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x520ad00
	void UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x520ab80
	bool SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x520a990
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x520a5b0
	struct UAudioComponent* SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x520a2a0
	struct UAudioComponent* SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x520a040
	struct UObject* SpawnObject(struct UObject* ObjectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5209f70
	struct UForceFeedbackComponent* SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5209bc0
	struct UForceFeedbackComponent* SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5209900
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bIsFirstPerson, float WarmupTime, enum class EAresParticleVariantColor ParticleVariantColor); // Function Engine.GameplayStatics.SpawnEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52094f0
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem, bool bIsFirstPerson, float WarmupTime); // Function Engine.GameplayStatics.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52091d0
	struct UAudioComponent* SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5208d80
	struct UAudioComponent* SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5208a40
	struct UAudioComponent* SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52087f0
	struct UDecalComponent* SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5208550
	struct UDecalComponent* SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5208350
	void SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5208280
	void SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52081c0
	void SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5208140
	void SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207f20
	void SetSoundClassDistanceScale(struct UObject* WorldContextObject, struct USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Function Engine.GameplayStatics.SetSoundClassDistanceScale // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x5207dd0
	void SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207d10
	void SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207c50
	void SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207b90
	void SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x5207a90
	void SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x52077f0
	bool SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207720
	void SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207660
	void SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52075a0
	void SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52074e0
	bool SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52073a0
	void RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52072e0
	struct FVector RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52071f0
	struct FVector RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5207100
	void PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5207040
	bool ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative, bool bIsFirstPerson); // Function Engine.GameplayStatics.ProjectWorldToScreen // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5206e60
	void PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5206de0
	void PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5206d20
	void PlayWorldCameraShake(struct UObject* WorldContextObject, struct UCameraShakeBase* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5206af0
	void PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52067e0
	void PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, bool bIsUISound); // Function Engine.GameplayStatics.PlaySound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x5206580
	void PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5206280
	void PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5206070
	struct FString ParseOption(struct FString Options, struct FString Key); // Function Engine.GameplayStatics.ParseOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5205ee0
	void OpenLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5205cd0
	void OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5205b00
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, int32_t HitItem, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5205570
	void LoadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5205360
	void LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5205180
	struct USaveGame* LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5205090
	bool IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5205000
	bool IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204f70
	bool HasOption(struct FString Options, struct FString InKey); // Function Engine.GameplayStatics.HasOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204e20
	bool HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204d70
	int32_t GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5204c10
	struct FIntVector GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5204b70
	float GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204ae0
	void GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5204730
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204a50
	float GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52046a0
	float GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204610
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52033a0
	struct ULevelStreaming* GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204520
	float GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204490
	struct APawn* GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52043c0
	int32_t GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204330
	struct APlayerController* GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204260
	struct APlayerController* GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204190
	struct ACharacter* GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52040c0
	struct APlayerCameraManager* GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203ff0
	struct FString GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203f60
	struct UObject* GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203ed0
	int32_t GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5203e40
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5203cc0
	int32_t GetIntOption(struct FString Options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203b60
	float GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203ad0
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203a40
	struct AGameModeBase* GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52039b0
	struct UGameInstance* GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203920
	bool GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5203890
	struct UReverbEffect* GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5203800
	struct FString GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52036e0
	bool GetClosestListenerLocation(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector& ListenerPosition); // Function Engine.GameplayStatics.GetClosestListenerLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5203510
	float GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5203480
	enum class EPhysicalSurface GetAudioSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetAudioSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52033a0
	void GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5203260
	void GetAllActorsWithInterface(struct UObject* WorldContextObject, struct UInterface* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5203130
	void GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5202fb0
	void GetAllActorsOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5202e80
	struct AActor* GetActorOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5202db0
	void GetActorArrayBounds(struct TArray<struct AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5202c10
	struct FVector GetActorArrayAverageLocation(struct TArray<struct AActor*>& Actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5202b50
	void GetAccurateRealTime(struct UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5202a20
	void FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52029a0
	struct AActor* FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5202880
	bool FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5202700
	void EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5202680
	bool DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5202590
	bool DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection, bool bIsFirstPerson); // Function Engine.GameplayStatics.DeprojectScreenToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52023b0
	bool DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52022c0
	void DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52021e0
	struct UAudioComponent* CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x5201f80
	struct USaveGame* CreateSaveGameObject(struct USaveGame* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5201ef0
	struct APlayerController* CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5201df0
	void ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5201d70
	void ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5201c20
	void CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5201c00
	void BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52015d0
	bool BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5200500
	bool Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5201030
	bool Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5200a70
	bool Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5200820
	struct AActor* BeginSpawningActorFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, bool bNoCollisionFail, struct AActor* Owner); // Function Engine.GameplayStatics.BeginSpawningActorFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52002f0
	struct AActor* BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5200140
	struct AActor* BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51fff40
	bool AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x51fff10
	bool AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51ffdf0
	bool ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct TArray<struct AActor*>& OutDamagedActors, struct TArray<float>& OutDamageAmounts, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51ff970
	bool ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51ff650
	float ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x51ff3d0
	float ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x51ff230
	void AnnounceAccessibleString(struct FString AnnouncementString); // Function Engine.GameplayStatics.AnnounceAccessibleString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51ff190
	void ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51fefb0
};

// Class Engine.SpotLight
// Size: 0x3e8 (Inherited: 0x3e0)
struct ASpotLight : ALight {
	struct USpotLightComponent* SpotLightComponent; // 0x3e0(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x540e260
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x540e160
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x3e8 (Inherited: 0x3e8)
struct AGeneratedMeshAreaLight : ASpotLight {
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x30 (Inherited: 0x30)
struct UHapticFeedbackEffect_Base : UObject {
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x70 (Inherited: 0x30)
struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base {
	struct TArray<char> Amplitudes; // 0x30(0x10)
	int32_t SampleRate; // 0x40(0x04)
	char pad_44[0x2c]; // 0x44(0x2c)
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x140 (Inherited: 0x30)
struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base {
	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x30(0x110)
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x68 (Inherited: 0x30)
struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base {
	struct USoundWave* SoundWave; // 0x30(0x08)
	char pad_38[0x30]; // 0x38(0x30)
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary {

	void StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x5218420
	void StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x5218400
	void LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x5217d50
};

// Class Engine.HLODEngineSubsystem
// Size: 0x38 (Inherited: 0x38)
struct UHLODEngineSubsystem : UEngineSubsystem {
};

// Class Engine.HLODProxy
// Size: 0x90 (Inherited: 0x30)
struct UHLODProxy : UObject {
	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x30(0x10)
	struct TMap<struct UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors; // 0x40(0x50)
};

// Class Engine.HLODProxyDesc
// Size: 0x30 (Inherited: 0x30)
struct UHLODProxyDesc : UObject {
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x30 (Inherited: 0x30)
struct UImportanceSamplingLibrary : UBlueprintFunctionLibrary {

	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52204c0
	struct FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector Cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5220310
	struct FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D Cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52201c0
	float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52200c0
	struct FVector NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x521ff90
	struct FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x521fe90
	struct FImportanceTexture MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x521fca0
	void ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x521f860
	void BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x521ec50
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x30 (Inherited: 0x30)
struct UImportantToggleSettingInterface : UInterface {
};

// Class Engine.InGameAdManager
// Size: 0x68 (Inherited: 0x40)
struct UInGameAdManager : UPlatformInterfaceBase {
	char bShouldPauseWhileAdOpen : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct FDelegate> ClickedBannerDelegates; // 0x48(0x10)
	struct TArray<struct FDelegate> ClosedAdDelegates; // 0x58(0x10)
};

// Class Engine.InheritableComponentHandler
// Size: 0x50 (Inherited: 0x30)
struct UInheritableComponentHandler : UObject {
	struct TArray<struct FComponentOverrideRecord> Records; // 0x30(0x10)
	struct TArray<struct UActorComponent*> UnnecessaryComponents; // 0x40(0x10)
};

// Class Engine.InputDelegateBinding
// Size: 0x30 (Inherited: 0x30)
struct UInputDelegateBinding : UDynamicBlueprintBinding {
};

// Class Engine.InputActionDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UInputActionDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x30(0x10)
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UInputAxisDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x30(0x10)
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UInputAxisKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x30(0x10)
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UInputKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x30(0x10)
};

// Class Engine.InputSettings
// Size: 0x168 (Inherited: 0x30)
struct UInputSettings : UObject {
	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x30(0x10)
	char bAltEnterTogglesFullscreen : 1; // 0x40(0x01)
	char bF11TogglesFullscreen : 1; // 0x40(0x01)
	char bUseMouseForTouch : 1; // 0x40(0x01)
	char bEnableMouseSmoothing : 1; // 0x40(0x01)
	char bEnableFOVScaling : 1; // 0x40(0x01)
	char bCaptureMouseOnLaunch : 1; // 0x40(0x01)
	char bDefaultViewportMouseLock : 1; // 0x40(0x01)
	char bAlwaysShowTouchInterface : 1; // 0x40(0x01)
	char bShowConsoleOnFourFingerTap : 1; // 0x41(0x01)
	char bEnableGestureRecognizer : 1; // 0x41(0x01)
	char pad_41_2 : 6; // 0x41(0x01)
	bool bUseAutocorrect; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x48(0x10)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x58(0x10)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x68(0x10)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x78(0x01)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	float FOVScale; // 0x7c(0x04)
	float DoubleClickTime; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x88(0x10)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x98(0x10)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xa8(0x10)
	struct TSoftClassPtr<UObject> DefaultPlayerInputClass; // 0xb8(0x30)
	struct TSoftClassPtr<UObject> DefaultInputComponentClass; // 0xe8(0x30)
	struct FSoftObjectPath DefaultTouchInterface; // 0x118(0x20)
	struct FKey ConsoleKey; // 0x138(0x20)
	struct TArray<struct FKey> ConsoleKeys; // 0x158(0x10)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x5220990
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x52207a0
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x52205c0
	struct UInputSettings* GetInputSettings(); // Function Engine.InputSettings.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x521f6b0
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f1a0
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521f030
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521ef80
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x521ee10
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps // (Final|Native|Public|BlueprintCallable) // @ game+0x521edf0
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x521ea60
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x521e880
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x40 (Inherited: 0x30)
struct UInputTouchDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x30(0x10)
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x40 (Inherited: 0x40)
struct UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding {
};

// Class Engine.Interface_AssetUserData
// Size: 0x30 (Inherited: 0x30)
struct UInterface_AssetUserData : UInterface {
};

// Class Engine.BoneReferenceSkeletonProvider
// Size: 0x30 (Inherited: 0x30)
struct UBoneReferenceSkeletonProvider : UInterface {
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x30 (Inherited: 0x30)
struct UInterface_CollisionDataProvider : UInterface {
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x30 (Inherited: 0x30)
struct UInterface_PostProcessVolume : UInterface {
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x30 (Inherited: 0x30)
struct UInterface_PreviewMeshProvider : UInterface {
};

// Class Engine.InterpCurveEdSetup
// Size: 0x48 (Inherited: 0x30)
struct UInterpCurveEdSetup : UObject {
	struct TArray<struct FCurveEdTab> Tabs; // 0x30(0x10)
	int32_t ActiveTab; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.InterpData
// Size: 0x78 (Inherited: 0x30)
struct UInterpData : UObject {
	float InterpLength; // 0x30(0x04)
	float PathBuildTime; // 0x34(0x04)
	struct TArray<struct UInterpGroup*> InterpGroups; // 0x38(0x10)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x48(0x08)
	float EdSectionStart; // 0x50(0x04)
	float EdSectionEnd; // 0x54(0x04)
	char bShouldBakeAndPrune : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UInterpGroupDirector* CachedDirectorGroup; // 0x60(0x08)
	struct TArray<struct FName> AllEventNames; // 0x68(0x10)
};

// Class Engine.InterpFilter
// Size: 0x40 (Inherited: 0x30)
struct UInterpFilter : UObject {
	struct FString Caption; // 0x30(0x10)
};

// Class Engine.InterpFilter_Classes
// Size: 0x40 (Inherited: 0x40)
struct UInterpFilter_Classes : UInterpFilter {
};

// Class Engine.InterpFilter_Custom
// Size: 0x40 (Inherited: 0x40)
struct UInterpFilter_Custom : UInterpFilter {
};

// Class Engine.InterpGroup
// Size: 0x60 (Inherited: 0x30)
struct UInterpGroup : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UInterpTrack*> InterpTracks; // 0x38(0x10)
	struct FName GroupName; // 0x48(0x0c)
	struct FColor GroupColor; // 0x54(0x04)
	char bCollapsed : 1; // 0x58(0x01)
	char bVisible : 1; // 0x58(0x01)
	char bIsFolder : 1; // 0x58(0x01)
	char bIsParented : 1; // 0x58(0x01)
	char bIsSelected : 1; // 0x58(0x01)
	char pad_58_5 : 3; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.InterpGroupCamera
// Size: 0x70 (Inherited: 0x60)
struct UInterpGroupCamera : UInterpGroup {
	struct UCameraAnim* CameraAnimInst; // 0x60(0x08)
	float CompressTolerance; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.InterpGroupDirector
// Size: 0x60 (Inherited: 0x60)
struct UInterpGroupDirector : UInterpGroup {
};

// Class Engine.InterpGroupInst
// Size: 0x50 (Inherited: 0x30)
struct UInterpGroupInst : UObject {
	struct UInterpGroup* Group; // 0x30(0x08)
	struct AActor* GroupActor; // 0x38(0x08)
	struct TArray<struct UInterpTrackInst*> TrackInst; // 0x40(0x10)
};

// Class Engine.InterpGroupInstCamera
// Size: 0x50 (Inherited: 0x50)
struct UInterpGroupInstCamera : UInterpGroupInst {
};

// Class Engine.InterpGroupInstDirector
// Size: 0x50 (Inherited: 0x50)
struct UInterpGroupInstDirector : UInterpGroupInst {
};

// Class Engine.InterpToMovementComponent
// Size: 0x1c8 (Inherited: 0x128)
struct UInterpToMovementComponent : UMovementComponent {
	float Duration; // 0x128(0x04)
	char bPauseOnImpact : 1; // 0x12c(0x01)
	char pad_12C_1 : 7; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	bool bSweep; // 0x130(0x01)
	enum class ETeleportType TeleportType; // 0x131(0x01)
	enum class EInterpToBehaviourType BehaviourType; // 0x132(0x01)
	bool bCheckIfStillInWorld; // 0x133(0x01)
	char bForceSubStepping : 1; // 0x134(0x01)
	char pad_134_1 : 7; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x138(0x10)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x148(0x10)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x158(0x10)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x168(0x10)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x178(0x10)
	float MaxSimulationTimeStep; // 0x188(0x04)
	int32_t MaxSimulationIterations; // 0x18c(0x04)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x190(0x10)
	char pad_1A0[0x28]; // 0x1a0(0x28)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5226e60
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x5226bb0
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x5226670
};

// Class Engine.InterpTrackAnimControl
// Size: 0xc0 (Inherited: 0x98)
struct UInterpTrackAnimControl : UInterpTrackFloatBase {
	struct FName SlotName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct TArray<struct FAnimControlTrackKey> AnimSeqs; // 0xa8(0x10)
	char bSkipAnimNotifiers : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
};

// Class Engine.InterpTrackAudioMaster
// Size: 0x98 (Inherited: 0x98)
struct UInterpTrackAudioMaster : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackBoolProp
// Size: 0x98 (Inherited: 0x78)
struct UInterpTrackBoolProp : UInterpTrack {
	struct TArray<struct FBoolTrackKey> BoolTrack; // 0x78(0x10)
	struct FName PropertyName; // 0x88(0x0c)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.InterpTrackColorProp
// Size: 0xa8 (Inherited: 0x98)
struct UInterpTrackColorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackColorScale
// Size: 0x98 (Inherited: 0x98)
struct UInterpTrackColorScale : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackDirector
// Size: 0x90 (Inherited: 0x78)
struct UInterpTrackDirector : UInterpTrack {
	struct TArray<struct FDirectorTrackCut> CutTrack; // 0x78(0x10)
	char bSimulateCameraCutsOnClients : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.InterpTrackEvent
// Size: 0x90 (Inherited: 0x78)
struct UInterpTrackEvent : UInterpTrack {
	struct TArray<struct FEventTrackKey> EventTrack; // 0x78(0x10)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char bUseCustomEventName : 1; // 0x88(0x01)
	char pad_88_4 : 4; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.InterpTrackFade
// Size: 0xb0 (Inherited: 0x98)
struct UInterpTrackFade : UInterpTrackFloatBase {
	char bPersistFade : 1; // 0x98(0x01)
	char bFadeAudio : 1; // 0x98(0x01)
	char pad_98_2 : 6; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FLinearColor FadeColor; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.InterpTrackFloatAnimBPParam
// Size: 0xb8 (Inherited: 0x98)
struct UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase {
	struct UObject* AnimBlueprintClass; // 0x98(0x08)
	struct UAnimInstance* AnimClass; // 0xa0(0x08)
	struct FName ParamName; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.InterpTrackFloatMaterialParam
// Size: 0xb8 (Inherited: 0x98)
struct UInterpTrackFloatMaterialParam : UInterpTrackFloatBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x98(0x10)
	struct FName ParamName; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.InterpTrackFloatParticleParam
// Size: 0xa8 (Inherited: 0x98)
struct UInterpTrackFloatParticleParam : UInterpTrackFloatBase {
	struct FName ParamName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackFloatProp
// Size: 0xa8 (Inherited: 0x98)
struct UInterpTrackFloatProp : UInterpTrackFloatBase {
	struct FName PropertyName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackInstAnimControl
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstAnimControl : UInterpTrackInst {
	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.InterpTrackInstAudioMaster
// Size: 0x30 (Inherited: 0x30)
struct UInterpTrackInstAudioMaster : UInterpTrackInst {
};

// Class Engine.InterpTrackInstProperty
// Size: 0x58 (Inherited: 0x30)
struct UInterpTrackInstProperty : UInterpTrackInst {
	struct TFieldPath<FProperty> InterpProperty; // 0x30(0x20)
	struct UObject* PropertyOuterObjectInst; // 0x50(0x08)
};

// Class Engine.InterpTrackInstBoolProp
// Size: 0x70 (Inherited: 0x58)
struct UInterpTrackInstBoolProp : UInterpTrackInstProperty {
	char pad_58[0x10]; // 0x58(0x10)
	bool ResetBool; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.InterpTrackInstColorProp
// Size: 0x68 (Inherited: 0x58)
struct UInterpTrackInstColorProp : UInterpTrackInstProperty {
	char pad_58[0x8]; // 0x58(0x08)
	struct FColor ResetColor; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.InterpTrackInstColorScale
// Size: 0x30 (Inherited: 0x30)
struct UInterpTrackInstColorScale : UInterpTrackInst {
};

// Class Engine.InterpTrackInstDirector
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstDirector : UInterpTrackInst {
	struct AActor* OldViewTarget; // 0x30(0x08)
};

// Class Engine.InterpTrackInstEvent
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstEvent : UInterpTrackInst {
	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.InterpTrackInstFade
// Size: 0x30 (Inherited: 0x30)
struct UInterpTrackInstFade : UInterpTrackInst {
};

// Class Engine.InterpTrackInstFloatAnimBPParam
// Size: 0x48 (Inherited: 0x30)
struct UInterpTrackInstFloatAnimBPParam : UInterpTrackInst {
	struct UAnimInstance* AnimScriptInstance; // 0x30(0x08)
	float ResetFloat; // 0x38(0x04)
	char pad_3C[0xc]; // 0x3c(0x0c)
};

// Class Engine.InterpTrackInstFloatMaterialParam
// Size: 0x68 (Inherited: 0x30)
struct UInterpTrackInstFloatMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x30(0x10)
	struct TArray<float> ResetFloats; // 0x40(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x50(0x10)
	struct UInterpTrackFloatMaterialParam* InstancedTrack; // 0x60(0x08)
};

// Class Engine.InterpTrackInstFloatParticleParam
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstFloatParticleParam : UInterpTrackInst {
	float ResetFloat; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.InterpTrackInstFloatProp
// Size: 0x68 (Inherited: 0x58)
struct UInterpTrackInstFloatProp : UInterpTrackInstProperty {
	char pad_58[0x8]; // 0x58(0x08)
	float ResetFloat; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.InterpTrackInstLinearColorProp
// Size: 0x70 (Inherited: 0x58)
struct UInterpTrackInstLinearColorProp : UInterpTrackInstProperty {
	char pad_58[0x8]; // 0x58(0x08)
	struct FLinearColor ResetColor; // 0x60(0x10)
};

// Class Engine.InterpTrackInstMove
// Size: 0x48 (Inherited: 0x30)
struct UInterpTrackInstMove : UInterpTrackInst {
	struct FVector ResetLocation; // 0x30(0x0c)
	struct FRotator ResetRotation; // 0x3c(0x0c)
};

// Class Engine.InterpTrackInstParticleReplay
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstParticleReplay : UInterpTrackInst {
	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.InterpTrackInstSlomo
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstSlomo : UInterpTrackInst {
	float OldTimeDilation; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.InterpTrackInstSound
// Size: 0x40 (Inherited: 0x30)
struct UInterpTrackInstSound : UInterpTrackInst {
	float LastUpdatePosition; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UAudioComponent* PlayAudioComp; // 0x38(0x08)
};

// Class Engine.InterpTrackInstToggle
// Size: 0x40 (Inherited: 0x30)
struct UInterpTrackInstToggle : UInterpTrackInst {
	enum class ETrackToggleAction Action; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float LastUpdatePosition; // 0x34(0x04)
	char bSavedActiveState : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.InterpTrackInstVectorMaterialParam
// Size: 0x68 (Inherited: 0x30)
struct UInterpTrackInstVectorMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x30(0x10)
	struct TArray<struct FVector> ResetVectors; // 0x40(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x50(0x10)
	struct UInterpTrackVectorMaterialParam* InstancedTrack; // 0x60(0x08)
};

// Class Engine.InterpTrackInstVectorProp
// Size: 0x70 (Inherited: 0x58)
struct UInterpTrackInstVectorProp : UInterpTrackInstProperty {
	char pad_58[0x8]; // 0x58(0x08)
	struct FVector ResetVector; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.InterpTrackInstVisibility
// Size: 0x38 (Inherited: 0x30)
struct UInterpTrackInstVisibility : UInterpTrackInst {
	enum class EVisibilityTrackAction Action; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float LastUpdatePosition; // 0x34(0x04)
};

// Class Engine.InterpTrackLinearColorBase
// Size: 0x98 (Inherited: 0x78)
struct UInterpTrackLinearColorBase : UInterpTrack {
	struct FInterpCurveLinearColor LinearColorTrack; // 0x78(0x18)
	float CurveTension; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.InterpTrackLinearColorProp
// Size: 0xa8 (Inherited: 0x98)
struct UInterpTrackLinearColorProp : UInterpTrackLinearColorBase {
	struct FName PropertyName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackMove
// Size: 0xd8 (Inherited: 0x78)
struct UInterpTrackMove : UInterpTrack {
	struct FInterpCurveVector PosTrack; // 0x78(0x18)
	struct FInterpCurveVector EulerTrack; // 0x90(0x18)
	struct FInterpLookupTrack LookupTrack; // 0xa8(0x10)
	struct FName LookAtGroupName; // 0xb8(0x0c)
	float LinCurveTension; // 0xc4(0x04)
	float AngCurveTension; // 0xc8(0x04)
	char bUseQuatInterpolation : 1; // 0xcc(0x01)
	char bShowArrowAtKeys : 1; // 0xcc(0x01)
	char bDisableMovement : 1; // 0xcc(0x01)
	char bShowTranslationOnCurveEd : 1; // 0xcc(0x01)
	char bShowRotationOnCurveEd : 1; // 0xcc(0x01)
	char bHide3DTrack : 1; // 0xcc(0x01)
	char pad_CC_6 : 2; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	enum class EInterpTrackMoveRotMode RotMode; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
};

// Class Engine.InterpTrackMoveAxis
// Size: 0xb0 (Inherited: 0x98)
struct UInterpTrackMoveAxis : UInterpTrackFloatBase {
	enum class EInterpMoveAxis MoveAxis; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FInterpLookupTrack LookupTrack; // 0xa0(0x10)
};

// Class Engine.InterpTrackParticleReplay
// Size: 0x88 (Inherited: 0x78)
struct UInterpTrackParticleReplay : UInterpTrack {
	struct TArray<struct FParticleReplayTrackKey> TrackKeys; // 0x78(0x10)
};

// Class Engine.InterpTrackSlomo
// Size: 0x98 (Inherited: 0x98)
struct UInterpTrackSlomo : UInterpTrackFloatBase {
};

// Class Engine.InterpTrackSound
// Size: 0xb0 (Inherited: 0x98)
struct UInterpTrackSound : UInterpTrackVectorBase {
	struct TArray<struct FSoundTrackKey> Sounds; // 0x98(0x10)
	char bPlayOnReverse : 1; // 0xa8(0x01)
	char bContinueSoundOnMatineeEnd : 1; // 0xa8(0x01)
	char bSuppressSubtitles : 1; // 0xa8(0x01)
	char bTreatAsDialogue : 1; // 0xa8(0x01)
	char bAttach : 1; // 0xa8(0x01)
	char pad_A8_5 : 3; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.InterpTrackToggle
// Size: 0x90 (Inherited: 0x78)
struct UInterpTrackToggle : UInterpTrack {
	struct TArray<struct FToggleTrackKey> ToggleTrack; // 0x78(0x10)
	char bActivateSystemEachUpdate : 1; // 0x88(0x01)
	char bActivateWithJustAttachedFlag : 1; // 0x88(0x01)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.InterpTrackVectorMaterialParam
// Size: 0xb8 (Inherited: 0x98)
struct UInterpTrackVectorMaterialParam : UInterpTrackVectorBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x98(0x10)
	struct FName ParamName; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.InterpTrackVectorProp
// Size: 0xa8 (Inherited: 0x98)
struct UInterpTrackVectorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackVisibility
// Size: 0x90 (Inherited: 0x78)
struct UInterpTrackVisibility : UInterpTrack {
	struct TArray<struct FVisibilityTrackKey> VisibilityTrack; // 0x78(0x10)
	char bFireEventsWhenForwards : 1; // 0x88(0x01)
	char bFireEventsWhenBackwards : 1; // 0x88(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x88(0x01)
	char pad_88_3 : 5; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.IntSerialization
// Size: 0x58 (Inherited: 0x30)
struct UIntSerialization : UObject {
	uint16_t UnsignedInt16Variable; // 0x30(0x02)
	char pad_32[0x2]; // 0x32(0x02)
	uint32_t UnsignedInt32Variable; // 0x34(0x04)
	uint64_t UnsignedInt64Variable; // 0x38(0x08)
	int8_t SignedInt8Variable; // 0x40(0x01)
	char pad_41[0x1]; // 0x41(0x01)
	int16_t SignedInt16Variable; // 0x42(0x02)
	char pad_44[0x4]; // 0x44(0x04)
	int64_t SignedInt64Variable; // 0x48(0x08)
	char UnsignedInt8Variable; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t SignedInt32Variable; // 0x54(0x04)
};

// Class Engine.KillZVolume
// Size: 0x418 (Inherited: 0x418)
struct AKillZVolume : APhysicsVolume {
};

// Class Engine.KismetArrayLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetArrayLibrary : UBlueprintFunctionLibrary {

	void SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x523ae20
	void FilterArray(struct TArray<struct AActor*>& TargetArray, struct AActor* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52378c0
	void Array_Swap(struct TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5237170
	void Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52370d0
	void Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236e90
	void Array_Reverse(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Reverse // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236df0
	void Array_Resize(struct TArray<int32_t>& TargetArray, int32_t Size); // Function Engine.KismetArrayLibrary.Array_Resize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236d00
	bool Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236b30
	void Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236a40
	void Array_RandomFromStream(struct TArray<int32_t>& TargetArray, struct FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_RandomFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52368b0
	void Array_Random(struct TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_Random // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5236770
	int32_t Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52366c0
	int32_t Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5236610
	bool Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5236520
	void Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5236320
	bool Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5236200
	void Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5235ff0
	int32_t Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5235e20
	bool Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5235c50
	void Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5235bb0
	void Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5235aa0
	int32_t Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52358e0
	int32_t Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5235720
};

// Class Engine.KismetGuidLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetGuidLibrary : UBlueprintFunctionLibrary {

	void Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGuid, bool& Success); // Function Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5239c30
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5239b30
	struct FGuid NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5239af0
	bool IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5238980
	void Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52388f0
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52373b0
	struct FString Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52372d0
};

// Class Engine.KismetInputLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetInputLibrary : UBlueprintFunctionLibrary {

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523ace0
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523aae0
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523a990
	int32_t PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523a850
	int32_t PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523a710
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x523a5c0
	int32_t PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523a480
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x523a330
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x523a1f0
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x523a0a0
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239ee0
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5239d90
	bool Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239a10
	bool Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239930
	bool Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239850
	bool Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239770
	bool Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239690
	bool Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52395b0
	bool Key_IsDigital(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsDigital // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52394d0
	bool Key_IsButtonAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsButtonAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52393f0
	bool Key_IsAxis3D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis3D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239310
	bool Key_IsAxis2D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis2D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239230
	bool Key_IsAxis1D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis1D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239150
	bool Key_IsAnalog(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5239070
	struct FText Key_GetShortDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetShortDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238f60
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238e50
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238d20
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238c10
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238b30
	struct FText Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238a20
	bool InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238830
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238770
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52386b0
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52385f0
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238530
	bool InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238470
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52383b0
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52382f0
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238230
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5238170
	bool InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52380b0
	bool InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237ff0
	bool InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237f30
	struct FText InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237df0
	int32_t GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237ce0
	struct FKey GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237b50
	float GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5237a20
	bool EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5237700
	bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52374b0
	void CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52372b0
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetInternationalizationLibrary : UBlueprintFunctionLibrary {

	bool SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x529a180
	bool SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x529a080
	bool SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5299f80
	bool SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5299e80
	bool SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5299d30
	struct FString GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5285b40
	struct FString GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5285040
	struct TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5284960
	struct FString GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5284290
	struct FString GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5284200
	struct FString GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5284200
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5284110
	struct FString GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5283fd0
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x527c870
};

// Class Engine.KismetMaterialLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetMaterialLibrary : UBlueprintFunctionLibrary {

	void SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529a510
	void SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x529a3b0
	struct FLinearColor GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52861f0
	float GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x5285770
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName, enum class EMIDCreationFlags CreationFlags); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x527e310
};

// Class Engine.KismetMathLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetMathLibrary : UBlueprintFunctionLibrary {

	int32_t Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a21f0
	int64_t Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a2120
	int32_t Wrap(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Wrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a2010
	struct FVector WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1da0
	struct FRotator WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1c50
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a1ef0
	float VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d5f0
	float VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d560
	float VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d4c0
	float VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d390
	float VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d300
	float VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d420
	struct FVector VLerp(struct FVector A, struct FVector B, float Alpha); // Function Engine.KismetMathLibrary.VLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d1c0
	struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d030
	struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529cea0
	struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.VectorSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529ef60
	struct FVector Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1c20
	struct FVector Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1bf0
	void Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52a1b70
	struct FVector2D Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1a80
	struct FVector Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a19e0
	struct FVector Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1940
	struct FVector Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1780
	void Vector_Set(struct FVector& A, float X, float Y, float Z); // Function Engine.KismetMathLibrary.Vector_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52a1620
	struct FVector Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a15f0
	struct FVector Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1500
	struct FVector Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1400
	struct FVector Vector_One(); // Function Engine.KismetMathLibrary.Vector_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a13d0
	struct FVector Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a1100
	void Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52a1240
	struct FVector Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0f20
	struct FVector Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0dd0
	struct FVector Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0da0
	bool Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0cf0
	bool Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0bd0
	bool Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0ab0
	bool Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a09e0
	bool Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a08d0
	bool Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0800
	float Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a06b0
	struct FVector Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a05f0
	struct FVector Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0550
	float Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a04b0
	float Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0410
	struct FVector Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0370
	struct FVector Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0340
	struct FVector Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0310
	float Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0230
	float Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0070
	float Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ffa0
	float Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a0140
	float Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529fda0
	struct FVector Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529fcc0
	struct FVector Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529fbe0
	struct FVector Vector_ClampSizeMax2D(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f850
	struct FVector Vector_ClampSizeMax(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f9e0
	struct FVector Vector_ClampSize2D(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f6a0
	struct FVector Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f590
	struct FVector Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f450
	struct FVector Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529f420
	void Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529f340
	void Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529f1d0
	struct FVector4 Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ef40
	float Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529edb0
	float Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ee70
	float Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ec20
	float Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ece0
	void Vector4_Set(struct FVector4& A, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Vector4_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529ea70
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e760
	void Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529e8b0
	struct FVector4 Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e5a0
	struct FVector4 Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e500
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e380
	bool Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e2c0
	bool Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e190
	bool Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529e0c0
	bool Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529dfa0
	bool Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529deb0
	float Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529dc60
	float Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529dd80
	struct FVector4 Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529db00
	void Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529da10
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d800
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d680
	struct FVector2D Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d9e0
	struct FVector2D Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d9b0
	struct FVector2D Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529d980
	struct FVector VEase(struct FVector A, struct FVector B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.VEase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529cc90
	struct FDateTime UtcNow(); // Function Engine.KismetMathLibrary.UtcNow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529cc50
	struct FVector4 TransformVector4(struct FMatrix& Matrix, struct FVector4& Vec4); // Function Engine.KismetMathLibrary.TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529ca50
	struct FRotator TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c900
	struct FVector TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c760
	struct FVector TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c5c0
	float Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529cb70
	struct FVector2D ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c4c0
	struct FVector2D ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c3b0
	void ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, float& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c220
	struct FDateTime Today(); // Function Engine.KismetMathLibrary.Today // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c570
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529bcc0
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529baa0
	struct FTimespan TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ea90
	float TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c140
	struct FTimespan TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c110
	struct FTimespan TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529c0e0
	bool TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529bf80
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.TEase // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b810
	float Tan(float A); // Function Engine.KismetMathLibrary.Tan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529bef0
	struct FVector Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b730
	struct FVector Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b640
	struct FVector Subtract_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b560
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b430
	struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b360
	struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b290
	struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529abf0
	struct FQuat Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b1b0
	struct FLinearColor Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529b0c0
	struct FIntPoint Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529aff0
	struct FIntPoint Subtract_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529af10
	int32_t Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529ae50
	int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529ad80
	float Subtract_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Subtract_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529acb0
	struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529abf0
	struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529abf0
	char Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529ab30
	float Square(float A); // Function Engine.KismetMathLibrary.Square // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529aab0
	float Sqrt(float A); // Function Engine.KismetMathLibrary.Sqrt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529aa00
	struct FVector Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x529a920
	float Sin(float A); // Function Engine.KismetMathLibrary.Sin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529a890
	int64_t SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529a740
	int32_t SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529a7f0
	float SignOfFloat(float A); // Function Engine.KismetMathLibrary.SignOfFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x529a670
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x529a280
	void Set2D(struct FVector2D& A, float X, float Y); // Function Engine.KismetMathLibrary.Set2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5299c20
	struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5299730
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5299a50
	struct FString SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5299870
	struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5299730
	struct UObject* SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52992f0
	int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5299630
	float SelectFloat(float A, float B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5299510
	struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52993f0
	struct UObject* SelectClass(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52992f0
	void SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5299210
	float SafeDivide(float A, float B); // Function Engine.KismetMathLibrary.SafeDivide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5299140
	int64_t Round64(float A); // Function Engine.KismetMathLibrary.Round64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5298fe0
	int32_t Round(float A); // Function Engine.KismetMathLibrary.Round // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52990b0
	struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5298ef0
	struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5298da0
	struct FRotator RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296ab0
	struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296920
	struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296790
	void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52966b0
	void RGBToHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBToHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52964c0
	struct FLinearColor RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296430
	void ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5298d00
	void ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5298c20
	void ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x5298b90
	struct FRotator REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.REase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52961e0
	int32_t RandomWeightedInteger(struct TArray<int32_t> Weights); // Function Engine.KismetMathLibrary.RandomWeightedInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52989d0
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5298800
	struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52986d0
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52984f0
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52983b0
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5298210
	struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5298120
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297f70
	struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297e80
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297d80
	struct FVector RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297d40
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297bf0
	struct FRotator RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297b50
	struct FVector RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297a10
	int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52978a0
	int32_t RandomIntegerInRange(int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.RandomIntegerInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5297790
	int32_t RandomIntegerFromStream(int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297660
	int64_t RandomInteger64InRange(int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64InRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5297480
	int64_t RandomInteger64(int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52973b0
	int32_t RandomInteger(int32_t Max); // Function Engine.KismetMathLibrary.RandomInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52975a0
	float RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297230
	float RandomFloatInRange(float Min, float Max); // Function Engine.KismetMathLibrary.RandomFloatInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5297130
	float RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5297040
	float RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5297000
	bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296ec0
	bool RandomBoolWithWeight(float Weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5296e40
	bool RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5296d50
	bool RandomBool(); // Function Engine.KismetMathLibrary.RandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5296cf0
	float RadiansToDegrees(float A); // Function Engine.KismetMathLibrary.RadiansToDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5296c60
	struct FVector Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294e70
	struct FVector Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294d80
	struct FVector Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294c80
	struct FVector Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295fc0
	float Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295f00
	float Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295e40
	void Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5295d60
	void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5295bb0
	struct FRotator Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295b10
	struct FVector Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295900
	struct FQuat Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52957a0
	void Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5295650
	struct FQuat Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52955b0
	struct FQuat Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295510
	bool Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295440
	bool Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295360
	bool Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295240
	bool Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5295160
	struct FQuat Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52950d0
	struct FQuat Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52950b0
	struct FVector Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294f80
	struct FVector Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294e70
	struct FVector Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294d80
	struct FVector Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294c80
	float Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294bd0
	struct FQuat Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294b30
	struct FVector Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294a90
	void Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5294960
	float Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294820
	struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52946b0
	struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294590
	struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5294420
	bool PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5294310
	float PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5294280
	int32_t Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52941a0
	float Percent_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Percent_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293ff0
	char Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293f10
	int32_t Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293e50
	int64_t Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293d80
	struct FDateTime Now(); // Function Engine.KismetMathLibrary.Now // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5293d40
	bool NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292980
	bool NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292850
	bool NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292780
	bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5293a50
	bool NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52938c0
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5293790
	bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292cd0
	bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52935a0
	bool NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5293440
	bool NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292c00
	bool NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293360
	bool NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52931d0
	bool NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52930e0
	bool NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5293010
	bool NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292f40
	bool NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292e70
	bool NotEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.NotEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292d90
	bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292cd0
	bool NotEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292c00
	bool NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292b40
	bool NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292a60
	bool Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293cb0
	int64_t Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293ba0
	int32_t Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5293c30
	struct FVector2D NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52921e0
	float NormalizeToRange(float Value, float RangeMin, float RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5292560
	struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292680
	float NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52924d0
	void Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5292350
	struct FVector2D Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291ef0
	struct FVector Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5292010
	struct FVector NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291db0
	struct FRotator NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291d10
	struct FVector2D Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291e50
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291ae0
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52919c0
	float MultiplyMultiply_FloatFloat(float Base, float Exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5290670
	float MultiplyByPi(float Value); // Function Engine.KismetMathLibrary.MultiplyByPi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52905e0
	struct FVector Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52918e0
	struct FVector Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291450
	struct FVector Multiply_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291370
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52917b0
	struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52916e0
	struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291610
	struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291540
	struct FRotator Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291450
	struct FRotator Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291370
	struct FQuat Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291230
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5291020
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& A, float B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5290eb0
	struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5290dc0
	struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5290cf0
	struct FIntPoint Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5290c10
	struct FIntPoint Multiply_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5290b30
	int32_t Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5290a70
	float Multiply_IntFloat(int32_t A, float B); // Function Engine.KismetMathLibrary.Multiply_IntFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52909a0
	int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52908d0
	float Multiply_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Multiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5290800
	char Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5290740
	struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52853b0
	void MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52901b0
	void MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5290060
	void MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x528ff10
	int64_t MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528fe40
	void MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5290300
	int32_t Min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Min // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528fd70
	void MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x528fc20
	void MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x528fad0
	void MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x528f980
	int64_t MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528f8b0
	int32_t Max(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Max // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528f7e0
	struct FVector4 Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528f580
	struct FVector4 Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528f6a0
	struct FVector4 Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528f440
	struct FQuat Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528f3a0
	void Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528f2c0
	void Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528f190
	void Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528f050
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ef10
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ee50
	void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528ed70
	struct FMatrix Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ebf0
	struct FVector Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ea80
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e900
	struct FMatrix Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e8b0
	struct FVector Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e7b0
	void Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e620
	struct FMatrix Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e430
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e370
	struct FVector Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528df40
	struct FVector Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e200
	void Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528e050
	float Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528de30
	struct FRotator Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d6b0
	struct FVector Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528dd90
	float Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528dd00
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528dbc0
	struct FMatrix Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528db00
	bool Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528d910
	bool Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528d720
	bool Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528d570
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528d380
	bool Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528d190
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528cfa0
	float Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528cf10
	struct FVector Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ce10
	bool Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528cd80
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector Translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528cc10
	struct FMatrix Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528caf0
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528c940
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528c790
	struct FVector4 MakeVector4(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeVector4 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528c4f0
	struct FVector2D MakeVector2D(float X, float Y); // Function Engine.KismetMathLibrary.MakeVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528c420
	struct FVector MakeVector(float X, float Y, float Z); // Function Engine.KismetMathLibrary.MakeVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528c670
	struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528c280
	struct FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528bf60
	struct FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528c0f0
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528bbe0
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528bad0
	struct FRotator MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ba10
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b900
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b7f0
	struct FRotator MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b730
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b620
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b510
	struct FRotator MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b450
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528be40
	struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528bcf0
	struct FTransform MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b2c0
	struct FRandomStream MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b180
	struct FQualifiedFrameTime MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528b060
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528af40
	struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ae50
	struct FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528ad90
	struct FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528ab80
	struct FLinearColor MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528aa00
	struct FBox2D MakeBox2D(struct FVector2D Min, struct FVector2D Max); // Function Engine.KismetMathLibrary.MakeBox2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a830
	struct FBox MakeBox(struct FVector Min, struct FVector Max); // Function Engine.KismetMathLibrary.MakeBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a910
	float Loge(float A); // Function Engine.KismetMathLibrary.Loge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528a7a0
	float Log(float A, float Base); // Function Engine.KismetMathLibrary.Log // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x528a6d0
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289210
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289020
	struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52895a0
	struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289440
	struct FLinearColor LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a6b0
	struct FLinearColor LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a690
	struct FLinearColor LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a670
	struct FColor LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a5e0
	struct FLinearColor LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x528a4f0
	void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528a410
	void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528a1d0
	void LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528a380
	void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528a0f0
	void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x528a010
	void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5289e60
	void LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5289d90
	struct FLinearColor LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289d70
	struct FColor LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289ce0
	struct FColor LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289c50
	bool LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289af0
	struct FLinearColor LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289ad0
	struct FLinearColor LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289ab0
	float LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289a20
	float LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289990
	float LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52898f0
	float LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52897f0
	struct FLinearColor LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5289710
	struct FLinearColor LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52896f0
	struct FLinearColor LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52896d0
	struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288b30
	bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288800
	bool LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288a60
	bool LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288990
	bool LessEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.LessEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52888c0
	bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288800
	bool LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288740
	bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288cf0
	bool Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288f50
	bool Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288e80
	bool Less_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Less_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288db0
	bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288cf0
	bool Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288c30
	float Lerp(float A, float B, float Alpha); // Function Engine.KismetMathLibrary.Lerp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288620
	bool IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5288570
	bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52883e0
	bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52882a0
	bool IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52881a0
	bool IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52880f0
	bool IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5288060
	bool IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287fb0
	struct FTransform InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287da0
	struct FRotator InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287c50
	struct FVector InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287a50
	struct FVector InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52878b0
	struct FIntPoint IntPoint_Zero(); // Function Engine.KismetMathLibrary.IntPoint_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287880
	struct FIntPoint IntPoint_Up(); // Function Engine.KismetMathLibrary.IntPoint_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287850
	struct FIntPoint IntPoint_Right(); // Function Engine.KismetMathLibrary.IntPoint_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287830
	struct FIntPoint IntPoint_One(); // Function Engine.KismetMathLibrary.IntPoint_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287800
	struct FIntPoint IntPoint_Left(); // Function Engine.KismetMathLibrary.IntPoint_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52877d0
	struct FIntPoint IntPoint_Down(); // Function Engine.KismetMathLibrary.IntPoint_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52877a0
	bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5287600
	bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5287460
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52872b0
	float Hypotenuse(float Width, float Height); // Function Engine.KismetMathLibrary.Hypotenuse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52871e0
	struct FLinearColor HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287070
	void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5287100
	struct FLinearColor HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286ee0
	float GridSnap_Float(float Location, float GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286db0
	struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52868c0
	bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286590
	bool GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52867f0
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286720
	bool GreaterEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286650
	bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286590
	bool GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52864d0
	bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286a80
	bool Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286ce0
	bool Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286c10
	bool Greater_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Greater_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5286b40
	bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286a80
	bool Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52869c0
	int32_t GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286450
	void GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286320
	struct FVector GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286130
	struct FVector GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286090
	float GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5286000
	float GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285f70
	float GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285ee0
	float GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285e50
	float GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285dc0
	struct FTimespan GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285d40
	float GetTAU(); // Function Engine.KismetMathLibrary.GetTAU // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5285d20
	void GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285960
	int32_t GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52858a0
	int32_t GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52858a0
	struct FVector2D GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285550
	struct FVector GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52854b0
	struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52853b0
	float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285270
	float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5285130
	float GetPI(); // Function Engine.KismetMathLibrary.GetPI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5285110
	int32_t GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284fc0
	int32_t GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284f10
	int32_t GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284f10
	float GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284e90
	float GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284e10
	int32_t GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284d50
	int32_t GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284ca0
	float GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284c20
	float GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284ba0
	int32_t GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52848b0
	int32_t GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284830
	int32_t GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52848b0
	struct FVector GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284790
	struct FTimespan GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284710
	struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284530
	int32_t GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52844b0
	int32_t GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284430
	int32_t GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52843b0
	struct FDateTime GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5284320
	void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283df0
	void GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283c70
	float GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283be0
	struct FVector2D GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283b50
	float FWrap(float Value, float Min, float Max); // Function Engine.KismetMathLibrary.FWrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282d50
	struct FIntVector FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5282cb0
	int64_t FTrunc64(float A); // Function Engine.KismetMathLibrary.FTrunc64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282bb0
	int32_t FTrunc(float A); // Function Engine.KismetMathLibrary.FTrunc // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282c30
	struct FTimespan FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283ac0
	struct FTimespan FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283a30
	struct FTimespan FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52839a0
	struct FTimespan FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283910
	struct FTimespan FromDays(float Days); // Function Engine.KismetMathLibrary.FromDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283880
	float Fraction(float A); // Function Engine.KismetMathLibrary.Fraction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52837e0
	int32_t FMod(float Dividend, float Divisor, float& Remainder); // Function Engine.KismetMathLibrary.FMod // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x5282a90
	float FMin(float A, float B); // Function Engine.KismetMathLibrary.FMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52829c0
	float FMax(float A, float B); // Function Engine.KismetMathLibrary.FMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52828f0
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.FloatSpringInterp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52835b0
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5283490
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282790
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282630
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52824d0
	void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283270
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5283130
	struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5282fe0
	struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5282e90
	int64_t FFloor64(float A); // Function Engine.KismetMathLibrary.FFloor64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282380
	int32_t FFloor(float A); // Function Engine.KismetMathLibrary.FFloor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282440
	float FClamp(float Value, float Min, float Max); // Function Engine.KismetMathLibrary.FClamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282260
	int64_t FCeil64(float A); // Function Engine.KismetMathLibrary.FCeil64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52820f0
	int32_t FCeil(float A); // Function Engine.KismetMathLibrary.FCeil // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52821c0
	float Exp(float A); // Function Engine.KismetMathLibrary.Exp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5282060
	bool EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281eb0
	bool EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281d80
	bool EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281cb0
	bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281b60
	bool EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52819d0
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52818a0
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281720
	bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5280d30
	bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281530
	bool EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52813d0
	bool EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280c60
	bool EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52812f0
	bool EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281160
	bool EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281070
	bool EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280fa0
	bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280ed0
	bool EqualEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.EqualEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280df0
	bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5280d30
	bool EqualEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280c60
	bool EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280ba0
	bool EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280ac0
	bool Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5281f90
	float Ease(float A, float B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.Ease // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52808e0
	struct FVector DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5280570
	struct FRotator DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52803b0
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5280730
	float DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5280200
	float Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52802d0
	struct FVector Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52800d0
	struct FVector Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ff90
	struct FVector Divide_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Divide_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527fe50
	struct FVector4 Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527fd20
	struct FVector2D Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527fc20
	struct FVector2D Divide_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527fb00
	struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527fa30
	struct FLinearColor Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527f940
	struct FIntPoint Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527f840
	struct FIntPoint Divide_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527f740
	int32_t Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f660
	int64_t Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f570
	float Divide_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Divide_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f3c0
	char Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f2e0
	float DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527f210
	float Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527f140
	float DegTan(float A); // Function Engine.KismetMathLibrary.DegTan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f020
	float DegSin(float A); // Function Engine.KismetMathLibrary.DegSin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ef90
	float DegreesToRadians(float A); // Function Engine.KismetMathLibrary.DegreesToRadians // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527f0b0
	float DegCos(float A); // Function Engine.KismetMathLibrary.DegCos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ef00
	float DegAtan2(float Y, float X); // Function Engine.KismetMathLibrary.DegAtan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ed90
	float DegAtan(float A); // Function Engine.KismetMathLibrary.DegAtan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ee70
	float DegAsin(float A); // Function Engine.KismetMathLibrary.DegAsin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ece0
	float DegAcos(float A); // Function Engine.KismetMathLibrary.DegAcos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ec30
	int32_t DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527eba0
	int32_t DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527eab0
	struct FDateTime DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ea90
	struct FDateTime DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ea60
	bool DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e900
	bool DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e790
	float CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e5a0
	struct FVector Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e670
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e470
	float Cos(float A); // Function Engine.KismetMathLibrary.Cos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527e280
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e0f0
	struct FVector2D Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527e070
	struct FTransform Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527dfd0
	struct FRotator Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527df30
	struct FQuat Conv_VectorToQuaternion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaternion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527de90
	struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ddf0
	struct FVector Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527dd40
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527dc90
	struct FQuat Conv_Vector4ToQuaternion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527dbf0
	struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527db10
	struct FIntPoint Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527da60
	struct FMatrix Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d950
	struct FVector Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d8b0
	struct FTransform Conv_RotatorToTransform(struct FRotator& InRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d800
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d750
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d6b0
	struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d620
	struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d540
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d480
	struct FIntVector Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d3f0
	int64_t Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d370
	float Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d2e0
	char Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d260
	bool Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d1d0
	struct FVector2D Conv_IntPointToVector2D(struct FIntPoint InIntPoint); // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527d140
	int32_t Conv_Int64ToInt(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d0c0
	char Conv_Int64ToByte(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527d040
	struct FVector Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527cfb0
	struct FLinearColor Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527cf20
	struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ce90
	int32_t Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527ce10
	float Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527cd90
	int32_t Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527cd00
	float Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527cc70
	char Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527cbe0
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ca50
	struct FRotator ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527c950
	bool ClassIsChildOf(struct UObject* TestClass, struct UObject* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527c7a0
	struct FVector ClampVectorSize(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.ClampVectorSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527c5d0
	int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.ClampInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527c4c0
	float ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527c430
	struct FVector2D ClampAxes2D(struct FVector2D A, float MinAxisVal, float MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527c300
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527c1e0
	int32_t Clamp(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Clamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527c0e0
	struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527bf50
	void BreakVector4(struct FVector4& InVec, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527bbe0
	void BreakVector2D(struct FVector2D InVec, float& X, float& Y); // Function Engine.KismetMathLibrary.BreakVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527bab0
	void BreakVector(struct FVector InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527bdd0
	void BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527b890
	void BreakTimespan2(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527b430
	void BreakTimespan(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527b660
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527b130
	void BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527b2b0
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527aff0
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527ae50
	void BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x527ad20
	void BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527aa70
	void BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x527a890
	bool BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a7c0
	bool BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a6e0
	bool BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a600
	bool BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a520
	bool BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a440
	char BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a370
	char BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a2a0
	float Atan2(float Y, float X); // Function Engine.KismetMathLibrary.Atan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a140
	float Atan(float A); // Function Engine.KismetMathLibrary.Atan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a210
	float Asin(float A); // Function Engine.KismetMathLibrary.Asin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527a0a0
	int32_t And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5279fe0
	int64_t And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5279f10
	struct FVector Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279e30
	struct FVector Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279d40
	struct FVector Add_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Add_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279c60
	struct FVector4 Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279b30
	struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279a60
	struct FVector2D Add_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279990
	struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279160
	struct FQuat Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52798b0
	struct FMatrix Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279720
	struct FLinearColor Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279630
	struct FIntPoint Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Add_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279560
	struct FIntPoint Add_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279480
	int32_t Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52793c0
	int64_t Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52792f0
	float Add_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Add_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5279220
	struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279160
	struct FDateTime Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x5279160
	char Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52790a0
	float Acos(float A); // Function Engine.KismetMathLibrary.Acos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5279000
	int64_t Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5278ee0
	int32_t Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5278f70
	float Abs(float A); // Function Engine.KismetMathLibrary.Abs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5278e50
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetNodeHelperLibrary : UBlueprintFunctionLibrary {

	void MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52abfd0
	bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ab230
	bool HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ab160
	char GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ab090
	int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52aaf50
	int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52aacd0
	int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52aabd0
	char GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aab00
	struct FString GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa9e0
	struct FName GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa900
	void ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52a7a70
	void ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52a79f0
	bool BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52a61a0
};

// Class Engine.KismetRenderingLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetRenderingLibrary : UBlueprintFunctionLibrary {

	void SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52ad6e0
	struct UTexture2D* ResizeTexture(struct UTexture2D* Tex, int32_t Width, int32_t Height); // Function Engine.KismetRenderingLibrary.ResizeTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52ad130
	struct UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52acbc0
	void ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52acb40
	struct FColor ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52ac9f0
	struct FLinearColor ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52ac880
	struct FLinearColor ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52ac710
	struct FColor ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52ac5c0
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52abd50
	struct UTexture2D* ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52ab400
	struct UTexture2D* ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52ab300
	void ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52aa3b0
	void ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52aa230
	void EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52a9de0
	void DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52a9ce0
	struct UTexture2D* CropTextureTransparency(struct UTexture2D* Tex, bool bCropX, bool bCropY); // Function Engine.KismetRenderingLibrary.CropTextureTransparency // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52a9a80
	struct UTexture2D* CreateTexture2DFromRenderTarget(struct UTextureRenderTarget2D* RenderTarget); // Function Engine.KismetRenderingLibrary.CreateTexture2DFromRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52a99f0
	struct UTextureRenderTargetVolume* CreateRenderTargetVolume(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52a97e0
	struct UTextureRenderTarget2DArray* CreateRenderTarget2DArray(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52a95d0
	struct UTextureRenderTarget2D* CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52a9400
	void ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x52a9300
	void ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52a7b40
	void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52a6270
	void BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& Size, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52a5fe0
};

// Class Engine.KismetStringLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetStringLibrary : UBlueprintFunctionLibrary {

	struct FString TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ade90
	struct FString Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52adda0
	struct FString ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52adcb0
	struct FString ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52adbc0
	bool StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ada60
	bool Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ad7f0
	struct FString RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ad5a0
	struct FString RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ad460
	struct FString Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ad320
	struct FString Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ad230
	int32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52acf70
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52acd70
	struct TArray<struct FString> ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ac420
	bool NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ac200
	bool NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ac310
	struct FString Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aadd0
	bool MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ac0a0
	int32_t Len_Unicode(struct FString S, enum class EStringMeasurementUnits Units); // Function Engine.KismetStringLibrary.Len_Unicode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52abc60
	int32_t Len(struct FString S); // Function Engine.KismetStringLibrary.Len // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52abbb0
	struct FString LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aba70
	struct FString LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ab930
	struct FString Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ab7f0
	struct FString JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ab660
	bool IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ab5b0
	bool IsEmpty(struct FString inString); // Function Engine.KismetStringLibrary.IsEmpty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ab500
	struct FString GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aadd0
	int32_t GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa810
	struct TArray<struct FString> GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa710
	int32_t FindSubstring(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa530
	bool EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa010
	bool EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52aa120
	bool EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a9eb0
	int32_t CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52a9ba0
	struct FString Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a9220
	struct FString Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a9150
	struct FString Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a9020
	void Conv_StringToVector2D(struct FString inString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a8d80
	void Conv_StringToVector(struct FString inString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a8ed0
	void Conv_StringToRotator(struct FString inString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a8c30
	struct FName Conv_StringToName(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8b70
	int32_t Conv_StringToInt(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8ac0
	float Conv_StringToFloat(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8a10
	void Conv_StringToColor(struct FString inString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a88c0
	struct FString Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a87e0
	struct FString Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8700
	struct FString Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8610
	struct FString Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a8530
	struct FString Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a8450
	struct FString Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8380
	struct FString Conv_IntPointToString(struct FIntPoint InIntPoint); // Function Engine.KismetStringLibrary.Conv_IntPointToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a82b0
	struct FString Conv_FloatToString(float InFloat); // Function Engine.KismetStringLibrary.Conv_FloatToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a81d0
	struct FString Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a80f0
	struct FString Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a8020
	struct FString Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a7f40
	bool Contains(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a7da0
	struct FString Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a7c50
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a7600
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a77f0
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a7400
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a7200
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a6ff0
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a6df0
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a6bf0
	struct FString BuildString_Float(struct FString AppendTo, struct FString Prefix, float InFloat, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a69f0
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52a67f0
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52a65f0
};

// Class Engine.KismetStringTableLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetStringTableLibrary : UBlueprintFunctionLibrary {

	bool IsRegisteredTableId(struct FName TableId); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccc20
	bool IsRegisteredTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccb10
	struct FString GetTableNamespace(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetTableNamespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc760
	struct FString GetTableEntrySourceString(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc610
	struct FString GetTableEntryMetaData(struct FName TableId, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc470
	struct TArray<struct FName> GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cbff0
	struct TArray<struct FName> GetMetaDataIdsFromStringTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb150
	struct TArray<struct FString> GetKeysFromStringTable(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb060
};

// Class Engine.KismetSystemLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetSystemLibrary : UBlueprintFunctionLibrary {

	void UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be7a00
	void UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d69d0
	void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52d6930
	void TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be5840
	void StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d6910
	bool SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d6450
	bool SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d5f90
	bool SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d5ae0
	bool SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d5650
	bool SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d51c0
	bool SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d4d50
	bool SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d4ab0
	bool SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d4810
	void SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be5840
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d4770
	void ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d46f0
	void ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d46d0
	void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d4610
	void SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d4570
	void SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c6b10
	void SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d4450
	void SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d43a0
	void SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d4220
	void SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d40d0
	void SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d4010
	void SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d2f70
	void SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d3ed0
	void SetSoftObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d3d70
	void SetSoftClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d3c10
	void SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d3af0
	void SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d39d0
	void SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d38a0
	void SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d3780
	void SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d3530
	void SetInterfacePropertyByName(struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d3650
	void SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d3410
	void SetGamepadsBlockDeviceFeedback(bool bBlock); // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c6b10
	void SetFloatPropertyByName(struct UObject* Object, struct FName PropertyName, float Value); // Function Engine.KismetSystemLibrary.SetFloatPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d32f0
	void SetFieldPathPropertyByName(struct UObject* Object, struct FName PropertyName, struct TFieldPath<FField>& Value); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d31a0
	void SetColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FColor& Value); // Function Engine.KismetSystemLibrary.SetColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d3080
	void SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d2f70
	void SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d2e50
	void SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d2d30
	void SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d2c10
	void RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d2ad0
	void ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x22baef0
	void ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x51c4510
	void RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be7a00
	void QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d2980
	void PrintWarning(struct FString inString); // Function Engine.KismetSystemLibrary.PrintWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d28e0
	void PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52d26b0
	void PrintString(struct UObject* WorldContextObject, struct FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52d2490
	bool ParseParamValue(struct FString inString, struct FString InParam, struct FString& OutValue); // Function Engine.KismetSystemLibrary.ParseParamValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52d2310
	bool ParseParam(struct FString inString, struct FString InParam); // Function Engine.KismetSystemLibrary.ParseParam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d2200
	void ParseCommandLine(struct FString InCmdLine, struct TArray<struct FString>& OutTokens, struct TArray<struct FString>& OutSwitches, struct TMap<struct FString, struct FString>& OutParams); // Function Engine.KismetSystemLibrary.ParseCommandLine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52d1f70
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature // (Public|Delegate) // @ game+0x33d1d50
	void OnAssetClassLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature // (Public|Delegate) // @ game+0x33d1d50
	bool NotEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52d1e20
	bool NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52d1e20
	bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x471cb70
	bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52d1d10
	struct FString NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1c20
	void MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52d1930
	struct FSoftObjectPath MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52d1860
	struct FSoftClassPath MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52d1780
	struct FText MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1670
	struct FString MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1510
	struct FName MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1480
	int32_t MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x220b490
	float MakeLiteralFloat(float Value); // Function Engine.KismetSystemLibrary.MakeLiteralFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1400
	char MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52d1380
	bool MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x527cbe0
	void LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d1300
	struct UObject* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d1220
	void LoadAssetClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAssetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d0f50
	struct UObject* LoadAsset_Blocking(struct TSoftObjectPtr<UObject> Asset); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d1140
	void LoadAsset(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52d0d60
	bool LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d08e0
	bool LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d0460
	bool LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52d0000
	bool LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52cfbb0
	bool LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52cf770
	bool LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52cf360
	void LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cf2c0
	void K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cf200
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cf160
	void K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cf020
	bool K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cef50
	bool K2_TimerExistsDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ceea0
	bool K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ced60
	struct FTimerHandle K2_SetTimerDelegate(struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ceba0
	struct FTimerHandle K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ce930
	void K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ce870
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ce7d0
	void K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ce690
	bool K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce600
	bool K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce530
	bool K2_IsTimerPausedDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce480
	bool K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce340
	bool K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce270
	bool K2_IsTimerActiveDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce1c0
	bool K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ce080
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52cdfe0
	float K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cdf10
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cde60
	float K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cdd20
	float K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cdc50
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cdba0
	float K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cda60
	void K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cd9a0
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cd900
	void K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cd7c0
	void K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52cd6f0
	bool IsValidSoftObjectReference(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52cd620
	bool IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52cd620
	bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cd580
	bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cd4d0
	bool IsValidClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.IsValidClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccea0
	bool IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccea0
	bool IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cce70
	bool IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccde0
	bool IsSplitScreen(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsSplitScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ccd50
	bool IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cccc0
	bool IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x20008b0
	bool IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2be6dd0
	bool IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cca80
	bool IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cca50
	bool IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cca20
	bool IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc990
	bool IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc900
	void HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cc8e0
	bool GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2be6dd0
	struct FString GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc850
	struct FString GetSystemPath(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetSystemPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc390
	bool GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52cc2e0
	struct TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cc1e0
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cc0e0
	int32_t GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc0b0
	int32_t GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cc080
	struct FString GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cbf60
	struct FString GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cbed0
	struct FString GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cbe40
	void GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52cbc10
	void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52cbb10
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<UObject> SoftObjectReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cba10
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cb910
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cb860
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cb7b0
	struct TArray<struct FString> GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cb720
	struct FString GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb690
	struct FString GetPlatformUserDir(); // Function Engine.KismetSystemLibrary.GetPlatformUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb600
	struct FString GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb520
	struct UObject* GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb490
	struct FString GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb3b0
	struct UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52cb300
	int32_t GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb2d0
	int32_t GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cb2a0
	struct FString GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cab50
	struct FString GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52cab50
	float GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x5204610
	struct FString GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52caf90
	struct UTexture2D* GetGamepadButtonGlyph(struct FString ButtonKey, int32_t ControllerIndex); // Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52caea0
	struct FString GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cae10
	struct FString GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cad80
	int64_t GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cad50
	struct FString GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cacc0
	struct FString GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cabe0
	struct FString GetDeviceId(); // Function Engine.KismetSystemLibrary.GetDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52cab50
	struct FString GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52caac0
	struct FString GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52caa30
	bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52ca8d0
	bool GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52ca820
	int32_t GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ca770
	float GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ca6c0
	bool GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ca610
	void GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52ca4a0
	struct FString GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52ca410
	struct UObject* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52ca360
	struct FString GetClassDisplayName(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ca280
	int32_t GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ca250
	void GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52ca0f0
	void GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c9fd0
	void ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c9fb0
	void FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be5840
	void FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be5840
	struct FString ExecuteConsoleCommandWithRetVal(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommandWithRetVal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c9e30
	void ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c9d00
	bool EqualEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c9bb0
	bool EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c9bb0
	bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x471b170
	bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c9aa0
	int32_t EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be6160
	void DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c9890
	void DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c9660
	void DrawDebugPoint(struct UObject* WorldContextObject, struct FVector Position, float Size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c94c0
	void DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c92d0
	void DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c90d0
	void DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c8ed0
	void DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c8c60
	void DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c8a30
	void DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c87b0
	void DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c85c0
	void DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c82b0
	void DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c82b0
	void DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c7f90
	void DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c7d10
	void DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c7c00
	void DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c79b0
	void DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x52c7770
	bool DoesImplementInterface(struct UObject* TestObject, struct UInterface* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52c76a0
	void Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c7560
	void CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2be5840
	struct FString ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52c7470
	struct FString ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52c7380
	struct TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c71b0
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c70a0
	struct UObject* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<UObject>& SoftObject); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c72b0
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c70a0
	struct UObject* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c6fd0
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c6ed0
	struct FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x471b5b0
	struct FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c6de0
	struct TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52c6d10
	struct UObject* Conv_InterfaceToObject(struct TScriptInterface<IInterface>& Interface); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c6c70
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(struct UObject*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52c6b90
	void ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c6b10
	bool ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c6870
	bool ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c65d0
	void CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c65b0
	bool CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c60a0
	bool CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c5b90
	bool CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c56a0
	bool CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c51c0
	bool CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c4cf0
	bool CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c4830
	bool CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c4550
	bool CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c4270
	bool CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c41c0
	void CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x22baef0
	void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c4080
	void BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52c4080
	bool BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c3b50
	bool BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c3620
	bool BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c3110
	bool BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c2c20
	bool BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c2730
	bool BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c2260
	bool BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c1fb0
	bool BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52c1d00
	int32_t BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c1ba0
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x52c1a20
};

// Class Engine.KismetTextLibrary
// Size: 0x30 (Inherited: 0x30)
struct UKismetTextLibrary : UBlueprintFunctionLibrary {

	struct FText TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52de2e0
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52de200
	struct FText TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52de120
	struct FText TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52de040
	struct FText TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ddf60
	bool TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ddeb0
	bool TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dde00
	bool TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ddd50
	bool TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52ddca0
	struct FText TextFromStringTable(struct FName TableId, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52ddb60
	bool StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd9e0
	struct FText PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd890
	bool NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd770
	bool NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd650
	void IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd480
	struct FText GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dd410
	struct FText Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dd1f0
	bool FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dd080
	bool EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dcf60
	bool EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dce40
	struct FText Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dcd70
	struct FText Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dccc0
	struct FText Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dcba0
	struct FString Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x52dcab0
	struct FText Conv_StringToText(struct FString inString); // Function Engine.KismetTextLibrary.Conv_StringToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc9d0
	struct FText Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dc900
	struct FText Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc840
	struct FText Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc760
	struct FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc560
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc360
	struct FText Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_FloatToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dc0b0
	struct FText Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dbff0
	struct FText Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dbf30
	struct FText Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dbe70
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dbb90
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52db910
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dba50
	struct FText AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dbda0
	struct FText AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52dbcd0
	struct FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52db660
	struct FText AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52db4c0
	struct FText AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x52db590
	struct FText AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52dad90
	struct FText AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52db1c0
	struct FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52daeb0
};

// Class Engine.Layer
// Size: 0x50 (Inherited: 0x30)
struct ULayer : UObject {
	struct FName LayerName; // 0x30(0x0c)
	char bIsVisible : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x40(0x10)
};

// Class Engine.LevelPartitionInterface
// Size: 0x30 (Inherited: 0x30)
struct ULevelPartitionInterface : UInterface {
};

// Class Engine.Level
// Size: 0x2a0 (Inherited: 0x30)
struct ULevel : UObject {
	char pad_30[0x90]; // 0x30(0x90)
	struct UWorld* OwningWorld; // 0xc0(0x08)
	struct UModel* Model; // 0xc8(0x08)
	struct TArray<struct UModelComponent*> ModelComponents; // 0xd0(0x10)
	struct ULevelActorContainer* ActorCluster; // 0xe0(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe8(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xec(0x04)
	struct ALevelScriptActor* LevelScriptActor; // 0xf0(0x08)
	struct ANavigationObjectBase* NavListStart; // 0xf8(0x08)
	struct ANavigationObjectBase* NavListEnd; // 0x100(0x08)
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x108(0x10)
	float LightmapTotalSize; // 0x118(0x04)
	float ShadowmapTotalSize; // 0x11c(0x04)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x120(0x10)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x130(0x10)
	char pad_140[0x98]; // 0x140(0x98)
	struct FGuid LevelBuildDataId; // 0x1d8(0x10)
	struct UMapBuildDataRegistry* MapBuildData; // 0x1e8(0x08)
	struct FIntVector LightBuildLevelOffset; // 0x1f0(0x0c)
	char bIsLightingScenario : 1; // 0x1fc(0x01)
	char pad_1FC_1 : 2; // 0x1fc(0x01)
	char bExcludeFromCommandletLightBuild : 1; // 0x1fc(0x01)
	char bTextureStreamingRotationChanged : 1; // 0x1fc(0x01)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x1fc(0x01)
	char bIsVisible : 1; // 0x1fc(0x01)
	char pad_1FC_7 : 1; // 0x1fc(0x01)
	char pad_1FD[0x63]; // 0x1fd(0x63)
	struct AWorldSettings* WorldSettings; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x270(0x10)
	char pad_280[0x10]; // 0x280(0x10)
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x290(0x10)
};

// Class Engine.LevelActorContainer
// Size: 0x40 (Inherited: 0x30)
struct ULevelActorContainer : UObject {
	struct TArray<struct AActor*> Actors; // 0x30(0x10)
};

// Class Engine.LevelBounds
// Size: 0x3e0 (Inherited: 0x3d0)
struct ALevelBounds : AActor {
	struct UBoxComponent* BoxComponent; // 0x3d0(0x08)
	bool bAutoUpdateBounds; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
};

// Class Engine.LevelScriptActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ALevelScriptActor : AActor {
	char bInputEnabled : 1; // 0x3d0(0x01)
	char pad_3D0_1 : 7; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x33d1d50
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x52e3900
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent // (Native|Public|BlueprintCallable) // @ game+0x52e3380
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x33d1d50
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa8 (Inherited: 0xa8)
struct ULevelScriptBlueprint : UBlueprint {
};

// Class Engine.LevelStreaming
// Size: 0x160 (Inherited: 0x30)
struct ULevelStreaming : UObject {
	struct TSoftObjectPtr<UWorld> WorldAsset; // 0x30(0x30)
	struct FName PackageNameToLoad; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct TArray<struct FName> LODPackageNames; // 0x70(0x10)
	char pad_80[0x10]; // 0x80(0x10)
	struct FTransform LevelTransform; // 0x90(0x30)
	int32_t LevelLODIndex; // 0xc0(0x04)
	int32_t StreamingPriority; // 0xc4(0x04)
	char pad_C8[0x2]; // 0xc8(0x02)
	char pad_CA_0 : 3; // 0xca(0x01)
	char bShouldBeVisible : 1; // 0xca(0x01)
	char bShouldBeLoaded : 1; // 0xca(0x01)
	char bLocked : 1; // 0xca(0x01)
	char bIsStatic : 1; // 0xca(0x01)
	char bShouldBlockOnLoad : 1; // 0xca(0x01)
	char bShouldBlockOnUnload : 1; // 0xcb(0x01)
	char bDisableDistanceStreaming : 1; // 0xcb(0x01)
	char bDrawOnLevelStatusMap : 1; // 0xcb(0x01)
	char pad_CB_3 : 5; // 0xcb(0x01)
	struct FLinearColor LevelColor; // 0xcc(0x10)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes; // 0xe0(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x108(0x10)
	struct FMulticastInlineDelegate OnLevelShown; // 0x118(0x10)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x128(0x10)
	struct ULevel* LoadedLevel; // 0x138(0x08)
	struct ULevel* PendingUnloadLevel; // 0x140(0x08)
	char pad_148[0x18]; // 0x148(0x18)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac020
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x52e47c0
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded // (Native|Public|BlueprintCallable) // @ game+0x520ffc0
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x52e4630
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3f40
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable) // @ game+0x52e3eb0
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2e30
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2e00
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2dd0
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2d60
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2d40
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x52e2cd0
	bool GetIsRequestingUnloadAndRemoval(); // Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52e2ca0
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x52e2bb0
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingAlwaysLoaded : ULevelStreaming {
};

// Class Engine.LevelStreamingDynamic
// Size: 0x170 (Inherited: 0x160)
struct ULevelStreamingDynamic : ULevelStreaming {
	char bInitiallyLoaded : 1; // 0x160(0x01)
	char bInitiallyVisible : 1; // 0x160(0x01)
	char pad_160_2 : 6; // 0x160(0x01)
	char pad_161[0xf]; // 0x161(0x0f)

	struct ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52e30f0
	struct ULevelStreamingDynamic* LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride); // Function Engine.LevelStreamingDynamic.LoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x52e2e60
};

// Class Engine.LevelStreamingPersistent
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingPersistent : ULevelStreaming {
};

// Class Engine.LevelStreamingVolume
// Size: 0x420 (Inherited: 0x408)
struct ALevelStreamingVolume : AVolume {
	struct TArray<struct FName> StreamingLevelNames; // 0x408(0x10)
	char bEditorPreVisOnly : 1; // 0x418(0x01)
	char bDisabled : 1; // 0x418(0x01)
	char pad_418_2 : 6; // 0x418(0x01)
	char pad_419[0x3]; // 0x419(0x03)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x48 (Inherited: 0x30)
struct ULightmappedSurfaceCollection : UObject {
	struct UModel* SourceModel; // 0x30(0x08)
	struct TArray<int32_t> Surfaces; // 0x38(0x10)
};

// Class Engine.LightMapTexture2D
// Size: 0x120 (Inherited: 0x118)
struct ULightMapTexture2D : UTexture2D {
	char pad_118[0x8]; // 0x118(0x08)
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0x130 (Inherited: 0x118)
struct ULightMapVirtualTexture2D : UTexture2D {
	struct TArray<int8_t> TypeToLayer; // 0x118(0x10)
	char pad_128[0x8]; // 0x128(0x08)
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x408 (Inherited: 0x408)
struct ALightmassCharacterIndirectDetailVolume : AVolume {
};

// Class Engine.LightmassImportanceVolume
// Size: 0x410 (Inherited: 0x408)
struct ALightmassImportanceVolume : AVolume {
	bool bEnabled; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
};

// Class Engine.LightmassPortal
// Size: 0x3d8 (Inherited: 0x3d0)
struct ALightmassPortal : AActor {
	struct ULightmassPortalComponent* PortalComponent; // 0x3d0(0x08)
};

// Class Engine.LightmassPortalComponent
// Size: 0x290 (Inherited: 0x290)
struct ULightmassPortalComponent : USceneComponent {
	struct UBoxComponent* PreviewBox; // 0x288(0x08)
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x50 (Inherited: 0x30)
struct ULightmassPrimitiveSettingsObject : UObject {
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x30(0x1c)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.LineBatchComponent
// Size: 0x590 (Inherited: 0x550)
struct ULineBatchComponent : UPrimitiveComponent {
	char pad_550[0x40]; // 0x550(0x40)
};

// Class Engine.LocalLightComponent
// Size: 0x3e0 (Inherited: 0x3d0)
struct ULocalLightComponent : ULightComponent {
	enum class ELightUnits IntensityUnits; // 0x3c8(0x01)
	float Radius; // 0x3cc(0x04)
	float AttenuationRadius; // 0x3d0(0x04)
	struct FLightmassPointLightSettings LightmassSettings; // 0x3d4(0x0c)

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // @ game+0x52eb1e0
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x52eaf20
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x52eacf0
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x38 (Inherited: 0x38)
struct ULocalPlayerSubsystem : USubsystem {
};

// Class Engine.LODActor
// Size: 0x460 (Inherited: 0x3d0)
struct ALODActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x3d0(0x08)
	struct TMap<struct UMaterialInterface*, struct UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents; // 0x3d8(0x50)
	struct UHLODProxy* Proxy; // 0x428(0x08)
	struct FName Key; // 0x430(0x0c)
	float LODDrawDistance; // 0x43c(0x04)
	int32_t LODLevel; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct TArray<struct AActor*> SubActors; // 0x448(0x10)
	char CachedNumHLODLevels; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
};

// Class Engine.LODSyncComponent
// Size: 0x178 (Inherited: 0xe8)
struct ULODSyncComponent : UActorComponent {
	int32_t NumLODs; // 0xe8(0x04)
	int32_t ForcedLOD; // 0xec(0x04)
	struct TArray<struct FComponentSync> ComponentsToSync; // 0xf0(0x10)
	struct TMap<struct FName, struct FLODMappingData> CustomLODMapping; // 0x100(0x50)
	int32_t CurrentLOD; // 0x150(0x04)
	int32_t CurrentNumLODs; // 0x154(0x04)
	struct TArray<struct UPrimitiveComponent*> DriveComponents; // 0x158(0x10)
	struct TArray<struct UPrimitiveComponent*> SubComponents; // 0x168(0x10)

	struct FString GetLODSyncDebugText(); // Function Engine.LODSyncComponent.GetLODSyncDebugText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x52eac20
};

// Class Engine.LODSyncInterface
// Size: 0x30 (Inherited: 0x30)
struct ULODSyncInterface : UInterface {
};

// Class Engine.MapBuildDataRegistry
// Size: 0x240 (Inherited: 0x30)
struct UMapBuildDataRegistry : UObject {
	enum class ELightingBuildQuality LevelLightingQuality; // 0x30(0x01)
	char pad_31[0x20f]; // 0x31(0x20f)
};

// Class Engine.Material
// Size: 0x540 (Inherited: 0xa8)
struct UMaterial : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0xa8(0x08)
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0xb0(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xb8(0x40)
	struct FScalarMaterialInput Metallic; // 0xf8(0x10)
	char pad_108[0xc]; // 0x108(0x0c)
	struct FScalarMaterialInput Specular; // 0x114(0x10)
	char pad_124[0xc]; // 0x124(0x0c)
	struct FScalarMaterialInput Anisotropy; // 0x130(0x10)
	char pad_140[0xc]; // 0x140(0x0c)
	struct FVectorMaterialInput Normal; // 0x14c(0x10)
	char pad_15C[0xc]; // 0x15c(0x0c)
	struct FVectorMaterialInput Tangent; // 0x168(0x10)
	char pad_178[0xc]; // 0x178(0x0c)
	struct FColorMaterialInput EmissiveColor; // 0x184(0x10)
	char pad_194[0xc]; // 0x194(0x0c)
	enum class EMaterialDomain MaterialDomain; // 0x1a0(0x01)
	enum class EBlendMode BlendMode; // 0x1a1(0x01)
	enum class EDecalBlendMode DecalBlendMode; // 0x1a2(0x01)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0x1a3(0x01)
	enum class EMaterialShadingModel ShadingModel; // 0x1a4(0x01)
	char bCastDynamicShadowAsMasked : 1; // 0x1a5(0x01)
	char pad_1A5_1 : 7; // 0x1a5(0x01)
	struct FMaterialShadingModelField ShadingModels; // 0x1a6(0x02)
	float OpacityMaskClipValue; // 0x1a8(0x04)
	struct FVectorMaterialInput WorldPositionOffset; // 0x1ac(0x10)
	char pad_1BC[0xc]; // 0x1bc(0x0c)
	struct FScalarMaterialInput Refraction; // 0x1c8(0x10)
	char pad_1D8[0x10]; // 0x1d8(0x10)
	struct FMaterialAttributesInput MaterialAttributes; // 0x1e8(0x18)
	char pad_200[0x10]; // 0x200(0x10)
	struct FScalarMaterialInput PixelDepthOffset; // 0x210(0x10)
	char pad_220[0xc]; // 0x220(0x0c)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x22c(0x10)
	char pad_23C[0xc]; // 0x23c(0x0c)
	char bEnableSeparateTranslucency : 1; // 0x248(0x01)
	char bEnableResponsiveAA : 1; // 0x248(0x01)
	char bScreenSpaceReflections : 1; // 0x248(0x01)
	char bContactShadows : 1; // 0x248(0x01)
	char TwoSided : 1; // 0x248(0x01)
	char DitheredLODTransition : 1; // 0x248(0x01)
	char DitherOpacityMask : 1; // 0x248(0x01)
	char bAllowNegativeEmissiveColor : 1; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float IndirectLightingContributionValue; // 0x24c(0x04)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x250(0x01)
	char bEnableMobileSeparateTranslucency : 1; // 0x251(0x01)
	char pad_251_1 : 7; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	int32_t NumCustomizedUVs; // 0x254(0x04)
	float TranslucencyDirectionalLightingIntensity; // 0x258(0x04)
	float TranslucentShadowDensityScale; // 0x25c(0x04)
	float TranslucentSelfShadowDensityScale; // 0x260(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x264(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x268(0x04)
	float TranslucentBackscatteringExponent; // 0x26c(0x04)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x270(0x10)
	float TranslucentShadowStartOffset; // 0x280(0x04)
	char bDisableDepthTest : 1; // 0x284(0x01)
	char bWriteOnlyAlpha : 1; // 0x284(0x01)
	char bGenerateSphericalParticleNormals : 1; // 0x284(0x01)
	char bTangentSpaceNormal : 1; // 0x284(0x01)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x284(0x01)
	char bBlockGI : 1; // 0x284(0x01)
	char bUsedAsSpecialEngineMaterial : 1; // 0x284(0x01)
	char bUsedWithSkeletalMesh : 1; // 0x284(0x01)
	char bUsedWithEditorCompositing : 1; // 0x285(0x01)
	char bUsedWithParticleSprites : 1; // 0x285(0x01)
	char bUsedWithBeamTrails : 1; // 0x285(0x01)
	char bUsedWithMeshParticles : 1; // 0x285(0x01)
	char bUsedWithNiagaraSprites : 1; // 0x285(0x01)
	char bUsedWithNiagaraRibbons : 1; // 0x285(0x01)
	char bUsedWithNiagaraMeshParticles : 1; // 0x285(0x01)
	char bUsedWithGeometryCache : 1; // 0x285(0x01)
	char bUsedWithStaticLighting : 1; // 0x286(0x01)
	char bUsedWithMorphTargets : 1; // 0x286(0x01)
	char bUsedWithSplineMeshes : 1; // 0x286(0x01)
	char bUsedWithInstancedStaticMeshes : 1; // 0x286(0x01)
	char bUsedWithGeometryCollections : 1; // 0x286(0x01)
	char bUsesDistortion : 1; // 0x286(0x01)
	char bUsedWithClothing : 1; // 0x286(0x01)
	char pad_286_7 : 1; // 0x286(0x01)
	char pad_287[0x1]; // 0x287(0x01)
	char bUsedWithWater : 1; // 0x288(0x01)
	char bUsedWithHairStrands : 1; // 0x288(0x01)
	char bUsedWithLidarPointCloud : 1; // 0x288(0x01)
	char bUsedWithVirtualHeightfieldMesh : 1; // 0x288(0x01)
	char pad_288_4 : 4; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	char bUsedWithUI : 1; // 0x28c(0x01)
	char bAutomaticallySetUsageInEditor : 1; // 0x28c(0x01)
	char bFullyRough : 1; // 0x28c(0x01)
	char bUseFullPrecision : 1; // 0x28c(0x01)
	char bUseLightmapDirectionality : 1; // 0x28c(0x01)
	char bUseAlphaToCoverage : 1; // 0x28c(0x01)
	char pad_28C_6 : 2; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	char bUseHQForwardReflections : 1; // 0x294(0x01)
	char bUsePlanarForwardReflections : 1; // 0x294(0x01)
	char bNormalCurvatureToRoughness : 1; // 0x294(0x01)
	char pad_294_3 : 5; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	char bWorldScaledTextureCoordinates : 1; // 0x298(0x01)
	char bForceDepthPrepass : 1; // 0x298(0x01)
	char bFloorOnlyDecal : 1; // 0x298(0x01)
	char pad_298_3 : 5; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	enum class EMaterialLightingSource LightingSource; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	char bLightingSourceUpgradeRequired : 1; // 0x2a0(0x01)
	char bTranslucencyDepthModeUpgradeRequired : 1; // 0x2a0(0x01)
	char pad_2A0_2 : 6; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	enum class EMaterialLightingSourceColor LightingSourceColor; // 0x2a4(0x01)
	enum class EMaterialLightingSourceDirectionality LightingSourceDirectionality; // 0x2a5(0x01)
	enum class EMaterialSpecularModel SpecularModel; // 0x2a6(0x01)
	enum class EMaterialCubemapMode CubemapMode; // 0x2a7(0x01)
	enum class EMaterialCubemapSource CubemapSource; // 0x2a8(0x01)
	enum class EMaterialAresEnvironmentType AresEnvironmentType; // 0x2a9(0x01)
	char pad_2AA[0x2]; // 0x2aa(0x02)
	int32_t SortPriorityOffset; // 0x2ac(0x04)
	bool bTranslucencyWritingDepth; // 0x2b0(0x01)
	enum class EAresTranslucencyDepthMode TranslucencyDepthMode; // 0x2b1(0x01)
	bool bFresnel; // 0x2b2(0x01)
	bool bDecalDiffuseLighting; // 0x2b3(0x01)
	bool bVertexFog; // 0x2b4(0x01)
	bool bUseAres3PClipping; // 0x2b5(0x01)
	enum class EMaterialTessellationMode D3D11TessellationMode; // 0x2b6(0x01)
	char bEnableCrackFreeDisplacement : 1; // 0x2b7(0x01)
	char bEnableAdaptiveTessellation : 1; // 0x2b7(0x01)
	char AllowTranslucentCustomDepthWrites : 1; // 0x2b7(0x01)
	char Wireframe : 1; // 0x2b7(0x01)
	char pad_2B7_4 : 4; // 0x2b7(0x01)
	enum class EMaterialShadingRate ShadingRate; // 0x2b8(0x01)
	char bCanMaskedBeAssumedOpaque : 1; // 0x2b9(0x01)
	char bIsMasked : 1; // 0x2b9(0x01)
	char bIsPreviewMaterial : 1; // 0x2b9(0x01)
	char bIsFunctionPreviewMaterial : 1; // 0x2b9(0x01)
	char bUseMaterialAttributes : 1; // 0x2b9(0x01)
	char bCastRayTracedShadows : 1; // 0x2b9(0x01)
	char bUseTranslucencyVertexFog : 1; // 0x2b9(0x01)
	char bApplyCloudFogging : 1; // 0x2b9(0x01)
	char bIsSky : 1; // 0x2ba(0x01)
	char bComputeFogPerPixel : 1; // 0x2ba(0x01)
	char bOutputTranslucentVelocity : 1; // 0x2ba(0x01)
	char bAllowDevelopmentShaderCompile : 1; // 0x2ba(0x01)
	char bIsMaterialEditorStatsMaterial : 1; // 0x2ba(0x01)
	char pad_2BA_5 : 3; // 0x2ba(0x01)
	enum class EBlendableLocation BlendableLocation; // 0x2bb(0x01)
	char BlendableOutputAlpha : 1; // 0x2bc(0x01)
	char bEnableStencilTest : 1; // 0x2bc(0x01)
	char pad_2BC_2 : 6; // 0x2bc(0x01)
	enum class EMaterialStencilCompare StencilCompare; // 0x2bd(0x01)
	char StencilRefValue; // 0x2be(0x01)
	enum class ERefractionMode RefractionMode; // 0x2bf(0x01)
	int32_t BlendablePriority; // 0x2c0(0x04)
	char bIsBlendable : 1; // 0x2c4(0x01)
	char pad_2C4_1 : 7; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	uint32_t UsageFlagWarnings; // 0x2c8(0x04)
	float RefractionDepthBias; // 0x2cc(0x04)
	struct FGuid StateId; // 0x2d0(0x10)
	float MaxDisplacement; // 0x2e0(0x04)
	char pad_2E4[0x34]; // 0x2e4(0x34)
	struct FMaterialCachedExpressionData CachedExpressionData; // 0x318(0x228)
};

// Class Engine.MaterialBillboardComponent
// Size: 0x560 (Inherited: 0x550)
struct UMaterialBillboardComponent : UPrimitiveComponent {
	struct TArray<struct FMaterialSpriteElement> Elements; // 0x548(0x10)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x52f2640
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x52f2450
};

// Class Engine.MaterialExpressionAbs
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionAbs : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionActorPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionAdd
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionAdd : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0xa0 (Inherited: 0x98)
struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D {
	float Threshold; // 0x98(0x04)
	enum class ETextureColorChannel Channel; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionAppendVector : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionArccosine
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArccosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArccosineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionArcsine
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArcsine : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArcsineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionArctangent
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArctangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionArctangent2 : UMaterialExpression {
	struct FExpressionInput Y; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput X; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionArctangent2Fast : UMaterialExpression {
	struct FExpressionInput Y; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput X; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionArctangentFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionAresCubemapSampler
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionAresCubemapSampler : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput MipValue; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionAresLightDirection
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionAresLightDirection : UMaterialExpression {
};

// Class Engine.MaterialExpressionAresLightProbe
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionAresLightProbe : UMaterialExpression {
};

// Class Engine.MaterialExpressionAresStencil
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionAresStencil : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class EAresStencilMode AresStencilMode; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionAtmosphericLightColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionAtmosphericLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionBlackBody : UMaterialExpression {
	struct FExpressionInput Temp; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0xb8 (Inherited: 0x48)
struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput A; // 0x48(0x18)
	char pad_60[0x10]; // 0x60(0x10)
	struct FMaterialAttributesInput B; // 0x70(0x18)
	char pad_88[0x10]; // 0x88(0x10)
	struct FExpressionInput Alpha; // 0x98(0x10)
	char pad_A8[0xc]; // 0xa8(0x0c)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0xb4(0x01)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x48(0x18)
	char pad_60[0x10]; // 0x60(0x10)
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionBumpOffset : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Height; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput HeightRatioInput; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float HeightRatio; // 0x9c(0x04)
	float ReferencePlane; // 0xa0(0x04)
	uint32_t ConstCoordinate; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionCameraPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionCameraVectorWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCeil
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionCeil : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionParameter
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionParameter : UMaterialExpression {
	struct FName ParameterName; // 0x48(0x0c)
	struct FGuid ExpressionGUID; // 0x54(0x10)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x80 (Inherited: 0x68)
struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter {
	struct FLinearColor DefaultValue; // 0x68(0x10)
	bool bUseCustomPrimitiveData; // 0x78(0x01)
	char PrimitiveDataIndex; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x88 (Inherited: 0x80)
struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter {
	enum class EChannelMaskParameterColor MaskChannel; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.MaterialExpressionClamp
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionClamp : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Min; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Max; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	enum class EClampMode ClampMode; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	float MinDefault; // 0xa0(0x04)
	float MaxDefault; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionCloudSampleAttribute
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionCloudSampleAttribute : UMaterialExpression {
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionCollectionParameter : UMaterialExpression {
	struct UMaterialParameterCollection* Collection; // 0x48(0x08)
	struct FName ParameterName; // 0x50(0x0c)
	struct FGuid ParameterId; // 0x5c(0x10)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionComment
// Size: 0x78 (Inherited: 0x48)
struct UMaterialExpressionComment : UMaterialExpression {
	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	struct FString Text; // 0x50(0x10)
	struct FLinearColor CommentColor; // 0x60(0x10)
	int32_t FontSize; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionComponentMask : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	char R : 1; // 0x64(0x01)
	char G : 1; // 0x64(0x01)
	char B : 1; // 0x64(0x01)
	char A : 1; // 0x64(0x01)
	char pad_64_4 : 4; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.MaterialExpressionConstant
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionConstant : UMaterialExpression {
	float R; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionConstant2Vector : UMaterialExpression {
	float R; // 0x48(0x04)
	float G; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0x58 (Inherited: 0x48)
struct UMaterialExpressionConstant3Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x48(0x10)
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0x58 (Inherited: 0x48)
struct UMaterialExpressionConstant4Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x48(0x10)
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionConstantBiasScale : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float Bias; // 0x64(0x04)
	float Scale; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionCosine
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionCosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float Period; // 0x64(0x04)
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionCrossProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0x70 (Inherited: 0x68)
struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter {
	float DefaultValue; // 0x68(0x04)
	bool bUseCustomPrimitiveData; // 0x6c(0x01)
	char PrimitiveDataIndex; // 0x6d(0x01)
	char pad_6E[0x2]; // 0x6e(0x02)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0xa0 (Inherited: 0x70)
struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter {
	struct UCurveLinearColor* Curve; // 0x70(0x08)
	struct UCurveLinearColorAtlas* Atlas; // 0x78(0x08)
	struct FExpressionInput InputTime; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)
};

// Class Engine.MaterialExpressionCustom
// Size: 0xb0 (Inherited: 0x48)
struct UMaterialExpressionCustom : UMaterialExpression {
	struct FString Code; // 0x48(0x10)
	enum class ECustomMaterialOutputType OutputType; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FString Description; // 0x60(0x10)
	struct TArray<struct FCustomInput> Inputs; // 0x70(0x10)
	struct TArray<struct FCustomOutput> AdditionalOutputs; // 0x80(0x10)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0x90(0x10)
	struct TArray<struct FString> IncludeFilePaths; // 0xa0(0x10)
};

// Class Engine.MaterialExpressionDDX
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDDX : UMaterialExpression {
	struct FExpressionInput Value; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionDDY
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDDY : UMaterialExpression {
	struct FExpressionInput Value; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	bool bNonTextureDerivative; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionDecalDerivative : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression {
	struct FExpressionInput TextureSize; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float ConstWidth; // 0x64(0x04)
	float ConstHeight; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionDeltaTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionDepthFade : UMaterialExpression {
	struct FExpressionInput InOpacity; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput FadeDistance; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput DepthOffset; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float OpacityDefault; // 0x9c(0x04)
	float FadeDistanceDefault; // 0xa0(0x04)
	float DepthOffsetDefault; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression {
	enum class EDepthOfFieldFunctionValue FunctionValue; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Depth; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDeriveNormalZ : UMaterialExpression {
	struct FExpressionInput InXY; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x90 (Inherited: 0x48)
struct UMaterialExpressionDesaturation : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Fraction; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FLinearColor LuminanceFactors; // 0x80(0x10)
};

// Class Engine.MaterialExpressionDistance
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionDistance : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionDistanceCullFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression {
	struct FExpressionInput Position; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression {
	struct FExpressionInput Position; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionDivide
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionDivide : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionDotProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionDynamicParameter : UMaterialExpression {
	struct TArray<struct FString> ParamNames; // 0x48(0x10)
	struct FLinearColor DefaultValue; // 0x58(0x10)
	uint32_t ParameterIndex; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionEyeAdaptation : UMaterialExpression {
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionFloor
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionFloor : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionFmod
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionFmod : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionFontSample
// Size: 0x58 (Inherited: 0x48)
struct UMaterialExpressionFontSample : UMaterialExpression {
	struct UFont* Font; // 0x48(0x08)
	int32_t FontTexturePage; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0x80 (Inherited: 0x58)
struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample {
	struct FName ParameterName; // 0x58(0x0c)
	struct FGuid ExpressionGUID; // 0x64(0x10)
	struct FName Group; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionFrac
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionFrac : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionFresnel
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionFresnel : UMaterialExpression {
	struct FExpressionInput ExponentIn; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float Exponent; // 0x64(0x04)
	struct FExpressionInput BaseReflectFractionIn; // 0x68(0x10)
	char pad_78[0xc]; // 0x78(0x0c)
	float BaseReflectFraction; // 0x84(0x04)
	struct FExpressionInput Normal; // 0x88(0x10)
	char pad_98[0x10]; // 0x98(0x10)
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0xe0 (Inherited: 0x48)
struct UMaterialExpressionFunctionInput : UMaterialExpression {
	struct FExpressionInput Preview; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FName InputName; // 0x64(0x0c)
	struct FString Description; // 0x70(0x10)
	struct FGuid ID; // 0x80(0x10)
	enum class EFunctionInputType InputType; // 0x90(0x01)
	char pad_91[0xf]; // 0x91(0x0f)
	struct FVector4 PreviewValue; // 0xa0(0x10)
	char bUsePreviewValueAsDefault : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t SortPriority; // 0xb4(0x04)
	char bCompilingFunctionPreview : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x27]; // 0xb9(0x27)
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0xa0 (Inherited: 0x48)
struct UMaterialExpressionFunctionOutput : UMaterialExpression {
	struct FName OutputName; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
	struct FString Description; // 0x58(0x10)
	int32_t SortPriority; // 0x68(0x04)
	struct FExpressionInput A; // 0x6c(0x10)
	char pad_7C[0xc]; // 0x7c(0x0c)
	char bLastPreviewed : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	struct FGuid ID; // 0x8c(0x10)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x48(0x18)
	char pad_60[0x10]; // 0x60(0x10)
	struct TArray<struct FGuid> AttributeGetTypes; // 0x70(0x10)
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0xa0 (Inherited: 0x48)
struct UMaterialExpressionGIReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput StaticIndirect; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput DynamicIndirect; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionHairAttributes : UMaterialExpression {
	char bUseTangentSpace : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.MaterialExpressionHairColor
// Size: 0xa0 (Inherited: 0x48)
struct UMaterialExpressionHairColor : UMaterialExpression {
	struct FExpressionInput Melanin; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Redness; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput DyeColor; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)
};

// Class Engine.MaterialExpressionIf
// Size: 0xe0 (Inherited: 0x48)
struct UMaterialExpressionIf : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput AGreaterThanB; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput AEqualsB; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	struct FExpressionInput ALessThanB; // 0xb8(0x10)
	char pad_C8[0xc]; // 0xc8(0x0c)
	float EqualsThreshold; // 0xd4(0x04)
	float ConstB; // 0xd8(0x04)
	float ConstAEqualsB; // 0xdc(0x04)
};

// Class Engine.MaterialExpressionInverseLinearInterpolate
// Size: 0xb0 (Inherited: 0x48)
struct UMaterialExpressionInverseLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Value; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float ConstA; // 0x9c(0x04)
	float ConstB; // 0xa0(0x04)
	float ConstValue; // 0xa4(0x04)
	bool bClampResult; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionLightmapUVs : UMaterialExpression {
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionLightmassReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Lightmass; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionLightVector
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Alpha; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float ConstA; // 0x9c(0x04)
	float ConstB; // 0xa0(0x04)
	float ConstAlpha; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionLogarithm10 : UMaterialExpression {
	struct FExpressionInput X; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionLogarithm2 : UMaterialExpression {
	struct FExpressionInput X; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x400 (Inherited: 0x48)
struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression {
	struct FExpressionInput BaseColor; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Metallic; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Specular; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput Roughness; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	struct FExpressionInput Anisotropy; // 0xb8(0x10)
	char pad_C8[0xc]; // 0xc8(0x0c)
	struct FExpressionInput EmissiveColor; // 0xd4(0x10)
	char pad_E4[0xc]; // 0xe4(0x0c)
	struct FExpressionInput Opacity; // 0xf0(0x10)
	char pad_100[0xc]; // 0x100(0x0c)
	struct FExpressionInput OpacityMask; // 0x10c(0x10)
	char pad_11C[0xc]; // 0x11c(0x0c)
	struct FExpressionInput Normal; // 0x128(0x10)
	char pad_138[0xc]; // 0x138(0x0c)
	struct FExpressionInput Tangent; // 0x144(0x10)
	char pad_154[0xc]; // 0x154(0x0c)
	struct FExpressionInput WorldPositionOffset; // 0x160(0x10)
	char pad_170[0xc]; // 0x170(0x0c)
	struct FExpressionInput WorldDisplacement; // 0x17c(0x10)
	char pad_18C[0xc]; // 0x18c(0x0c)
	struct FExpressionInput TessellationMultiplier; // 0x198(0x10)
	char pad_1A8[0xc]; // 0x1a8(0x0c)
	struct FExpressionInput SubsurfaceColor; // 0x1b4(0x10)
	char pad_1C4[0xc]; // 0x1c4(0x0c)
	struct FExpressionInput ClearCoat; // 0x1d0(0x10)
	char pad_1E0[0xc]; // 0x1e0(0x0c)
	struct FExpressionInput ClearCoatRoughness; // 0x1ec(0x10)
	char pad_1FC[0xc]; // 0x1fc(0x0c)
	struct FExpressionInput AmbientOcclusion; // 0x208(0x10)
	char pad_218[0xc]; // 0x218(0x0c)
	struct FExpressionInput Refraction; // 0x224(0x10)
	char pad_234[0xc]; // 0x234(0x0c)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x240(0x80)
	char pad_2C0[0x60]; // 0x2c0(0x60)
	struct FExpressionInput PixelDepthOffset; // 0x320(0x10)
	char pad_330[0xc]; // 0x330(0x0c)
	struct FExpressionInput ShadingModel; // 0x33c(0x10)
	char pad_34C[0xc]; // 0x34c(0x0c)
	struct FExpressionInput AresDirectionality; // 0x358(0x10)
	char pad_368[0xc]; // 0x368(0x0c)
	struct FExpressionInput AresDirectionalityTint; // 0x374(0x10)
	char pad_384[0xc]; // 0x384(0x0c)
	struct FExpressionInput AresDynamicShadowIntensity; // 0x390(0x10)
	char pad_3A0[0xc]; // 0x3a0(0x0c)
	struct FExpressionInput AresCustomDataColor0; // 0x3ac(0x10)
	char pad_3BC[0xc]; // 0x3bc(0x0c)
	struct FExpressionInput AresCustomDataColor1; // 0x3c8(0x10)
	char pad_3D8[0xc]; // 0x3d8(0x0c)
	struct FExpressionInput AresVertexFogIntensity; // 0x3e4(0x10)
	char pad_3F4[0xc]; // 0x3f4(0x0c)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0x108 (Inherited: 0x48)
struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression {
	struct FName ParameterName; // 0x48(0x0c)
	struct FGuid ExpressionGUID; // 0x54(0x10)
	char pad_64[0x4]; // 0x64(0x04)
	struct FMaterialAttributesInput Input; // 0x68(0x18)
	char pad_80[0x10]; // 0x80(0x10)
	struct FMaterialLayersFunctions DefaultLayers; // 0x90(0x40)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0xd0(0x10)
	int32_t NumActiveLayerCallers; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0xe8(0x10)
	int32_t NumActiveBlendCallers; // 0xf8(0x04)
	bool bIsLayerGraphBuilt; // 0xfc(0x01)
	char pad_FD[0xb]; // 0xfd(0x0b)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression {
	struct UMaterialFunctionInterface* MaterialFunction; // 0x48(0x08)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0x50(0x14)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0xa0 (Inherited: 0xa0)
struct UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput {
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput MaterialProxy; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionMax
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionMax : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionMin
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionMin : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionMultiply : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionNoise
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput FilterWidth; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float Scale; // 0x80(0x04)
	int32_t Quality; // 0x84(0x04)
	enum class ENoiseFunction NoiseFunction; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	char bTurbulence : 1; // 0x8c(0x01)
	char pad_8C_1 : 7; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	int32_t Levels; // 0x90(0x04)
	float OutputMin; // 0x94(0x04)
	float OutputMax; // 0x98(0x04)
	float LevelScale; // 0x9c(0x04)
	char bTiling : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	uint32_t RepeatSize; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionNormalize
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionNormalize : UMaterialExpression {
	struct FExpressionInput VectorInput; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionObjectBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionObjectOrientation : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionObjectPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionObjectRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionOneMinus : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionPanner
// Size: 0xb0 (Inherited: 0x48)
struct UMaterialExpressionPanner : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Time; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Speed; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float SpeedX; // 0x9c(0x04)
	float SpeedY; // 0xa0(0x04)
	uint32_t ConstCoordinate; // 0xa4(0x04)
	bool bFractionalPart; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleDirection : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleMacroUV : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleMotionBlurFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticlePositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleRelativeTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleSpeed : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0x78 (Inherited: 0x70)
struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample {
	char bBlend : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionParticleSubUVProperties : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceCustomData
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float ConstDefaultValue; // 0x64(0x04)
	uint32_t DataIndex; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPerInstanceRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPixelDepth : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPixelNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionPower
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionPower : UMaterialExpression {
	struct FExpressionInput Base; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Exponent; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstExponent; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPrecomputedAOMask : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPreSkinnedNormal : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionPreSkinnedPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression {
	struct FExpressionInput CurrentFrame; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput PreviousFrame; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0xd8 (Inherited: 0x48)
struct UMaterialExpressionQualitySwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Inputs[0x4]; // 0x64(0x40)
	char pad_A4[0x34]; // 0xa4(0x34)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput RayTraced; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionReflectionCapturePassSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Reflection; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionReflectionVectorWS : UMaterialExpression {
	struct FExpressionInput CustomWorldNormal; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	char bNormalizeCustomWorldNormal : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.MaterialExpressionReroute
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionReroute : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0xc0 (Inherited: 0x48)
struct UMaterialExpressionRotateAboutAxis : UMaterialExpression {
	struct FExpressionInput NormalizedRotationAxis; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput RotationAngle; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput PivotPoint; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput Position; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	float Period; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Engine.MaterialExpressionRotator
// Size: 0x90 (Inherited: 0x48)
struct UMaterialExpressionRotator : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Time; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float CenterX; // 0x80(0x04)
	float CenterY; // 0x84(0x04)
	float Speed; // 0x88(0x04)
	uint32_t ConstCoordinate; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionRound
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionRound : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0x110 (Inherited: 0x48)
struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput BaseColor; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Specular; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Roughness; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput Normal; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	struct FExpressionInput WorldHeight; // 0xb8(0x10)
	char pad_C8[0xc]; // 0xc8(0x0c)
	struct FExpressionInput Opacity; // 0xd4(0x10)
	char pad_E4[0xc]; // 0xe4(0x0c)
	struct FExpressionInput Mask; // 0xf0(0x10)
	char pad_100[0x10]; // 0x100(0x10)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput VirtualTextureOutput; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0xb0 (Inherited: 0x48)
struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput WorldPosition; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput MipValue; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)
	struct URuntimeVirtualTexture* VirtualTexture; // 0xa0(0x08)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0xa8(0x01)
	bool bSinglePhysicalSpace; // 0xa9(0x01)
	bool bAdaptive; // 0xaa(0x01)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0xab(0x01)
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0xd8 (Inherited: 0xb0)
struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample {
	struct FName ParameterName; // 0xb0(0x0c)
	struct FGuid ExpressionGUID; // 0xbc(0x10)
	struct FName Group; // 0xcc(0x0c)
};

// Class Engine.MaterialExpressionSaturate
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSaturate : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x90 (Inherited: 0x48)
struct UMaterialExpressionSceneColor : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
	struct FExpressionInput OffsetFraction; // 0x68(0x10)
	char pad_78[0xc]; // 0x78(0x0c)
	struct FVector2D ConstInput; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x90 (Inherited: 0x48)
struct UMaterialExpressionSceneDepth : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
	struct FExpressionInput Coordinates; // 0x68(0x10)
	char pad_78[0xc]; // 0x78(0x0c)
	struct FVector2D ConstInput; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// Size: 0x78 (Inherited: 0x48)
struct UMaterialExpressionSceneDepthWithoutWater : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput Input; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
	struct FVector2D ConstInput; // 0x68(0x08)
	float FallbackDepth; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionSceneTexelSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSceneTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class ESceneTextureId SceneTextureId; // 0x64(0x01)
	bool bFiltered; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionScreenPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression {
	struct TArray<struct FExpressionInput> Inputs; // 0x48(0x10)
	struct TArray<struct FGuid> AttributeSetTypes; // 0x58(0x10)
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionShaderStageSwitch : UMaterialExpression {
	struct FExpressionInput PixelShader; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput VertexShader; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionShadingModel : UMaterialExpression {
	enum class EMaterialShadingModel ShadingModel; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0xb8 (Inherited: 0x48)
struct UMaterialExpressionShadingPathSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Inputs[0x3]; // 0x64(0x30)
	char pad_94[0x24]; // 0x94(0x24)
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionShadowReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Shadow; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionSign
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSign : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionSine
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSine : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float Period; // 0x64(0x04)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0xb8 (Inherited: 0x48)
struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput ScatteringCoefficients; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput AbsorptionCoefficients; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput PhaseG; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput ColorScaleBehindWater; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
};

// Class Engine.MaterialExpressionSkinningVertexOffsets
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionSkinningVertexOffsets : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression {
	int32_t LightIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression {
	int32_t LightIndex; // 0x48(0x04)
	struct FExpressionInput WorldPosition; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression {
	int32_t LightIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionSkyAtmosphereViewLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSmoothStep
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionSmoothStep : UMaterialExpression {
	struct FExpressionInput Min; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Max; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Value; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float ConstMin; // 0x9c(0x04)
	float ConstMax; // 0xa0(0x04)
	float ConstValue; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionSobol
// Size: 0xa8 (Inherited: 0x48)
struct UMaterialExpressionSobol : UMaterialExpression {
	struct FExpressionInput Cell; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Index; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Seed; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	uint32_t ConstIndex; // 0x9c(0x04)
	struct FVector2D ConstSeed; // 0xa0(0x08)
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0xc8 (Inherited: 0x48)
struct UMaterialExpressionSpeedTree : UMaterialExpression {
	struct FExpressionInput GeometryInput; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput WindInput; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput LODInput; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput ExtraBendWS; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	enum class ESpeedTreeGeometryType GeometryType; // 0xb8(0x01)
	enum class ESpeedTreeWindType WindType; // 0xb9(0x01)
	enum class ESpeedTreeLODType LODType; // 0xba(0x01)
	char pad_BB[0x1]; // 0xbb(0x01)
	float BillboardThreshold; // 0xbc(0x04)
	bool bAccurateWindVelocities; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0xc8 (Inherited: 0x48)
struct UMaterialExpressionSphereMask : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput Radius; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput Hardness; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	float AttenuationRadius; // 0xb8(0x04)
	float HardnessPercent; // 0xbc(0x04)
	char bMobileLimitPrecision : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression {
	struct FExpressionInput Density; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float ConstantDensity; // 0x64(0x04)
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionSquareRoot : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionStaticBool : UMaterialExpression {
	char Value : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0x70 (Inherited: 0x68)
struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter {
	char DefaultValue : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x70 (Inherited: 0x68)
struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter {
	char DefaultR : 1; // 0x68(0x01)
	char DefaultG : 1; // 0x68(0x01)
	char DefaultB : 1; // 0x68(0x01)
	char DefaultA : 1; // 0x68(0x01)
	char pad_68_4 : 4; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0xa0 (Inherited: 0x48)
struct UMaterialExpressionStaticSwitch : UMaterialExpression {
	char DefaultValue : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FExpressionInput A; // 0x4c(0x10)
	char pad_5C[0xc]; // 0x5c(0x0c)
	struct FExpressionInput B; // 0x68(0x10)
	char pad_78[0xc]; // 0x78(0x0c)
	struct FExpressionInput Value; // 0x84(0x10)
	char pad_94[0xc]; // 0x94(0x0c)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x70 (Inherited: 0x70)
struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter {
};

// Class Engine.MaterialExpressionStep
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionStep : UMaterialExpression {
	struct FExpressionInput Y; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput X; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstY; // 0x80(0x04)
	float ConstX; // 0x84(0x04)
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x88 (Inherited: 0x48)
struct UMaterialExpressionSubtract : UMaterialExpression {
	struct FExpressionInput A; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput B; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	float ConstA; // 0x80(0x04)
	float ConstB; // 0x84(0x04)
};

// Class Engine.MaterialExpressionTangent
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	float Period; // 0x64(0x04)
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x90 (Inherited: 0x48)
struct UMaterialExpressionTemporalSobol : UMaterialExpression {
	struct FExpressionInput Index; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Seed; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	uint32_t ConstIndex; // 0x80(0x04)
	struct FVector2D ConstSeed; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0x58 (Inherited: 0x48)
struct UMaterialExpressionTextureCoordinate : UMaterialExpression {
	int32_t CoordinateIndex; // 0x48(0x04)
	float UTiling; // 0x4c(0x04)
	float VTiling; // 0x50(0x04)
	char UnMirrorU : 1; // 0x54(0x01)
	char UnMirrorV : 1; // 0x54(0x01)
	char pad_54_2 : 6; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0x50 (Inherited: 0x50)
struct UMaterialExpressionTextureObject : UMaterialExpressionTextureBase {
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0x98 (Inherited: 0x98)
struct UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTextureProperty : UMaterialExpression {
	struct FExpressionInput TextureObject; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class EMaterialExposedTextureProperty Property; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0x98 (Inherited: 0x98)
struct UMaterialExpressionTextureSampleParameter2DArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0x98 (Inherited: 0x98)
struct UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0xa0 (Inherited: 0x98)
struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D {
	char bBlend : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0x98 (Inherited: 0x98)
struct UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionTime
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionTime : UMaterialExpression {
	char bIgnorePause : 1; // 0x48(0x01)
	char bOverride_Period : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float Period; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionTransform
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTransform : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0x64(0x01)
	enum class EMaterialVectorCoordTransform TransformType; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTransformPosition : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0x64(0x01)
	enum class EMaterialPositionTransformSource TransformType; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
};

// Class Engine.MaterialExpressionTruncate
// Size: 0x68 (Inherited: 0x48)
struct UMaterialExpressionTruncate : UMaterialExpression {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionTwoSidedSign : UMaterialExpression {
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0x78 (Inherited: 0x48)
struct UMaterialExpressionVectorNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	enum class EVectorNoiseFunction NoiseFunction; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	int32_t Quality; // 0x68(0x04)
	char bTiling : 1; // 0x6c(0x01)
	char pad_6C_1 : 7; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	uint32_t TileSize; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionVertexColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0x70 (Inherited: 0x48)
struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x48(0x10)
	char pad_58[0x18]; // 0x58(0x18)
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionVertexNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexTangentWS
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionVertexTangentWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionViewProperty : UMaterialExpression {
	enum class EMaterialExposedViewProperty Property; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.MaterialExpressionViewSize
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionViewSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x80 (Inherited: 0x48)
struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput Yes; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionVolumetricAdvancedMaterialInput : UMaterialExpression {
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// Size: 0x130 (Inherited: 0x48)
struct UMaterialExpressionVolumetricAdvancedMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput PhaseG; // 0x48(0x10)
	char pad_58[0xc]; // 0x58(0x0c)
	struct FExpressionInput PhaseG2; // 0x64(0x10)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FExpressionInput PhaseBlend; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	struct FExpressionInput MultiScatteringContribution; // 0x9c(0x10)
	char pad_AC[0xc]; // 0xac(0x0c)
	struct FExpressionInput MultiScatteringOcclusion; // 0xb8(0x10)
	char pad_C8[0xc]; // 0xc8(0x0c)
	struct FExpressionInput MultiScatteringEccentricity; // 0xd4(0x10)
	char pad_E4[0xc]; // 0xe4(0x0c)
	struct FExpressionInput ConservativeDensity; // 0xf0(0x10)
	char pad_100[0xc]; // 0x100(0x0c)
	float ConstPhaseG; // 0x10c(0x04)
	float ConstPhaseG2; // 0x110(0x04)
	float ConstPhaseBlend; // 0x114(0x04)
	bool PerSamplePhaseEvaluation; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	uint32_t MultiScatteringApproximationOctaveCount; // 0x11c(0x04)
	float ConstMultiScatteringContribution; // 0x120(0x04)
	float ConstMultiScatteringOcclusion; // 0x124(0x04)
	float ConstMultiScatteringEccentricity; // 0x128(0x04)
	bool bGroundContribution; // 0x12c(0x01)
	bool bGrayScaleMaterial; // 0x12d(0x01)
	bool bRayMarchVolumeShadow; // 0x12e(0x01)
	char pad_12F[0x1]; // 0x12f(0x01)
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0x50 (Inherited: 0x48)
struct UMaterialExpressionWorldPosition : UMaterialExpression {
	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.MaterialFunctionInterface
// Size: 0x48 (Inherited: 0x30)
struct UMaterialFunctionInterface : UObject {
	struct FGuid StateId; // 0x30(0x10)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialFunction
// Size: 0x60 (Inherited: 0x48)
struct UMaterialFunction : UMaterialFunctionInterface {
	struct FString Description; // 0x48(0x10)
	char bExposeToLibrary : 1; // 0x58(0x01)
	char bPrefixParameterNames : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.MaterialFunctionInstance
// Size: 0xc8 (Inherited: 0x48)
struct UMaterialFunctionInstance : UMaterialFunctionInterface {
	struct UMaterialFunctionInterface* Parent; // 0x48(0x08)
	struct UMaterialFunctionInterface* Base; // 0x50(0x08)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x58(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x68(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x78(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x88(0x10)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0x98(0x10)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xa8(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xb8(0x10)
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x60 (Inherited: 0x60)
struct UMaterialFunctionMaterialLayer : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xc8 (Inherited: 0xc8)
struct UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x60 (Inherited: 0x60)
struct UMaterialFunctionMaterialLayerBlend : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xc8 (Inherited: 0xc8)
struct UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialInstanceActor
// Size: 0x3e0 (Inherited: 0x3d0)
struct AMaterialInstanceActor : AActor {
	struct TArray<struct AActor*> TargetActors; // 0x3d0(0x10)
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x420 (Inherited: 0x3d0)
struct UMaterialInstanceDynamic : UMaterialInstance {
	char pad_3D0[0x50]; // 0x3d0(0x50)

	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53188f0
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5318800
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5318710
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5318620
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5318520
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5318430
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float Alpha); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams // (Final|Native|Public|BlueprintCallable) // @ game+0x5318310
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5318250
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5318190
	struct UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5318020
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5317f70
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5317e10
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x5317d60
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x5317be0
	void FlattenMaterialInstanceParameters(); // Function Engine.MaterialInstanceDynamic.FlattenMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x5317bc0
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x5317b30
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters // (Final|Native|Public) // @ game+0x5317aa0
};

// Class Engine.MaterialParameterCollection
// Size: 0x78 (Inherited: 0x30)
struct UMaterialParameterCollection : UObject {
	struct FGuid StateId; // 0x30(0x10)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x40(0x10)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0x110 (Inherited: 0x30)
struct UMaterialParameterCollectionInstance : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UMaterialParameterCollection* Collection; // 0x38(0x08)
	char pad_40[0xd0]; // 0x40(0xd0)
};

// Class Engine.MatineeActor
// Size: 0x480 (Inherited: 0x3d0)
struct AMatineeActor : AActor {
	struct UInterpData* MatineeData; // 0x3d0(0x08)
	struct FName MatineeControllerName; // 0x3d8(0x0c)
	float PlayRate; // 0x3e4(0x04)
	char bPlayOnLevelLoad : 1; // 0x3e8(0x01)
	char bForceStartPos : 1; // 0x3e8(0x01)
	char pad_3E8_2 : 6; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	float ForceStartPosition; // 0x3ec(0x04)
	char bLooping : 1; // 0x3f0(0x01)
	char bRewindOnPlay : 1; // 0x3f0(0x01)
	char bNoResetOnRewind : 1; // 0x3f0(0x01)
	char bRewindIfAlreadyPlaying : 1; // 0x3f0(0x01)
	char bDisableRadioFilter : 1; // 0x3f0(0x01)
	char bClientSideOnly : 1; // 0x3f0(0x01)
	char bSkipUpdateIfNotVisible : 1; // 0x3f0(0x01)
	char bIsSkippable : 1; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	int32_t PreferredSplitScreenNum; // 0x3f4(0x04)
	char bDisableMovementInput : 1; // 0x3f8(0x01)
	char bDisableLookAtInput : 1; // 0x3f8(0x01)
	char bHidePlayer : 1; // 0x3f8(0x01)
	char bHideHud : 1; // 0x3f8(0x01)
	char pad_3F8_4 : 4; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos; // 0x400(0x10)
	char bShouldShowGore : 1; // 0x410(0x01)
	char pad_410_1 : 7; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct TArray<struct UInterpGroupInst*> GroupInst; // 0x418(0x10)
	struct TArray<struct FCameraCutInfo> CameraCuts; // 0x428(0x10)
	char bIsPlaying : 1; // 0x438(0x01)
	char bReversePlayback : 1; // 0x438(0x01)
	char bPaused : 1; // 0x438(0x01)
	char bPendingStop : 1; // 0x438(0x01)
	char pad_438_4 : 4; // 0x438(0x01)
	char pad_439[0x3]; // 0x439(0x03)
	float InterpPosition; // 0x43c(0x04)
	char pad_440[0x4]; // 0x440(0x04)
	char ReplicationForceIsPlaying; // 0x444(0x01)
	char pad_445[0x3]; // 0x445(0x03)
	struct FMulticastInlineDelegate OnPlay; // 0x448(0x10)
	struct FMulticastInlineDelegate OnStop; // 0x458(0x10)
	struct FMulticastInlineDelegate OnPause; // 0x468(0x10)
	char pad_478[0x8]; // 0x478(0x08)

	void Stop(); // Function Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // @ game+0x2be4af0
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x5320870
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState // (Native|Public|BlueprintCallable) // @ game+0x53207d0
	void Reverse(); // Function Engine.MatineeActor.Reverse // (Native|Public|BlueprintCallable) // @ game+0x1ce9740
	void Play(); // Function Engine.MatineeActor.Play // (Native|Public|BlueprintCallable) // @ game+0x2c509e0
	void Pause(); // Function Engine.MatineeActor.Pause // (Native|Public|BlueprintCallable) // @ game+0x1ce9710
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x5320270
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection // (Native|Public|BlueprintCallable) // @ game+0x2be7ab0
};

// Class Engine.MatineeActorCameraAnim
// Size: 0x488 (Inherited: 0x480)
struct AMatineeActorCameraAnim : AMatineeActor {
	struct UCameraAnim* CameraAnim; // 0x480(0x08)
};

// Class Engine.MatineeAnimInterface
// Size: 0x30 (Inherited: 0x30)
struct UMatineeAnimInterface : UInterface {
};

// Class Engine.MatineeInterface
// Size: 0x30 (Inherited: 0x30)
struct UMatineeInterface : UInterface {
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x408 (Inherited: 0x408)
struct AMeshMergeCullingVolume : AVolume {
};

// Class Engine.MeshParticleDecalComponent
// Size: 0x300 (Inherited: 0x2f0)
struct UMeshParticleDecalComponent : UDecalComponent {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct UMaterialInterface* MaterialTemplate; // 0x2f8(0x08)
};

// Class Engine.MeshSimplificationSettings
// Size: 0x58 (Inherited: 0x48)
struct UMeshSimplificationSettings : UDeveloperSettings {
	struct FName MeshReductionModuleName; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x30 (Inherited: 0x30)
struct UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary {

	void RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5329b70
	void PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5329930
	void PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5329770
};

// Class Engine.MicroTransactionBase
// Size: 0x70 (Inherited: 0x40)
struct UMicroTransactionBase : UPlatformInterfaceBase {
	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x40(0x10)
	struct FString LastError; // 0x50(0x10)
	struct FString LastErrorSolution; // 0x60(0x10)
};

// Class Engine.ModelComponent
// Size: 0x590 (Inherited: 0x550)
struct UModelComponent : UPrimitiveComponent {
	char pad_550[0x10]; // 0x550(0x10)
	struct UBodySetup* ModelBodySetup; // 0x560(0x08)
	char pad_568[0x28]; // 0x568(0x28)
};

// Class Engine.MorphTarget
// Size: 0x48 (Inherited: 0x30)
struct UMorphTarget : UObject {
	struct USkeletalMesh* BaseSkelMesh; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Engine.NavAgentInterface
// Size: 0x30 (Inherited: 0x30)
struct UNavAgentInterface : UInterface {
};

// Class Engine.NavCollisionBase
// Size: 0x78 (Inherited: 0x30)
struct UNavCollisionBase : UObject {
	char bIsDynamicObstacle : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x47]; // 0x31(0x47)
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x30 (Inherited: 0x30)
struct UNavEdgeProviderInterface : UInterface {
};

// Class Engine.NavigationDataChunk
// Size: 0x40 (Inherited: 0x30)
struct UNavigationDataChunk : UObject {
	struct FName NavigationDataName; // 0x30(0x0c)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.NavigationDataInterface
// Size: 0x30 (Inherited: 0x30)
struct UNavigationDataInterface : UInterface {
};

// Class Engine.NavigationSystemBase
// Size: 0x30 (Inherited: 0x30)
struct UNavigationSystemBase : UObject {
};

// Class Engine.NavigationSystemConfig
// Size: 0x68 (Inherited: 0x30)
struct UNavigationSystemConfig : UObject {
	struct FSoftClassPath NavigationSystemClass; // 0x30(0x20)
	struct FNavAgentSelector SupportedAgentsMask; // 0x50(0x04)
	struct FName DefaultAgentName; // 0x54(0x0c)
	char bIsOverriden : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.NullNavSysConfig
// Size: 0x68 (Inherited: 0x68)
struct UNullNavSysConfig : UNavigationSystemConfig {
};

// Class Engine.NavLinkDefinition
// Size: 0x58 (Inherited: 0x30)
struct UNavLinkDefinition : UObject {
	struct TArray<struct FNavigationLink> Links; // 0x30(0x10)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.NavPathObserverInterface
// Size: 0x30 (Inherited: 0x30)
struct UNavPathObserverInterface : UInterface {
};

// Class Engine.NavRelevantInterface
// Size: 0x30 (Inherited: 0x30)
struct UNavRelevantInterface : UInterface {
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x1b40 (Inherited: 0x1b40)
struct USimulatedClientNetConnection : UNetConnection {
};

// Class Engine.NetPushModelHelpers
// Size: 0x30 (Inherited: 0x30)
struct UNetPushModelHelpers : UBlueprintFunctionLibrary {

	void MarkPropertyDirtyFromRepIndex(struct UObject* Object, int32_t RepIndex, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x533a350
	void MarkPropertyDirty(struct UObject* Object, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x533a270
};

// Class Engine.NetworkPredictionInterface
// Size: 0x30 (Inherited: 0x30)
struct UNetworkPredictionInterface : UInterface {
};

// Class Engine.NetworkSettings
// Size: 0x68 (Inherited: 0x48)
struct UNetworkSettings : UDeveloperSettings {
	char bVerifyPeer : 1; // 0x48(0x01)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t MaxRepArraySize; // 0x4c(0x04)
	int32_t MaxRepArrayMemory; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x58(0x10)
};

// Class Engine.NodeMappingContainer
// Size: 0x180 (Inherited: 0x30)
struct UNodeMappingContainer : UObject {
	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x30(0x50)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x80(0x50)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xd0(0x50)
	struct TSoftObjectPtr<UObject> SourceAsset; // 0x120(0x30)
	struct TSoftObjectPtr<UObject> TargetAsset; // 0x150(0x30)
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x30 (Inherited: 0x30)
struct UNodeMappingProviderInterface : UInterface {
};

// Class Engine.Note
// Size: 0x3d0 (Inherited: 0x3d0)
struct ANote : AActor {
};

// Class Engine.ObjectLibrary
// Size: 0xb0 (Inherited: 0x30)
struct UObjectLibrary : UObject {
	struct UObject* ObjectBaseClass; // 0x30(0x08)
	bool bHasBlueprintClasses; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct UObject*> Objects; // 0x40(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> WeakObjects; // 0x50(0x10)
	bool bUseWeakReferences; // 0x60(0x01)
	bool bIsFullyLoaded; // 0x61(0x01)
	char pad_62[0x4e]; // 0x62(0x4e)
};

// Class Engine.ObjectReferencer
// Size: 0x40 (Inherited: 0x30)
struct UObjectReferencer : UObject {
	struct TArray<struct UObject*> ReferencedObjects; // 0x30(0x10)
};

// Class Engine.ObjectTraceWorldSubsystem
// Size: 0x40 (Inherited: 0x38)
struct UObjectTraceWorldSubsystem : UWorldSubsystem {
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Engine.PackageMapClient
// Size: 0x400 (Inherited: 0xe8)
struct UPackageMapClient : UPackageMap {
	char pad_E8[0x318]; // 0xe8(0x318)
};

// Class Engine.PainCausingVolume
// Size: 0x440 (Inherited: 0x418)
struct APainCausingVolume : APhysicsVolume {
	char bPainCausing : 1; // 0x418(0x01)
	char pad_418_1 : 7; // 0x418(0x01)
	char pad_419[0x3]; // 0x419(0x03)
	float DamagePerSec; // 0x41c(0x04)
	struct UDamageType* DamageType; // 0x420(0x08)
	float PainInterval; // 0x428(0x04)
	char bEntryPain : 1; // 0x42c(0x01)
	char BACKUP_bPainCausing : 1; // 0x42c(0x01)
	char pad_42C_2 : 6; // 0x42c(0x01)
	char pad_42D[0x3]; // 0x42d(0x03)
	struct AController* DamageInstigator; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)
};

// Class Engine.ParticleEmitter
// Size: 0x1c0 (Inherited: 0x30)
struct UParticleEmitter : UObject {
	struct FName EmitterName; // 0x30(0x0c)
	int32_t SubUVDataOffset; // 0x3c(0x04)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x40(0x01)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x41(0x01)
	char pad_42[0x1]; // 0x42(0x01)
	char bUseLegacySpawningBehavior : 1; // 0x43(0x01)
	char pad_43_1 : 3; // 0x43(0x01)
	char ConvertedModules : 1; // 0x43(0x01)
	char bIsSoloing : 1; // 0x43(0x01)
	char bCookedOut : 1; // 0x43(0x01)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x43(0x01)
	char bDisableWhenInsignficant : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	struct TArray<struct UParticleLODLevel*> LODLevels; // 0x48(0x10)
	int32_t PeakActiveParticles; // 0x58(0x04)
	int32_t InitialAllocationCount; // 0x5c(0x04)
	float QualityLevelSpawnRateScale; // 0x60(0x04)
	uint32_t DetailModeBitmask; // 0x64(0x04)
	char pad_68[0x158]; // 0x68(0x158)
};

// Class Engine.ParticleEventManager
// Size: 0x3d0 (Inherited: 0x3d0)
struct AParticleEventManager : AActor {
};

// Class Engine.ParticleLODLevel
// Size: 0xc8 (Inherited: 0x30)
struct UParticleLODLevel : UObject {
	int32_t Level; // 0x30(0x04)
	char bEnabled : 1; // 0x34(0x01)
	char pad_34_1 : 7; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct UParticleModuleRequired* RequiredModule; // 0x38(0x08)
	struct TArray<struct UParticleModule*> Modules; // 0x40(0x10)
	struct UParticleModule* ModulePendingDelete; // 0x50(0x08)
	struct UParticleModuleTypeDataBase* TypeDataModule; // 0x58(0x08)
	struct UParticleModuleSpawn* SpawnModule; // 0x60(0x08)
	struct UParticleModuleEventGenerator* EventGenerator; // 0x68(0x08)
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules; // 0x70(0x10)
	struct TArray<struct UParticleModule*> SpawnModules; // 0x80(0x10)
	struct TArray<struct UParticleModule*> UpdateModules; // 0x90(0x10)
	struct TArray<struct UParticleModuleOrbit*> OrbitModules; // 0xa0(0x10)
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xb0(0x10)
	char ConvertedModules : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	int32_t PeakActiveParticles; // 0xc4(0x04)
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleAccelerationBase : UParticleModule {
	char bAlwaysInWorldSpace : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleAcceleration
// Size: 0x90 (Inherited: 0x40)
struct UParticleModuleAcceleration : UParticleModuleAccelerationBase {
	struct FRawDistributionVector Acceleration; // 0x40(0x48)
	char bApplyOwnerScale : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x50 (Inherited: 0x40)
struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase {
	struct FVector Acceleration; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x78 (Inherited: 0x40)
struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragCoefficient; // 0x40(0x08)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x48(0x30)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x78 (Inherited: 0x40)
struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragScale; // 0x40(0x08)
	struct FRawDistributionFloat DragScaleRaw; // 0x48(0x30)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x88 (Inherited: 0x40)
struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase {
	struct FRawDistributionVector AccelOverLife; // 0x40(0x48)
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleAttractorBase : UParticleModule {
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleAttractorLine : UParticleModuleAttractorBase {
	struct FVector EndPoint0; // 0x38(0x0c)
	struct FVector EndPoint1; // 0x44(0x0c)
	struct FRawDistributionFloat Range; // 0x50(0x30)
	struct FRawDistributionFloat Strength; // 0x80(0x30)
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xc0 (Inherited: 0x38)
struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase {
	struct FName EmitterName; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRawDistributionFloat Range; // 0x48(0x30)
	char bStrengthByDistance : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FRawDistributionFloat Strength; // 0x80(0x30)
	char bAffectBaseVelocity : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	char bRenewSource : 1; // 0xb8(0x01)
	char bInheritSourceVel : 1; // 0xb8(0x01)
	char pad_B8_2 : 6; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t LastSelIndex; // 0xbc(0x04)
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase {
	struct FRawDistributionVector Position; // 0x38(0x48)
	struct FRawDistributionFloat Range; // 0x80(0x30)
	struct FRawDistributionFloat Strength; // 0xb0(0x30)
	char StrengthByDistance : 1; // 0xe0(0x01)
	char bAffectBaseVelocity : 1; // 0xe0(0x01)
	char bOverrideVelocity : 1; // 0xe0(0x01)
	char bUseWorldSpacePosition : 1; // 0xe0(0x01)
	char Positive_X : 1; // 0xe0(0x01)
	char Positive_Y : 1; // 0xe0(0x01)
	char Positive_Z : 1; // 0xe0(0x01)
	char Negative_X : 1; // 0xe0(0x01)
	char Negative_Y : 1; // 0xe1(0x01)
	char Negative_Z : 1; // 0xe1(0x01)
	char pad_E1_2 : 6; // 0xe1(0x01)
	char pad_E2[0x6]; // 0xe2(0x06)
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase {
	struct FVector Position; // 0x38(0x0c)
	float Radius; // 0x44(0x04)
	struct UDistributionFloat* Strength; // 0x48(0x08)
	struct FRawDistributionFloat StrengthRaw; // 0x50(0x30)
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleBeamBase : UParticleModule {
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x110 (Inherited: 0x38)
struct UParticleModuleBeamModifier : UParticleModuleBeamBase {
	enum class BeamModifierType ModifierType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FBeamModifierOptions PositionOptions; // 0x3c(0x04)
	struct FRawDistributionVector Position; // 0x40(0x48)
	struct FBeamModifierOptions TangentOptions; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct FRawDistributionVector Tangent; // 0x90(0x48)
	char bAbsoluteTangent : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	struct FBeamModifierOptions StrengthOptions; // 0xdc(0x04)
	struct FRawDistributionFloat Strength; // 0xe0(0x30)
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x198 (Inherited: 0x38)
struct UParticleModuleBeamNoise : UParticleModuleBeamBase {
	char bLowFreq_Enabled : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t Frequency; // 0x3c(0x04)
	int32_t Frequency_LowRange; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRawDistributionVector NoiseRange; // 0x48(0x48)
	struct FRawDistributionFloat NoiseRangeScale; // 0x90(0x30)
	char bNRScaleEmitterTime : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FRawDistributionVector NoiseSpeed; // 0xc8(0x48)
	char bSmooth : 1; // 0x110(0x01)
	char pad_110_1 : 7; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float NoiseLockRadius; // 0x114(0x04)
	char bNoiseLock : 1; // 0x118(0x01)
	char bOscillate : 1; // 0x118(0x01)
	char pad_118_2 : 6; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float NoiseLockTime; // 0x11c(0x04)
	float NoiseTension; // 0x120(0x04)
	char bUseNoiseTangents : 1; // 0x124(0x01)
	char pad_124_1 : 7; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x128(0x30)
	int32_t NoiseTessellation; // 0x158(0x04)
	char bTargetNoise : 1; // 0x15c(0x01)
	char pad_15C_1 : 7; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	float FrequencyDistance; // 0x160(0x04)
	char bApplyNoiseScale : 1; // 0x164(0x01)
	char pad_164_1 : 7; // 0x164(0x01)
	char pad_165[0x3]; // 0x165(0x03)
	struct FRawDistributionFloat NoiseScale; // 0x168(0x30)
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x128 (Inherited: 0x38)
struct UParticleModuleBeamSource : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod SourceMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SourceName; // 0x3c(0x0c)
	char bSourceAbsolute : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct FRawDistributionVector Source; // 0x50(0x48)
	char bLockSource : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct FRawDistributionVector SourceTangent; // 0xa0(0x48)
	char bLockSourceTangent : 1; // 0xe8(0x01)
	char pad_E8_1 : 7; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct FRawDistributionFloat SourceStrength; // 0xf0(0x30)
	char bLockSourceStength : 1; // 0x120(0x01)
	char pad_120_1 : 7; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x128 (Inherited: 0x38)
struct UParticleModuleBeamTarget : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod TargetMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName TargetName; // 0x3c(0x0c)
	struct FRawDistributionVector Target; // 0x48(0x48)
	char bTargetAbsolute : 1; // 0x90(0x01)
	char bLockTarget : 1; // 0x90(0x01)
	char pad_90_2 : 6; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	struct FRawDistributionVector TargetTangent; // 0x98(0x48)
	char bLockTargetTangent : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct FRawDistributionFloat TargetStrength; // 0xe8(0x30)
	char bLockTargetStength : 1; // 0x118(0x01)
	char pad_118_1 : 7; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float LockRadius; // 0x11c(0x04)
	char pad_120[0x8]; // 0x120(0x08)
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleCameraBase : UParticleModule {
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleCameraOffset : UParticleModuleCameraBase {
	struct FRawDistributionFloat CameraOffset; // 0x38(0x30)
	char bSpawnTimeOnly : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleCollisionBase : UParticleModule {
};

// Class Engine.ParticleModuleCollision
// Size: 0x198 (Inherited: 0x38)
struct UParticleModuleCollision : UParticleModuleCollisionBase {
	struct FRawDistributionVector DampingFactor; // 0x38(0x48)
	struct FRawDistributionVector DampingFactorRotation; // 0x80(0x48)
	struct FRawDistributionFloat MaxCollisions; // 0xc8(0x30)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0x100(0x10)
	char pad_110[0x8]; // 0x110(0x08)
	char bApplyPhysics : 1; // 0x118(0x01)
	char bIgnoreTriggerVolumes : 1; // 0x118(0x01)
	char pad_118_2 : 6; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct FRawDistributionFloat ParticleMass; // 0x120(0x30)
	float DirScalar; // 0x150(0x04)
	char bPawnsDoNotDecrementCount : 1; // 0x154(0x01)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x154(0x01)
	char pad_154_2 : 6; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	float VerticalFudgeFactor; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct FRawDistributionFloat DelayAmount; // 0x160(0x30)
	char bDropDetail : 1; // 0x190(0x01)
	char bCollideOnlyIfVisible : 1; // 0x190(0x01)
	char bIgnoreSourceActor : 1; // 0x190(0x01)
	char pad_190_3 : 5; // 0x190(0x01)
	char pad_191[0x3]; // 0x191(0x03)
	float MaxCollisionDistance; // 0x194(0x04)
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase {
	struct FRawDistributionFloat Resilience; // 0x38(0x30)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x68(0x30)
	float Friction; // 0x98(0x04)
	float RandomSpread; // 0x9c(0x04)
	float RandomDistribution; // 0xa0(0x04)
	float RadiusScale; // 0xa4(0x04)
	float RadiusBias; // 0xa8(0x04)
	enum class EParticleCollisionResponse Response; // 0xac(0x01)
	enum class EParticleCollisionMode CollisionMode; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
};

// Class Engine.ParticleModuleColorBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleColorBase : UParticleModule {
};

// Class Engine.ParticleModuleColor
// Size: 0xb8 (Inherited: 0x38)
struct UParticleModuleColor : UParticleModuleColorBase {
	struct FRawDistributionVector StartColor; // 0x38(0x48)
	struct FRawDistributionFloat StartAlpha; // 0x80(0x30)
	char bClampAlpha : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xd8 (Inherited: 0xb8)
struct UParticleModuleColor_Seeded : UParticleModuleColor {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb8(0x20)
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xb8 (Inherited: 0x38)
struct UParticleModuleColorOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorOverLife; // 0x38(0x48)
	struct FRawDistributionFloat AlphaOverLife; // 0x80(0x30)
	char bClampAlpha : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xb8 (Inherited: 0x38)
struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorScaleOverLife; // 0x38(0x48)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x80(0x30)
	char bEmitterTime : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Engine.AresParticleModuleVariantColor
// Size: 0x98 (Inherited: 0x38)
struct UAresParticleModuleVariantColor : UParticleModuleCustomColor {
	struct FName MaterialParameter; // 0x38(0x0c)
	struct FLinearColor BaseColor; // 0x44(0x10)
	struct FLinearColor Variant1Color; // 0x54(0x10)
	struct FLinearColor Variant2Color; // 0x64(0x10)
	struct FLinearColor Variant3Color; // 0x74(0x10)
	struct FLinearColor VariantRadiantColor; // 0x84(0x10)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.ParticleModuleEventBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleEventBase : UParticleModule {
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleEventGenerator : UParticleModuleEventBase {
	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x38(0x10)
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleEventReceiverBase : UParticleModuleEventBase {
	enum class EParticleEventType EventGeneratorType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName EventName; // 0x3c(0x0c)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x50 (Inherited: 0x48)
struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase {
	char bStopSpawning : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xe0 (Inherited: 0x48)
struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase {
	struct FRawDistributionFloat SpawnCount; // 0x48(0x30)
	char bUseParticleTime : 1; // 0x78(0x01)
	char bUsePSysLocation : 1; // 0x78(0x01)
	char bInheritVelocity : 1; // 0x78(0x01)
	char pad_78_3 : 5; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FRawDistributionVector InheritVelocityScale; // 0x80(0x48)
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials; // 0xc8(0x10)
	char bBanPhysicalMaterials : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleEventSendToGame : UObject {
};

// Class Engine.ParticleModuleKillBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleKillBase : UParticleModule {
};

// Class Engine.ParticleModuleKillBox
// Size: 0xd0 (Inherited: 0x38)
struct UParticleModuleKillBox : UParticleModuleKillBase {
	struct FRawDistributionVector LowerLeftCorner; // 0x38(0x48)
	struct FRawDistributionVector UpperRightCorner; // 0x80(0x48)
	char bAbsolute : 1; // 0xc8(0x01)
	char bKillInside : 1; // 0xc8(0x01)
	char bAxisAlignedAndFixedSize : 1; // 0xc8(0x01)
	char pad_C8_3 : 5; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleKillHeight : UParticleModuleKillBase {
	struct FRawDistributionFloat Height; // 0x38(0x30)
	char bAbsolute : 1; // 0x68(0x01)
	char bFloor : 1; // 0x68(0x01)
	char bApplyPSysScale : 1; // 0x68(0x01)
	char pad_68_3 : 5; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleLifetimeBase : UParticleModule {
};

// Class Engine.ParticleModuleLifetime
// Size: 0x68 (Inherited: 0x38)
struct UParticleModuleLifetime : UParticleModuleLifetimeBase {
	struct FRawDistributionFloat LifeTime; // 0x38(0x30)
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x88 (Inherited: 0x68)
struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)
};

// Class Engine.ParticleModuleLightBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleLightBase : UParticleModule {
};

// Class Engine.ParticleModuleLight
// Size: 0x128 (Inherited: 0x38)
struct UParticleModuleLight : UParticleModuleLightBase {
	bool bUseInverseSquaredFalloff; // 0x38(0x01)
	bool bAffectsTranslucency; // 0x39(0x01)
	bool bPreviewLightRadius; // 0x3a(0x01)
	char pad_3B[0x1]; // 0x3b(0x01)
	float SpawnFraction; // 0x3c(0x04)
	struct FRawDistributionVector ColorScaleOverLife; // 0x40(0x48)
	struct FRawDistributionFloat BrightnessOverLife; // 0x88(0x30)
	struct FRawDistributionFloat RadiusScale; // 0xb8(0x30)
	struct FRawDistributionFloat LightExponent; // 0xe8(0x30)
	struct FLightingChannels LightingChannels; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float VolumetricScatteringIntensity; // 0x11c(0x04)
	bool bHighQualityLights; // 0x120(0x01)
	bool bShadowCastingLights; // 0x121(0x01)
	char pad_122[0x6]; // 0x122(0x06)
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x148 (Inherited: 0x128)
struct UParticleModuleLight_Seeded : UParticleModuleLight {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x128(0x20)
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleLocationBase : UParticleModule {
};

// Class Engine.ParticleModuleLocation
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleLocation : UParticleModuleLocationBase {
	struct FRawDistributionVector StartLocation; // 0x38(0x48)
	float DistributeOverNPoints; // 0x80(0x04)
	float DistributeThreshold; // 0x84(0x04)
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xa8 (Inherited: 0x88)
struct UParticleModuleLocation_Seeded : UParticleModuleLocation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase {
	enum class ELocationBoneSocketSource SourceType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector UniversalOffset; // 0x3c(0x0c)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x48(0x10)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	char bUpdatePositionEachFrame : 1; // 0x5c(0x01)
	char bOrientMeshEmitters : 1; // 0x5c(0x01)
	char bInheritBoneVelocity : 1; // 0x5c(0x01)
	char pad_5C_3 : 5; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	float InheritVelocityScale; // 0x60(0x04)
	struct FName SkelMeshActorParamName; // 0x64(0x0c)
	int32_t NumPreSelectedIndices; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x158 (Inherited: 0x38)
struct UParticleModuleLocationDirect : UParticleModuleLocationBase {
	struct FRawDistributionVector Location; // 0x38(0x48)
	struct FRawDistributionVector LocationOffset; // 0x80(0x48)
	struct FRawDistributionVector ScaleFactor; // 0xc8(0x48)
	struct FRawDistributionVector Direction; // 0x110(0x48)
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x58 (Inherited: 0x38)
struct UParticleModuleLocationEmitter : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x38(0x0c)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	char InheritSourceVelocity : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float InheritSourceVelocityScale; // 0x4c(0x04)
	char bInheritSourceRotation : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float InheritSourceRotationScale; // 0x54(0x04)
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xb8 (Inherited: 0x38)
struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase {
	char Positive_X : 1; // 0x38(0x01)
	char Positive_Y : 1; // 0x38(0x01)
	char Positive_Z : 1; // 0x38(0x01)
	char Negative_X : 1; // 0x38(0x01)
	char Negative_Y : 1; // 0x38(0x01)
	char Negative_Z : 1; // 0x38(0x01)
	char SurfaceOnly : 1; // 0x38(0x01)
	char Velocity : 1; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionFloat VelocityScale; // 0x40(0x30)
	struct FRawDistributionVector StartLocation; // 0x70(0x48)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x128 (Inherited: 0xb8)
struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase {
	char RadialVelocity : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FRawDistributionFloat StartRadius; // 0xc0(0x30)
	struct FRawDistributionFloat StartHeight; // 0xf0(0x30)
	enum class CylinderHeightAxis HeightAxis; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x148 (Inherited: 0x128)
struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x128(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xe8 (Inherited: 0xb8)
struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase {
	struct FRawDistributionFloat StartRadius; // 0xb8(0x30)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x108 (Inherited: 0xe8)
struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xe8(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x110 (Inherited: 0x38)
struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase {
	struct FRawDistributionVector StartOffset; // 0x38(0x48)
	struct FRawDistributionFloat Height; // 0x80(0x30)
	struct FRawDistributionFloat Angle; // 0xb0(0x30)
	struct FRawDistributionFloat Thickness; // 0xe0(0x30)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0xa0 (Inherited: 0x38)
struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase {
	enum class ELocationSkelVertSurfaceSource SourceType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector UniversalOffset; // 0x3c(0x0c)
	char bUpdatePositionEachFrame : 1; // 0x48(0x01)
	char bOrientMeshEmitters : 1; // 0x48(0x01)
	char bInheritBoneVelocity : 1; // 0x48(0x01)
	char pad_48_3 : 5; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float InheritVelocityScale; // 0x4c(0x04)
	struct FName SkelMeshActorParamName; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TArray<struct FName> ValidAssociatedBones; // 0x60(0x10)
	char bEnforceNormalCheck : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FVector NormalToCompare; // 0x74(0x0c)
	float NormalCheckToleranceDegrees; // 0x80(0x04)
	float NormalCheckTolerance; // 0x84(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x88(0x10)
	char bInheritVertexColor : 1; // 0x98(0x01)
	char bInheritUV : 1; // 0x98(0x01)
	char pad_98_2 : 6; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	uint32_t InheritUVChannel; // 0x9c(0x04)
};

// Class Engine.ParticleModuleLocationStaticVertSurface
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleLocationStaticVertSurface : UParticleModuleLocationBase {
	enum class ELocationSkelVertSurfaceSource SourceType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector UniversalOffset; // 0x3c(0x0c)
	char bOrientMeshEmitters : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName StaticMeshActorParamName; // 0x4c(0x0c)
	char bEnforceNormalCheck : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FVector NormalToCompare; // 0x5c(0x0c)
	float NormalCheckToleranceDegrees; // 0x68(0x04)
	float NormalCheckTolerance; // 0x6c(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x70(0x10)
	char bInheritVertexColor : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x88 (Inherited: 0x88)
struct UParticleModuleLocationWorldOffset : UParticleModuleLocation {
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xa8 (Inherited: 0x88)
struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleMaterialBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase {
	struct TArray<struct UMaterialInterface*> MeshMaterials; // 0x38(0x10)
};

// Class Engine.ParticleModuleMeshPivotOffset
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleMeshPivotOffset : UParticleModuleLocationBase {
	struct FVector PivotOffset; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleRotationBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleMeshRotation : UParticleModuleRotationBase {
	struct FRawDistributionVector StartRotation; // 0x38(0x48)
	char bInheritParent : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xa8 (Inherited: 0x88)
struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x88(0x20)
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleRotationRateBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionVector StartRotationRate; // 0x38(0x48)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector LifeMultiplier; // 0x38(0x48)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector rotRate; // 0x38(0x48)
	char bScaleRotRate : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleOrbitBase : UParticleModule {
	char bUseEmitterTime : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleOrbit
// Size: 0x138 (Inherited: 0x40)
struct UParticleModuleOrbit : UParticleModuleOrbitBase {
	enum class EOrbitChainMode ChainMode; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FRawDistributionVector OffsetAmount; // 0x48(0x48)
	struct FOrbitOptions OffsetOptions; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FRawDistributionVector RotationAmount; // 0x98(0x48)
	struct FOrbitOptions RotationOptions; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct FRawDistributionVector RotationRateAmount; // 0xe8(0x48)
	struct FOrbitOptions RotationRateOptions; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleOrientationBase : UParticleModule {
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase {
	enum class EParticleAxisLock LockAxisFlags; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleParameterBase : UParticleModule {
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x50 (Inherited: 0x38)
struct UParticleModuleParameterDynamic : UParticleModuleParameterBase {
	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x38(0x10)
	int32_t UpdateFlags; // 0x48(0x04)
	char bUsesVelocity : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x70 (Inherited: 0x50)
struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x50(0x20)
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x40 (Inherited: 0x38)
struct UParticleModulePivotOffset : UParticleModuleLocationBase {
	struct FVector2D PivotOffset; // 0x38(0x08)
};

// Class Engine.ParticleModulePreciseLifetime
// Size: 0x38 (Inherited: 0x38)
struct UParticleModulePreciseLifetime : UParticleModuleLifetimeBase {
};

// Class Engine.ParticleModuleRequired
// Size: 0x148 (Inherited: 0x38)
struct UParticleModuleRequired : UParticleModule {
	struct UMaterialInterface* Material; // 0x38(0x08)
	float MinFacingCameraBlendDistance; // 0x40(0x04)
	float MaxFacingCameraBlendDistance; // 0x44(0x04)
	struct FVector EmitterOrigin; // 0x48(0x0c)
	struct FRotator EmitterRotation; // 0x54(0x0c)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x60(0x01)
	char bUseLocalSpace : 1; // 0x61(0x01)
	char bKillOnDeactivate : 1; // 0x61(0x01)
	char bKillOnCompleted : 1; // 0x61(0x01)
	char pad_61_3 : 5; // 0x61(0x01)
	enum class EParticleSortMode SortMode; // 0x62(0x01)
	char bUseLegacyEmitterTime : 1; // 0x63(0x01)
	char bRemoveHMDRoll : 1; // 0x63(0x01)
	char bEmitterDurationUseRange : 1; // 0x63(0x01)
	char pad_63_3 : 5; // 0x63(0x01)
	float EmitterDuration; // 0x64(0x04)
	struct FRawDistributionFloat SpawnRate; // 0x68(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0x98(0x10)
	float EmitterDelay; // 0xa8(0x04)
	float EmitterDelayLow; // 0xac(0x04)
	char bDelayFirstLoopOnly : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xb1(0x01)
	char bScaleUV : 1; // 0xb2(0x01)
	char bEmitterDelayUseRange : 1; // 0xb2(0x01)
	char pad_B2_2 : 6; // 0xb2(0x01)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xb3(0x01)
	char bOverrideSystemMacroUV : 1; // 0xb4(0x01)
	char bUseMaxDrawCount : 1; // 0xb4(0x01)
	char pad_B4_2 : 6; // 0xb4(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xb5(0x01)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xb6(0x01)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xb7(0x01)
	char pad_B7_1 : 7; // 0xb7(0x01)
	int32_t SubImages_Horizontal; // 0xb8(0x04)
	int32_t SubImages_Vertical; // 0xbc(0x04)
	float RandomImageTime; // 0xc0(0x04)
	int32_t RandomImageChanges; // 0xc4(0x04)
	struct FVector MacroUVPosition; // 0xc8(0x0c)
	float MacroUVRadius; // 0xd4(0x04)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xd8(0x01)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xd9(0x01)
	char bDurationRecalcEachLoop : 1; // 0xda(0x01)
	char pad_DA_1 : 7; // 0xda(0x01)
	char pad_DB[0x1]; // 0xdb(0x01)
	struct FVector NormalsSphereCenter; // 0xdc(0x0c)
	float AlphaThreshold; // 0xe8(0x04)
	int32_t EmitterLoops; // 0xec(0x04)
	struct UTexture2D* CutoutTexture; // 0xf0(0x08)
	int32_t MaxDrawCount; // 0xf8(0x04)
	float EmitterDurationLow; // 0xfc(0x04)
	struct FVector NormalsCylinderDirection; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x110(0x10)
	char pad_120[0x28]; // 0x120(0x28)
};

// Class Engine.ParticleModuleRotation
// Size: 0x68 (Inherited: 0x38)
struct UParticleModuleRotation : UParticleModuleRotationBase {
	struct FRawDistributionFloat StartRotation; // 0x38(0x30)
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x88 (Inherited: 0x68)
struct UParticleModuleRotation_Seeded : UParticleModuleRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase {
	struct FRawDistributionFloat RotationOverLife; // 0x38(0x30)
	char Scale : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x68 (Inherited: 0x38)
struct UParticleModuleRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat StartRotationRate; // 0x38(0x30)
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x88 (Inherited: 0x68)
struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x68(0x20)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x68 (Inherited: 0x38)
struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat LifeMultiplier; // 0x38(0x30)
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleSizeBase : UParticleModule {
};

// Class Engine.ParticleModuleSize
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleSize : UParticleModuleSizeBase {
	struct FRawDistributionVector StartSize; // 0x38(0x48)
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleSize_Seeded : UParticleModuleSize {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase {
	struct FRawDistributionVector LifeMultiplier; // 0x38(0x48)
	char MultiplyX : 1; // 0x80(0x01)
	char MultiplyY : 1; // 0x80(0x01)
	char MultiplyZ : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleSizeScale : UParticleModuleSizeBase {
	struct FRawDistributionVector SizeScale; // 0x38(0x48)
	char EnableX : 1; // 0x80(0x01)
	char EnableY : 1; // 0x80(0x01)
	char EnableZ : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase {
	struct FVector2D SpeedScale; // 0x38(0x08)
	struct FVector2D MaxScale; // 0x40(0x08)
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleSourceMovement : UParticleModuleLocationBase {
	struct FRawDistributionVector SourceMovementScale; // 0x38(0x48)
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleSpawnBase : UParticleModule {
	char bProcessSpawnRate : 1; // 0x38(0x01)
	char bProcessBurstList : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleSpawn
// Size: 0xf0 (Inherited: 0x40)
struct UParticleModuleSpawn : UParticleModuleSpawnBase {
	struct FRawDistributionFloat Rate; // 0x40(0x30)
	struct FRawDistributionFloat RateScale; // 0x70(0x30)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct TArray<struct FParticleBurst> BurstList; // 0xa8(0x10)
	struct FRawDistributionFloat BurstScale; // 0xb8(0x30)
	char bApplyGlobalSpawnRateScale : 1; // 0xe8(0x01)
	char pad_E8_1 : 7; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x80 (Inherited: 0x40)
struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase {
	float UnitScalar; // 0x40(0x04)
	float MovementTolerance; // 0x44(0x04)
	struct FRawDistributionFloat SpawnPerUnit; // 0x48(0x30)
	float MaxFrameDistance; // 0x78(0x04)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongX : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongY : 1; // 0x7c(0x01)
	char bIgnoreMovementAlongZ : 1; // 0x7c(0x01)
	char pad_7C_4 : 4; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleSubUVBase : UParticleModule {
};

// Class Engine.ParticleModuleSubUV
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleSubUV : UParticleModuleSubUVBase {
	struct USubUVAnimation* Animation; // 0x38(0x08)
	struct FRawDistributionFloat SubImageIndex; // 0x40(0x30)
	char bUseRealTime : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb8 (Inherited: 0x78)
struct UParticleModuleSubUVMovie : UParticleModuleSubUV {
	char bUseEmitterTime : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FRawDistributionFloat FrameRate; // 0x80(0x30)
	int32_t StartingFrame; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleTrailBase : UParticleModule {
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x98 (Inherited: 0x38)
struct UParticleModuleTrailSource : UParticleModuleTrailBase {
	enum class ETrail2SourceMethod SourceMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SourceName; // 0x3c(0x0c)
	struct FRawDistributionFloat SourceStrength; // 0x48(0x30)
	char bLockSourceStength : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	int32_t SourceOffsetCount; // 0x7c(0x04)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x80(0x10)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	char bInheritRotation : 1; // 0x94(0x01)
	char pad_94_1 : 7; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleTypeDataBase : UParticleModule {
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x50 (Inherited: 0x38)
struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase {
	char bDeadTrailsOnDeactivate : 1; // 0x38(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x38(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float TilingDistance; // 0x3c(0x04)
	float DistanceTessellationStepSize; // 0x40(0x04)
	float TangentTessellationStepSize; // 0x44(0x04)
	float WidthTessellationStepSize; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x158 (Inherited: 0x38)
struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase {
	enum class EBeam2Method BeamMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t TextureTile; // 0x3c(0x04)
	float TextureTileDistance; // 0x40(0x04)
	int32_t Sheets; // 0x44(0x04)
	int32_t MaxBeamCount; // 0x48(0x04)
	float Speed; // 0x4c(0x04)
	int32_t InterpolationPoints; // 0x50(0x04)
	char bAlwaysOn : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t UpVectorStepSize; // 0x58(0x04)
	struct FName BranchParentName; // 0x5c(0x0c)
	struct FRawDistributionFloat Distance; // 0x68(0x30)
	enum class EBeamTaperMethod TaperMethod; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FRawDistributionFloat TaperFactor; // 0xa0(0x30)
	struct FRawDistributionFloat TaperScale; // 0xd0(0x30)
	char RenderGeometry : 1; // 0x100(0x01)
	char RenderDirectLine : 1; // 0x100(0x01)
	char RenderLines : 1; // 0x100(0x01)
	char RenderTessellation : 1; // 0x100(0x01)
	char pad_100_4 : 4; // 0x100(0x01)
	char pad_101[0x57]; // 0x101(0x57)
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x430 (Inherited: 0x38)
struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase {
	char pad_38[0x8]; // 0x38(0x08)
	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x40(0x280)
	struct FGPUSpriteResourceData ResourceData; // 0x2c0(0x160)
	float CameraMotionBlurAmount; // 0x420(0x04)
	char bClearExistingParticlesOnInit : 1; // 0x424(0x01)
	char pad_424_1 : 7; // 0x424(0x01)
	char pad_425[0xb]; // 0x425(0x0b)
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0xd8 (Inherited: 0x38)
struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase {
	struct UStaticMesh* Mesh; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	float LODSizeScale; // 0x58(0x04)
	bool bIsDecal; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	uint32_t DecalSortOrder; // 0x60(0x04)
	uint32_t DecalPoolCount; // 0x64(0x04)
	struct FName DecalColorName; // 0x68(0x0c)
	struct FName DecalDynamicParameterName; // 0x74(0x0c)
	bool bNeverOutline; // 0x80(0x01)
	char bUseStaticMeshLODs : 1; // 0x81(0x01)
	char CastShadows : 1; // 0x81(0x01)
	char DoCollisions : 1; // 0x81(0x01)
	char pad_81_3 : 5; // 0x81(0x01)
	enum class EMeshScreenAlignment MeshAlignment; // 0x82(0x01)
	char bOverrideMaterial : 1; // 0x83(0x01)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x83(0x01)
	char bEnableMotionBlur : 1; // 0x83(0x01)
	char pad_83_3 : 5; // 0x83(0x01)
	char pad_84[0x4]; // 0x84(0x04)
	struct FRawDistributionVector RollPitchYawRange; // 0x88(0x48)
	enum class EParticleAxisLock AxisLockOption; // 0xd0(0x01)
	char bCameraFacing : 1; // 0xd1(0x01)
	char pad_D1_1 : 7; // 0xd1(0x01)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0xd2(0x01)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0xd3(0x01)
	char bApplyParticleRotationAsSpin : 1; // 0xd4(0x01)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0xd4(0x01)
	char bCollisionsConsiderPartilceSize : 1; // 0xd4(0x01)
	char pad_D4_3 : 5; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
};

// Class Engine.ParticleModuleTypeDataPatch
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleTypeDataPatch : UParticleModuleTypeDataBase {
	float PatchSpacing; // 0x38(0x04)
	int32_t PatchCellRadius; // 0x3c(0x04)
	float TotalPatchDiameter; // 0x40(0x04)
	float MaterialRadius; // 0x44(0x04)
	bool bUseBlueprintSpawning; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FVector PreviewLocation; // 0x4c(0x0c)
	struct FName DecalColorName; // 0x58(0x0c)
	struct FName DecalDynamicParameterName; // 0x64(0x0c)
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x68 (Inherited: 0x38)
struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase {
	int32_t MaxTessellationBetweenParticles; // 0x38(0x04)
	int32_t SheetsPerTrail; // 0x3c(0x04)
	int32_t MaxTrailCount; // 0x40(0x04)
	int32_t MaxParticleInTrailCount; // 0x44(0x04)
	char bDeadTrailsOnDeactivate : 1; // 0x48(0x01)
	char bDeadTrailsOnSourceLoss : 1; // 0x48(0x01)
	char bClipSourceSegement : 1; // 0x48(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x48(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x48(0x01)
	char bSpawnInitialParticle : 1; // 0x48(0x01)
	char pad_48_6 : 2; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float TangentSpawningScalar; // 0x50(0x04)
	char bRenderGeometry : 1; // 0x54(0x01)
	char bRenderSpawnPoints : 1; // 0x54(0x01)
	char bRenderTangents : 1; // 0x54(0x01)
	char bRenderTessellation : 1; // 0x54(0x01)
	char pad_54_4 : 4; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float TilingDistance; // 0x58(0x04)
	float DistanceTessellationStepSize; // 0x5c(0x04)
	char bEnableTangentDiffInterpScale : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float TangentTessellationScalar; // 0x64(0x04)
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x38 (Inherited: 0x38)
struct UParticleModuleVectorFieldBase : UParticleModule {
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float GlobalVectorFieldScale; // 0x3c(0x04)
	float GlobalVectorFieldTightness; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase {
	struct UVectorField* VectorField; // 0x38(0x08)
	struct FVector RelativeTranslation; // 0x40(0x0c)
	struct FRotator RelativeRotation; // 0x4c(0x0c)
	struct FVector RelativeScale3D; // 0x58(0x0c)
	float Intensity; // 0x64(0x04)
	float Tightness; // 0x68(0x04)
	char bIgnoreComponentTransform : 1; // 0x6c(0x01)
	char bTileX : 1; // 0x6c(0x01)
	char bTileY : 1; // 0x6c(0x01)
	char bTileZ : 1; // 0x6c(0x01)
	char bUseFixDT : 1; // 0x6c(0x01)
	char pad_6C_5 : 3; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x50 (Inherited: 0x38)
struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase {
	struct FVector MinInitialRotation; // 0x38(0x0c)
	struct FVector MaxInitialRotation; // 0x44(0x0c)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase {
	struct FVector RotationRate; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScale; // 0x38(0x08)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScaleOverLife; // 0x38(0x08)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleVelocityBase : UParticleModule {
	char bInWorldSpace : 1; // 0x38(0x01)
	char bApplyOwnerScale : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ParticleModuleVelocity
// Size: 0xb8 (Inherited: 0x40)
struct UParticleModuleVelocity : UParticleModuleVelocityBase {
	struct FRawDistributionVector StartVelocity; // 0x40(0x48)
	struct FRawDistributionFloat StartVelocityRadial; // 0x88(0x30)
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xd8 (Inherited: 0xb8)
struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb8(0x20)
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xb0 (Inherited: 0x40)
struct UParticleModuleVelocityCone : UParticleModuleVelocityBase {
	struct FRawDistributionFloat Angle; // 0x40(0x30)
	struct FRawDistributionFloat Velocity; // 0x70(0x30)
	struct FVector Direction; // 0xa0(0x0c)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x88 (Inherited: 0x40)
struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase {
	struct FRawDistributionVector Scale; // 0x40(0x48)
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0x90 (Inherited: 0x40)
struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase {
	struct FRawDistributionVector VelOverLife; // 0x40(0x48)
	char Absolute : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1c0 (Inherited: 0x1c0)
struct UParticleSpriteEmitter : UParticleEmitter {
};

// Class Engine.FXSystemAsset
// Size: 0x38 (Inherited: 0x30)
struct UFXSystemAsset : UObject {
	uint32_t MaxPoolSize; // 0x30(0x04)
	uint32_t PoolPrimeSize; // 0x34(0x04)
};

// Class Engine.ParticleSystem
// Size: 0x118 (Inherited: 0x38)
struct UParticleSystem : UFXSystemAsset {
	float UpdateTime_FPS; // 0x38(0x04)
	float UpdateTime_Delta; // 0x3c(0x04)
	float WarmupTime; // 0x40(0x04)
	float WarmupTickRate; // 0x44(0x04)
	struct TArray<struct UParticleEmitter*> Emitters; // 0x48(0x10)
	struct UParticleSystemComponent* PreviewComponent; // 0x58(0x08)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x60(0x08)
	float LODDistanceCheckTime; // 0x68(0x04)
	float MacroUVRadius; // 0x6c(0x04)
	struct TArray<float> LODDistances; // 0x70(0x10)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x80(0x10)
	struct FBox FixedRelativeBoundingBox; // 0x90(0x1c)
	float SecondsBeforeInactive; // 0xac(0x04)
	float Delay; // 0xb0(0x04)
	float DelayLow; // 0xb4(0x04)
	char bOrientZAxisTowardCamera : 1; // 0xb8(0x01)
	char bUseFixedRelativeBoundingBox : 1; // 0xb8(0x01)
	char bShouldResetPeakCounts : 1; // 0xb8(0x01)
	char bHasPhysics : 1; // 0xb8(0x01)
	char bUseRealtimeThumbnail : 1; // 0xb8(0x01)
	char ThumbnailImageOutOfDate : 1; // 0xb8(0x01)
	char pad_B8_6 : 2; // 0xb8(0x01)
	char bUseDelayRange : 1; // 0xb9(0x01)
	char bAllowManagedTicking : 1; // 0xb9(0x01)
	char bAutoDeactivate : 1; // 0xb9(0x01)
	char bRegenerateLODDuplicate : 1; // 0xb9(0x01)
	char pad_B9_4 : 4; // 0xb9(0x01)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xba(0x01)
	enum class ParticleSystemLODMethod LODMethod; // 0xbb(0x01)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xbc(0x01)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xbd(0x01)
	char pad_BE[0x1]; // 0xbe(0x01)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xbf(0x01)
	uint32_t MinTimeBetweenTicks; // 0xc0(0x04)
	float InsignificanceDelay; // 0xc4(0x04)
	struct FVector MacroUVPosition; // 0xc8(0x0c)
	struct FBox CustomOcclusionBounds; // 0xd4(0x1c)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0xf0(0x10)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0x100(0x10)
	char pad_110[0x8]; // 0x110(0x08)

	bool ContainsEmitterType(struct UObject* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // @ game+0x535c8f0
};

// Class Engine.FXSystemComponent
// Size: 0x550 (Inherited: 0x550)
struct UFXSystemComponent : UPrimitiveComponent {

	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535ead0
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment // (Native|Public|BlueprintCallable) // @ game+0x535ea30
	void SetIntParameter(struct FName ParameterName, int32_t Param); // Function Engine.FXSystemComponent.SetIntParameter // (Native|Public|BlueprintCallable) // @ game+0x535e640
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x535e540
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable // (Native|Public|BlueprintCallable) // @ game+0x535e450
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535e350
	void SetBoolParameter(struct FName ParameterName, bool Param); // Function Engine.FXSystemComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x535e260
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters // (Native|Public|BlueprintCallable) // @ game+0x535d8e0
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter // (Native|Public|BlueprintCallable) // @ game+0x535d6a0
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool // (Native|Public|BlueprintCallable) // @ game+0x535d670
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d460
};

// Class Engine.ParticleSystemComponent
// Size: 0x800 (Inherited: 0x550)
struct UParticleSystemComponent : UFXSystemComponent {
	struct UParticleSystem* Template; // 0x548(0x08)
	struct TArray<struct UMaterialInterface*> EmitterMaterials; // 0x550(0x10)
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents; // 0x560(0x10)
	struct FVector PatchCenter; // 0x574(0x0c)
	struct FVector2D PatchRadiusAndHeight; // 0x580(0x08)
	char pad_58C_0 : 7; // 0x58c(0x01)
	char bResetOnDetach : 1; // 0x588(0x01)
	char bUpdateOnDedicatedServer : 1; // 0x589(0x01)
	char pad_58D_1 : 2; // 0x58d(0x01)
	char bAllowRecycling : 1; // 0x589(0x01)
	char bAutoManageAttachment : 1; // 0x589(0x01)
	char bAutoAttachWeldSimulatedBodies : 1; // 0x589(0x01)
	char bWarmingUp : 1; // 0x58a(0x01)
	char bOverrideLODMethod : 1; // 0x58a(0x01)
	char pad_58E_0 : 2; // 0x58e(0x01)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x58a(0x01)
	char pad_58E_3 : 5; // 0x58e(0x01)
	char pad_58F[0x6]; // 0x58f(0x06)
	enum class ParticleSystemLODMethod LODMethod; // 0x595(0x01)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x596(0x01)
	enum class EAresParticleVariantColor ParticleVariantColor; // 0x597(0x01)
	struct FName LUTVariantParameter; // 0x598(0x0c)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x5a8(0x10)
	struct TArray<struct FTransform> PatchGrid; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x5f8(0x10)
	bool bOldPositionValid; // 0x608(0x01)
	char pad_609[0x3]; // 0x609(0x03)
	struct FVector OldPosition; // 0x60c(0x0c)
	struct FVector PartSysVelocity; // 0x618(0x0c)
	float WarmupTime; // 0x624(0x04)
	float AdditionalWarmupTime; // 0x628(0x04)
	float WarmupTickRate; // 0x62c(0x04)
	char pad_630[0x4]; // 0x630(0x04)
	float SecondsBeforeInactive; // 0x634(0x04)
	char pad_638[0x4]; // 0x638(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x63c(0x04)
	char pad_640[0x20]; // 0x640(0x20)
	struct TArray<struct UParticleSystemReplay*> ReplayClips; // 0x660(0x10)
	char pad_670[0x8]; // 0x670(0x08)
	float CustomTimeDilation; // 0x678(0x04)
	char pad_67C[0x54]; // 0x67c(0x54)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x6d0(0x08)
	struct FName AutoAttachSocketName; // 0x6d8(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x6e4(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x6e5(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x6e6(0x01)
	char pad_6E7[0x31]; // 0x6e7(0x31)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x718(0x10)
	char pad_728[0xd8]; // 0x728(0xd8)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // @ game+0x535e8b0
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x535e820
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x535e730
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535e130
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength // (Native|Public|BlueprintCallable) // @ game+0x535e020
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535def0
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535ddc0
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength // (Native|Public|BlueprintCallable) // @ game+0x535dcb0
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535db80
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535da90
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams // (Final|Native|Public|BlueprintCallable) // @ game+0x535d790
	void PrestreamTextures(float Seconds, int32_t CinematicTextureGroups); // Function Engine.ParticleSystemComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x535d590
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d560
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d4a0
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d340
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d210
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x535d0f0
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x535cfd0
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x535cea0
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x535cd80
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x535cc90
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x535cab0
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x535ca90
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x535c990
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x535c770
};

// Class Engine.ParticleSystemReplay
// Size: 0x48 (Inherited: 0x30)
struct UParticleSystemReplay : UObject {
	int32_t ClipIDNumber; // 0x30(0x04)
	char pad_34[0x14]; // 0x34(0x14)
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x30 (Inherited: 0x30)
struct UPathFollowingAgentInterface : UInterface {
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0x110 (Inherited: 0xe8)
struct UPawnNoiseEmitterComponent : UActorComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xe8(0x01)
	char pad_E8_1 : 7; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	struct FVector LastRemoteNoisePosition; // 0xec(0x0c)
	float NoiseLifetime; // 0xf8(0x04)
	float LastRemoteNoiseVolume; // 0xfc(0x04)
	float LastRemoteNoiseTime; // 0x100(0x04)
	float LastLocalNoiseVolume; // 0x104(0x04)
	float LastLocalNoiseTime; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)

	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5363d30
};

// Class Engine.PhysicalAnimationComponent
// Size: 0x128 (Inherited: 0xe8)
struct UPhysicalAnimationComponent : UActorComponent {
	float StrengthMultiplyer; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // @ game+0x5364270
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53641e0
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53637c0
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5363580
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5363470
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x53632f0
};

// Class Engine.PhysicalMaterialMask
// Size: 0x38 (Inherited: 0x30)
struct UPhysicalMaterialMask : UObject {
	int32_t UVChannelIndex; // 0x30(0x04)
	enum class TextureAddress AddressX; // 0x34(0x01)
	enum class TextureAddress AddressY; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
};

// Class Engine.PhysicsAsset
// Size: 0x140 (Inherited: 0x30)
struct UPhysicsAsset : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<int32_t> BoundsBodies; // 0x38(0x10)
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups; // 0x48(0x10)
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup; // 0x58(0x10)
	struct FSolverIterations SolverIterations; // 0x68(0x1c)
	char bNotForDedicatedServer : 1; // 0x84(0x01)
	char pad_84_1 : 7; // 0x84(0x01)
	char pad_85[0xa3]; // 0x85(0xa3)
	struct UThumbnailInfo* ThumbnailInfo; // 0x128(0x08)
	struct TArray<struct UBodySetup*> BodySetup; // 0x130(0x10)
};

// Class Engine.SkeletalBodySetup
// Size: 0x2c8 (Inherited: 0x2b0)
struct USkeletalBodySetup : UBodySetup {
	bool bSkipScaleFromAnimation; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x2b8(0x10)
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x48 (Inherited: 0x30)
struct UPhysicsCollisionHandler : UObject {
	float ImpactThreshold; // 0x30(0x04)
	float ImpactReFireDelay; // 0x34(0x04)
	struct USoundBase* DefaultImpactSound; // 0x38(0x08)
	float LastImpactSoundTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.RigidBodyBase
// Size: 0x3d0 (Inherited: 0x3d0)
struct ARigidBodyBase : AActor {
};

// Class Engine.PhysicsConstraintActor
// Size: 0x3f0 (Inherited: 0x3d0)
struct APhysicsConstraintActor : ARigidBodyBase {
	struct UPhysicsConstraintComponent* ConstraintComp; // 0x3d0(0x08)
	struct AActor* ConstraintActor1; // 0x3d8(0x08)
	struct AActor* ConstraintActor2; // 0x3e0(0x08)
	char bDisableCollision : 1; // 0x3e8(0x01)
	char pad_3E8_1 : 7; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x4b0 (Inherited: 0x290)
struct UPhysicsConstraintComponent : USceneComponent {
	struct AActor* ConstraintActor1; // 0x288(0x08)
	struct FConstrainComponentPropName ComponentName1; // 0x290(0x0c)
	struct AActor* ConstraintActor2; // 0x2a0(0x08)
	struct FConstrainComponentPropName ComponentName2; // 0x2a8(0x0c)
	char pad_2B8[0x10]; // 0x2b8(0x10)
	struct UPhysicsConstraintTemplate* ConstraintSetup; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x2d0(0x10)
	struct FConstraintInstance ConstraintInstance; // 0x2e0(0x1d0)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x5369c30
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x5369ba0
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x5369ad0
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x5369a00
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x5369930
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53698a0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x5369770
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5369660
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x5369530
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x5369410
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x53692c0
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x53691b0
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53690e0
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5368fb0
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5368e90
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x5368d20
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5368c90
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x5368bc0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x5368b30
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x5368a60
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x5368990
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x53688c0
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x53687f0
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53686e0
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x5368610
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x53684f0
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x5368470
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x5368320
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken // (Final|Native|Public|BlueprintCallable) // @ game+0x53682f0
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5367d90
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5367d60
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5367d30
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x5367c50
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x5367c30
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x320 (Inherited: 0x30)
struct UPhysicsConstraintTemplate : UObject {
	struct FConstraintInstance DefaultInstance; // 0x30(0x1d0)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x200(0x10)
	struct FConstraintProfileProperties DefaultProfile; // 0x210(0x10c)
	char pad_31C[0x4]; // 0x31c(0x04)
};

// Class Engine.PhysicsHandleComponent
// Size: 0x190 (Inherited: 0xe8)
struct UPhysicsHandleComponent : UActorComponent {
	struct UPrimitiveComponent* GrabbedComponent; // 0xe8(0x08)
	char pad_F0[0xc]; // 0xf0(0x0c)
	char pad_FC_0 : 1; // 0xfc(0x01)
	char bSoftAngularConstraint : 1; // 0xfc(0x01)
	char bSoftLinearConstraint : 1; // 0xfc(0x01)
	char bInterpolateTarget : 1; // 0xfc(0x01)
	char pad_FC_4 : 4; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float LinearDamping; // 0x100(0x04)
	float LinearStiffness; // 0x104(0x04)
	float AngularDamping; // 0x108(0x04)
	float AngularStiffness; // 0x10c(0x04)
	char pad_110[0x60]; // 0x110(0x60)
	float InterpolationSpeed; // 0x170(0x04)
	char pad_174[0x1c]; // 0x174(0x1c)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5369e70
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5369d90
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5369d00
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x53696f0
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x5369390
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x5369240
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x5368770
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x53683f0
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent // (Native|Public|BlueprintCallable) // @ game+0x2d32880
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5368160
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5368020
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5367ea0
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5367dc0
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2b7d190
};

// Class Engine.PhysicsSettings
// Size: 0x1b0 (Inherited: 0xf0)
struct UPhysicsSettings : UPhysicsSettingsCore {
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0xf0(0x34)
	enum class ESettingsLockedAxis LockedAxis; // 0x124(0x01)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x125(0x01)
	bool bSuppressFaceRemapTable; // 0x126(0x01)
	bool bSupportUVFromHitResults; // 0x127(0x01)
	bool bDisableActiveActors; // 0x128(0x01)
	bool bDisableKinematicStaticPairs; // 0x129(0x01)
	bool bDisableKinematicKinematicPairs; // 0x12a(0x01)
	bool bDisableCCD; // 0x12b(0x01)
	bool bEnableEnhancedDeterminism; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	float AnimPhysicsMinDeltaTime; // 0x130(0x04)
	bool bSimulateAnimPhysicsAfterReset; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	float MaxPhysicsDeltaTime; // 0x138(0x04)
	bool bSubstepping; // 0x13c(0x01)
	bool bSubsteppingAsync; // 0x13d(0x01)
	char pad_13E[0x2]; // 0x13e(0x02)
	float MaxSubstepDeltaTime; // 0x140(0x04)
	int32_t MaxSubsteps; // 0x144(0x04)
	float SyncSceneSmoothingFactor; // 0x148(0x04)
	float InitialAverageFrameRate; // 0x14c(0x04)
	int32_t PhysXTreeRebuildRate; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0x158(0x10)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0x168(0x40)
	float MinDeltaVelocityForHitEvents; // 0x1a8(0x04)
	struct FChaosPhysicsSettings ChaosSettings; // 0x1ac(0x03)
	char pad_1AF[0x1]; // 0x1af(0x01)
};

// Class Engine.PhysicsSpringComponent
// Size: 0x2b0 (Inherited: 0x290)
struct UPhysicsSpringComponent : USceneComponent {
	float SpringStiffness; // 0x288(0x04)
	float SpringDamping; // 0x28c(0x04)
	float SpringLengthAtRest; // 0x290(0x04)
	float SpringRadius; // 0x294(0x04)
	enum class ECollisionChannel SpringChannel; // 0x298(0x01)
	bool bIgnoreSelf; // 0x299(0x01)
	float SpringCompression; // 0x29c(0x04)
	char pad_2A6[0xa]; // 0x2a6(0x0a)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f820
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f7e0
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f7a0
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x536f730
};

// Class Engine.PhysicsThruster
// Size: 0x3d8 (Inherited: 0x3d0)
struct APhysicsThruster : ARigidBodyBase {
	struct UPhysicsThrusterComponent* ThrusterComponent; // 0x3d0(0x08)
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x290 (Inherited: 0x290)
struct UPhysicsThrusterComponent : USceneComponent {
	float ThrustStrength; // 0x288(0x04)
};

// Class Engine.PlanarReflection
// Size: 0x3f0 (Inherited: 0x3e0)
struct APlanarReflection : ASceneCapture {
	struct UPlanarReflectionComponent* PlanarReflectionComponent; // 0x3e0(0x08)
	bool bShowPreviewPlane; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x536f8c0
};

// Class Engine.SceneCaptureComponent
// Size: 0x340 (Inherited: 0x290)
struct USceneCaptureComponent : USceneComponent {
	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x288(0x01)
	enum class ESceneCaptureSource CaptureSource; // 0x289(0x01)
	char bCaptureEveryFrame : 1; // 0x28a(0x01)
	char bCaptureOnMovement : 1; // 0x28a(0x01)
	bool bAlwaysPersistRenderingState; // 0x28b(0x01)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x290(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x2a0(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x2b0(0x10)
	struct TArray<struct AActor*> ShowOnlyActors; // 0x2c0(0x10)
	float LODDistanceFactor; // 0x2d0(0x04)
	float MaxViewDistanceOverride; // 0x2d4(0x04)
	int32_t CaptureSortPriority; // 0x2d8(0x04)
	bool bUseRayTracingIfEnabled; // 0x2dc(0x01)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x2e0(0x10)
	char pad_2F0_2 : 6; // 0x2f0(0x01)
	char pad_2F1[0x2f]; // 0x2f1(0x2f)
	struct FString ProfilingEventName; // 0x320(0x10)
	char pad_330[0x10]; // 0x330(0x10)

	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53c0790
	void ShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53c06c0
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x53c01c0
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53bffe0
	void RemoveShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53bff10
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53bd740
	void HideActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53bd670
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53bcc20
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x53bcc00
};

// Class Engine.PlanarReflectionComponent
// Size: 0x430 (Inherited: 0x340)
struct UPlanarReflectionComponent : USceneCaptureComponent {
	struct UBoxComponent* PreviewBox; // 0x340(0x08)
	float NormalDistortionStrength; // 0x348(0x04)
	float PrefilterRoughness; // 0x34c(0x04)
	float PrefilterRoughnessDistance; // 0x350(0x04)
	int32_t ScreenPercentage; // 0x354(0x04)
	float ExtraFOV; // 0x358(0x04)
	float DistanceFromPlaneFadeStart; // 0x35c(0x04)
	float DistanceFromPlaneFadeEnd; // 0x360(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x364(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x368(0x04)
	float AngleFromPlaneFadeStart; // 0x36c(0x04)
	float AngleFromPlaneFadeEnd; // 0x370(0x04)
	bool bShowPreviewPlane; // 0x374(0x01)
	bool bRenderSceneTwoSided; // 0x375(0x01)
	char pad_376[0xba]; // 0x376(0xba)
};

// Class Engine.PlaneReflectionCapture
// Size: 0x3d8 (Inherited: 0x3d8)
struct APlaneReflectionCapture : AReflectionCapture {
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x318(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x320(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x328(0x08)
};

// Class Engine.PlatformEventsComponent
// Size: 0x108 (Inherited: 0xe8)
struct UPlatformEventsComponent : UActorComponent {
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xf8(0x10)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // @ game+0x5371030
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x33d1d50
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode // (Final|Native|Public|BlueprintCallable) // @ game+0x536f890
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode // (Final|Native|Public|BlueprintCallable) // @ game+0x536f860
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb8 (Inherited: 0x30)
struct UPlatformInterfaceWebResponse : UObject {
	struct FString OriginalURL; // 0x30(0x10)
	int32_t ResponseCode; // 0x40(0x04)
	int32_t Tag; // 0x44(0x04)
	struct FString StringResponse; // 0x48(0x10)
	struct TArray<char> BinaryResponse; // 0x58(0x10)
	char pad_68[0x50]; // 0x68(0x50)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // @ game+0x536f760
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue // (Native|Public) // @ game+0x536f620
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader // (Native|Public|HasOutParms) // @ game+0x536f4a0
};

// Class Engine.PlayerStartPIE
// Size: 0x408 (Inherited: 0x408)
struct APlayerStartPIE : APlayerStart {
};

// Class Engine.PluginCommandlet
// Size: 0xa8 (Inherited: 0x88)
struct UPluginCommandlet : UCommandlet {
	char pad_88[0x20]; // 0x88(0x20)
};

// Class Engine.PointLight
// Size: 0x3e8 (Inherited: 0x3e0)
struct APointLight : ALight {
	struct UPointLightComponent* PointLightComponent; // 0x3e0(0x08)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x538a5c0
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x538a430
};

// Class Engine.PointLightComponent
// Size: 0x400 (Inherited: 0x3e0)
struct UPointLightComponent : ULocalLightComponent {
	char bUseInverseSquaredFalloff : 1; // 0x3e0(0x01)
	char pad_3E0_1 : 7; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float LightFalloffExponent; // 0x3e4(0x04)
	float SourceRadius; // 0x3e8(0x04)
	float SoftSourceRadius; // 0x3ec(0x04)
	float SourceLength; // 0x3f0(0x04)
	char pad_3F4[0xc]; // 0x3f4(0x0c)

	void SetUseInverseSquaredFalloff(bool NewValue); // Function Engine.PointLightComponent.SetUseInverseSquaredFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x538a7c0
	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x538a740
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength // (Final|Native|Public|BlueprintCallable) // @ game+0x538a6c0
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x538a640
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x538a4b0
};

// Class Engine.Polys
// Size: 0x40 (Inherited: 0x30)
struct UPolys : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.PoseableMeshComponent
// Size: 0x910 (Inherited: 0x7b0)
struct UPoseableMeshComponent : USkinnedMeshComponent {
	char pad_7B0[0x160]; // 0x7b0(0x160)

	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x538a2b0
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x538a170
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x538a030
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5389ef0
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName // (Final|Native|Public|BlueprintCallable) // @ game+0x5389d40
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53899d0
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53898c0
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53897b0
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53896a0
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x5389610
};

// Class Engine.PoseAsset
// Size: 0x138 (Inherited: 0x90)
struct UPoseAsset : UAnimationAsset {
	struct FPoseDataContainer PoseContainer; // 0x90(0x90)
	bool bAdditivePose; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	int32_t BasePoseIndex; // 0x124(0x04)
	struct FName RetargetSource; // 0x128(0x0c)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class Engine.PoseWatch
// Size: 0x40 (Inherited: 0x30)
struct UPoseWatch : UObject {
	struct UEdGraphNode* Node; // 0x30(0x08)
	struct FColor PoseWatchColour; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.PostProcessComponent
// Size: 0x8a0 (Inherited: 0x290)
struct UPostProcessComponent : USceneComponent {
	struct FPostProcessSettings Settings; // 0x290(0x600)
	float Priority; // 0x890(0x04)
	float BlendRadius; // 0x894(0x04)
	float BlendWeight; // 0x898(0x04)
	char bEnabled : 1; // 0x89c(0x01)
	char bUnbound : 1; // 0x89c(0x01)
	char pad_89C_2 : 6; // 0x89c(0x01)
	char pad_89D[0x3]; // 0x89d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5389500
};

// Class Engine.PostProcessVolume
// Size: 0xa20 (Inherited: 0x408)
struct APostProcessVolume : AVolume {
	char pad_408[0x8]; // 0x408(0x08)
	struct FPostProcessSettings Settings; // 0x410(0x600)
	float Priority; // 0xa10(0x04)
	float BlendRadius; // 0xa14(0x04)
	float BlendWeight; // 0xa18(0x04)
	char bEnabled : 1; // 0xa1c(0x01)
	char bUnbound : 1; // 0xa1c(0x01)
	char pad_A1C_2 : 6; // 0xa1c(0x01)
	char pad_A1D[0x3]; // 0xa1d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x5389410
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x438 (Inherited: 0x408)
struct APrecomputedVisibilityOverrideVolume : AVolume {
	struct TArray<struct AActor*> OverrideVisibleActors; // 0x408(0x10)
	struct TArray<struct AActor*> OverrideInvisibleActors; // 0x418(0x10)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x428(0x10)
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x408 (Inherited: 0x408)
struct APrecomputedVisibilityVolume : AVolume {
};

// Class Engine.PreviewCollectionInterface
// Size: 0x30 (Inherited: 0x30)
struct UPreviewCollectionInterface : UInterface {
};

// Class Engine.PreviewMeshCollection
// Size: 0x58 (Inherited: 0x38)
struct UPreviewMeshCollection : UDataAsset {
	char pad_38[0x8]; // 0x38(0x08)
	struct USkeleton* Skeleton; // 0x40(0x08)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x48(0x10)
};

// Class Engine.PrimaryAssetLabel
// Size: 0x80 (Inherited: 0x38)
struct UPrimaryAssetLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x38(0x14)
	char bLabelAssetsInMyDirectory : 1; // 0x4c(0x01)
	char bIsRuntimeLabel : 1; // 0x4c(0x01)
	char pad_4C_2 : 6; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x50(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x60(0x10)
	struct FCollectionReference AssetCollection; // 0x70(0x0c)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class Engine.ProjectileMovementComponent
// Size: 0x210 (Inherited: 0x128)
struct UProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0x128(0x04)
	float MaxSpeed; // 0x12c(0x04)
	char bRotationFollowsVelocity : 1; // 0x130(0x01)
	char bRotationRemainsVertical : 1; // 0x130(0x01)
	char bShouldBounce : 1; // 0x130(0x01)
	char bInitialVelocityInLocalSpace : 1; // 0x130(0x01)
	char bForceSubStepping : 1; // 0x130(0x01)
	char bSimulationEnabled : 1; // 0x130(0x01)
	char bSweepCollision : 1; // 0x130(0x01)
	char bIsHomingProjectile : 1; // 0x130(0x01)
	char bBounceAngleAffectsFriction : 1; // 0x131(0x01)
	char bIsSliding : 1; // 0x131(0x01)
	char bInterpMovement : 1; // 0x131(0x01)
	char bInterpRotation : 1; // 0x131(0x01)
	char pad_131_4 : 4; // 0x131(0x01)
	char pad_132[0x2]; // 0x132(0x02)
	float PreviousHitTime; // 0x134(0x04)
	struct FVector PreviousHitNormal; // 0x138(0x0c)
	float ProjectileGravityScale; // 0x144(0x04)
	float Buoyancy; // 0x148(0x04)
	float Bounciness; // 0x14c(0x04)
	float Friction; // 0x150(0x04)
	float BounceVelocityStopSimulatingThreshold; // 0x154(0x04)
	float MinFrictionFraction; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x160(0x10)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x170(0x10)
	float HomingAccelerationMagnitude; // 0x180(0x04)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x184(0x08)
	float MaxSimulationTimeStep; // 0x18c(0x04)
	int32_t MaxSimulationIterations; // 0x190(0x04)
	int32_t BounceAdditionalIterations; // 0x194(0x04)
	float InterpLocationTime; // 0x198(0x04)
	float InterpRotationTime; // 0x19c(0x04)
	float InterpLocationMaxLagDistance; // 0x1a0(0x04)
	float InterpLocationSnapToTargetDistance; // 0x1a4(0x04)
	char pad_1A8[0x68]; // 0x1a8(0x68)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53a4aa0
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53a4a00
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent // (Native|Public|BlueprintCallable) // @ game+0x2bb3a60
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation // (Native|Public|BlueprintCallable) // @ game+0x53a47c0
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x33d1d50
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x33d1d50
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53a4640
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53a4590
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53a4530
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53a4500
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x58 (Inherited: 0x48)
struct UProxyLODMeshSimplificationSettings : UDeveloperSettings {
	struct FName ProxyLODMeshReductionModuleName; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.RadialForceActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ARadialForceActor : ARigidBodyBase {
	struct URadialForceComponent* ForceComponent; // 0x3d0(0x08)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // @ game+0x1ce9740
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x2beff70
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce // (Native|Public|BlueprintCallable) // @ game+0x2c509e0
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce // (Native|Public|BlueprintCallable) // @ game+0x2be4af0
};

// Class Engine.RadialForceComponent
// Size: 0x2c0 (Inherited: 0x290)
struct URadialForceComponent : USceneComponent {
	float Radius; // 0x288(0x04)
	enum class ERadialImpulseFalloff Falloff; // 0x28c(0x01)
	float ImpulseStrength; // 0x290(0x04)
	char bImpulseVelChange : 1; // 0x294(0x01)
	char bIgnoreOwningActor : 1; // 0x294(0x01)
	float ForceStrength; // 0x298(0x04)
	float DestructibleDamage; // 0x29c(0x04)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x2a0(0x10)
	char pad_2B1_2 : 6; // 0x2b1(0x01)
	char pad_2B2[0xe]; // 0x2b2(0x0e)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x53a4730
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x2d45ec0
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x53a4470
};

// Class Engine.RectLight
// Size: 0x3e8 (Inherited: 0x3e0)
struct ARectLight : ALight {
	struct URectLightComponent* RectLightComponent; // 0x3e0(0x08)
};

// Class Engine.RectLightComponent
// Size: 0x400 (Inherited: 0x3e0)
struct URectLightComponent : ULocalLightComponent {
	float SourceWidth; // 0x3e0(0x04)
	float SourceHeight; // 0x3e4(0x04)
	float BarnDoorAngle; // 0x3e8(0x04)
	float BarnDoorLength; // 0x3ec(0x04)
	struct UTexture* SourceTexture; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x53a4980
	void SetSourceTexture(struct UTexture* bNewValue); // Function Engine.RectLightComponent.SetSourceTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x53a48f0
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x538a4b0
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength // (Final|Native|Public|BlueprintCallable) // @ game+0x53a4870
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x53a47f0
};

// Class Engine.RendererSettings
// Size: 0x168 (Inherited: 0x48)
struct URendererSettings : UDeveloperSettings {
	char bMobileDisableVertexFog : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t MaxMobileCascades; // 0x4c(0x04)
	enum class EMobileMSAASampleCount MobileMSAASampleCount; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	char bMobileAllowDitheredLODTransition : 1; // 0x54(0x01)
	char bMobileAllowSoftwareOcclusionCulling : 1; // 0x54(0x01)
	char bMobileVirtualTextures : 1; // 0x54(0x01)
	char bDiscardUnusedQualityLevels : 1; // 0x54(0x01)
	char bOcclusionCulling : 1; // 0x54(0x01)
	char pad_54_5 : 3; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float MinScreenRadiusForLights; // 0x58(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x5c(0x04)
	float MinScreenRadiusForCSMdepth; // 0x60(0x04)
	char bPrecomputedVisibilityWarning : 1; // 0x64(0x01)
	char bTextureStreaming : 1; // 0x64(0x01)
	char bUseDXT5NormalMaps : 1; // 0x64(0x01)
	char bVirtualTextures : 1; // 0x64(0x01)
	char bVirtualTexturedLightmaps : 1; // 0x64(0x01)
	char pad_64_5 : 3; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	uint32_t VirtualTextureTileSize; // 0x68(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x6c(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x70(0x04)
	char bVirtualTextureEnableCompressZlib : 1; // 0x74(0x01)
	char bVirtualTextureEnableCompressCrunch : 1; // 0x74(0x01)
	char bClearCoatEnableSecondNormal : 1; // 0x74(0x01)
	char pad_74_3 : 5; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	int32_t ReflectionCaptureResolution; // 0x78(0x04)
	char bReflectionCaptureCompression : 1; // 0x7c(0x01)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x7c(0x01)
	char bForwardShading : 1; // 0x7c(0x01)
	char bVertexFoggingForOpaque : 1; // 0x7c(0x01)
	char bAllowStaticLighting : 1; // 0x7c(0x01)
	char bUseNormalMapsForStaticLighting : 1; // 0x7c(0x01)
	char bGenerateMeshDistanceFields : 1; // 0x7c(0x01)
	char bEightBitMeshDistanceFields : 1; // 0x7c(0x01)
	char bGenerateLandscapeGIData : 1; // 0x7d(0x01)
	char bCompressMeshDistanceFields : 1; // 0x7d(0x01)
	char pad_7D_2 : 6; // 0x7d(0x01)
	char pad_7E[0x2]; // 0x7e(0x02)
	float TessellationAdaptivePixelsPerTriangle; // 0x80(0x04)
	char bSeparateTranslucency : 1; // 0x84(0x01)
	char pad_84_1 : 7; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	struct FVector TranslucentSortAxis; // 0x8c(0x0c)
	enum class ECustomDepthStencil CustomDepthStencil; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	char bCustomDepthTaaJitter : 1; // 0x9c(0x01)
	char pad_9C_1 : 7; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	char bDefaultFeatureBloom : 1; // 0xa4(0x01)
	char bDefaultFeatureAmbientOcclusion : 1; // 0xa4(0x01)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0xa4(0x01)
	char bDefaultFeatureAutoExposure : 1; // 0xa4(0x01)
	char pad_A4_4 : 4; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	float DefaultFeatureAutoExposureBias; // 0xac(0x04)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0xb0(0x01)
	char bUsePreExposure : 1; // 0xb0(0x01)
	char bEnablePreExposureOnlyInTheEditor : 1; // 0xb0(0x01)
	char bDefaultFeatureMotionBlur : 1; // 0xb0(0x01)
	char bDefaultFeatureLensFlare : 1; // 0xb0(0x01)
	char bTemporalUpsampling : 1; // 0xb0(0x01)
	char bSSGI : 1; // 0xb0(0x01)
	char pad_B0_7 : 1; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0xb4(0x01)
	enum class ELightUnits DefaultLightUnits; // 0xb5(0x01)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0xb6(0x01)
	char pad_B7[0x1]; // 0xb7(0x01)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0xb8(0x01)
	char bStencilForLODDither : 1; // 0xb8(0x01)
	char pad_B8_2 : 6; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	enum class EEarlyZPass EarlyZPass; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	char bEarlyZPassAresOutline : 1; // 0xc0(0x01)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0xc0(0x01)
	char bDBuffer : 1; // 0xc0(0x01)
	char pad_C0_3 : 5; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	enum class EClearSceneOptions ClearSceneMethod; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	char bBasePassOutputsVelocity : 1; // 0xc8(0x01)
	char bVertexDeformationOutputsVelocity : 1; // 0xc8(0x01)
	char bSelectiveBasePassOutputs : 1; // 0xc8(0x01)
	char bDefaultParticleCutouts : 1; // 0xc8(0x01)
	char pad_C8_4 : 4; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	int32_t GPUSimulationTextureSizeX; // 0xcc(0x04)
	int32_t GPUSimulationTextureSizeY; // 0xd0(0x04)
	char bGlobalClipPlane : 1; // 0xd4(0x01)
	char pad_D4_1 : 7; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	enum class EGBufferFormat GBufferFormat; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	char bUseGPUMorphTargets : 1; // 0xdc(0x01)
	char bNvidiaAftermathEnabled : 1; // 0xdc(0x01)
	char bMultiView : 1; // 0xdc(0x01)
	char bMobilePostProcessing : 1; // 0xdc(0x01)
	char bMobileMultiView : 1; // 0xdc(0x01)
	char bMobileUseHWsRGBEncoding : 1; // 0xdc(0x01)
	char bRoundRobinOcclusion : 1; // 0xdc(0x01)
	char bODSCapture : 1; // 0xdc(0x01)
	char bMeshStreaming : 1; // 0xdd(0x01)
	char pad_DD_1 : 7; // 0xdd(0x01)
	char pad_DE[0x2]; // 0xde(0x02)
	float WireframeCullThreshold; // 0xe0(0x04)
	char bEnableRayTracing : 1; // 0xe4(0x01)
	char bEnableRayTracingTextureLOD : 1; // 0xe4(0x01)
	char bSupportStationarySkylight : 1; // 0xe4(0x01)
	char bSupportLowQualityLightmaps : 1; // 0xe4(0x01)
	char bSupportPointLightWholeSceneShadows : 1; // 0xe4(0x01)
	char bSupportAtmosphericFog : 1; // 0xe4(0x01)
	char bSupportSkyAtmosphere : 1; // 0xe4(0x01)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0xe4(0x01)
	char bSupportSkinCacheShaders : 1; // 0xe5(0x01)
	char pad_E5_1 : 7; // 0xe5(0x01)
	char pad_E6[0x2]; // 0xe6(0x02)
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float SkinCacheSceneMemoryLimitInMB; // 0xec(0x04)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0xf0(0x01)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0xf0(0x01)
	char bMobileAllowDistanceFieldShadows : 1; // 0xf0(0x01)
	char bMobileAllowMovableDirectionalLights : 1; // 0xf0(0x01)
	char pad_F0_4 : 4; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	uint32_t MobileNumDynamicPointLights; // 0xf4(0x04)
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0xf8(0x01)
	char bMobileAllowMovableSpotlights : 1; // 0xf8(0x01)
	char bMobileAllowMovableSpotlightShadows : 1; // 0xf8(0x01)
	char bSupport16BitBoneIndex : 1; // 0xf8(0x01)
	char bGPUSkinLimit2BoneInfluences : 1; // 0xf8(0x01)
	char bSupportDepthOnlyIndexBuffers : 1; // 0xf8(0x01)
	char bSupportReversedIndexBuffers : 1; // 0xf8(0x01)
	char bLPV : 1; // 0xf8(0x01)
	char bMobileAmbientOcclusion : 1; // 0xf9(0x01)
	char bUseUnlimitedBoneInfluences : 1; // 0xf9(0x01)
	char pad_F9_2 : 6; // 0xf9(0x01)
	char pad_FA[0x2]; // 0xfa(0x02)
	int32_t UnlimitedBonInfluencesThreshold; // 0xfc(0x04)
	enum class EMobilePlanarReflectionMode MobilePlanarReflectionMode; // 0x100(0x01)
	struct FPerPlatformBool bStreamSkeletalMeshLODs; // 0x101(0x01)
	struct FPerPlatformBool bDiscardSkeletalMeshOptionalLODs; // 0x102(0x01)
	char pad_103[0x5]; // 0x103(0x05)
	struct FSoftObjectPath VisualizeCalibrationColorMaterialPath; // 0x108(0x20)
	struct FSoftObjectPath VisualizeCalibrationCustomMaterialPath; // 0x128(0x20)
	struct FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath; // 0x148(0x20)
};

// Class Engine.RendererOverrideSettings
// Size: 0x50 (Inherited: 0x48)
struct URendererOverrideSettings : UDeveloperSettings {
	char bSupportAllShaderPermutations : 1; // 0x48(0x01)
	char bForceRecomputeTangents : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.ReplayNetConnection
// Size: 0x2350 (Inherited: 0x1b40)
struct UReplayNetConnection : UNetConnection {
	char pad_1B40[0x810]; // 0x1b40(0x810)
};

// Class Engine.ReplaySubsystem
// Size: 0x40 (Inherited: 0x38)
struct UReplaySubsystem : UGameInstanceSubsystem {
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Engine.ReplicationDriver
// Size: 0x30 (Inherited: 0x30)
struct UReplicationDriver : UObject {
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x30 (Inherited: 0x30)
struct UReplicationConnectionDriver : UObject {
};

// Class Engine.ReporterBase
// Size: 0x38 (Inherited: 0x30)
struct UReporterBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Engine.ReporterGraph
// Size: 0xb0 (Inherited: 0x38)
struct UReporterGraph : UReporterBase {
	char pad_38[0x78]; // 0x38(0x78)
};

// Class Engine.ReverbEffect
// Size: 0x68 (Inherited: 0x30)
struct UReverbEffect : UObject {
	bool bBypassEarlyReflections; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ReflectionsDelay; // 0x34(0x04)
	float GainHF; // 0x38(0x04)
	float ReflectionsGain; // 0x3c(0x04)
	bool bBypassLateReflections; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float LateDelay; // 0x44(0x04)
	float DecayTime; // 0x48(0x04)
	float Density; // 0x4c(0x04)
	float Diffusion; // 0x50(0x04)
	float AirAbsorptionGainHF; // 0x54(0x04)
	float DecayHFRatio; // 0x58(0x04)
	float LateGain; // 0x5c(0x04)
	float Gain; // 0x60(0x04)
	float RoomRolloffFactor; // 0x64(0x04)
};

// Class Engine.Rig
// Size: 0x58 (Inherited: 0x30)
struct URig : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct FTransformBase> TransformBases; // 0x38(0x10)
	struct TArray<struct FNode> Nodes; // 0x48(0x10)
};

// Class Engine.RotatingMovementComponent
// Size: 0x148 (Inherited: 0x128)
struct URotatingMovementComponent : UMovementComponent {
	struct FRotator RotationRate; // 0x128(0x0c)
	struct FVector PivotTranslation; // 0x134(0x0c)
	char bRotationInLocalSpace : 1; // 0x140(0x01)
	char pad_140_1 : 7; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
};

// Class Engine.RuntimeOptionsBase
// Size: 0x40 (Inherited: 0x30)
struct URuntimeOptionsBase : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.RuntimeVirtualTexture
// Size: 0xa0 (Inherited: 0x30)
struct URuntimeVirtualTexture : UObject {
	int32_t TileCount; // 0x30(0x04)
	int32_t TileSize; // 0x34(0x04)
	int32_t TileBorderSize; // 0x38(0x04)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x3c(0x01)
	bool bCompressTextures; // 0x3d(0x01)
	bool bClearTextures; // 0x3e(0x01)
	bool bSinglePhysicalSpace; // 0x3f(0x01)
	bool bPrivateSpace; // 0x40(0x01)
	bool bAdaptive; // 0x41(0x01)
	bool bContinuousUpdate; // 0x42(0x01)
	char pad_43[0x1]; // 0x43(0x01)
	int32_t RemoveLowMips; // 0x44(0x04)
	enum class TextureGroup LODGroup; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t Size; // 0x4c(0x04)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x50(0x08)
	char pad_58[0x48]; // 0x58(0x48)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53aec60
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53aec00
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53aebc0
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53aeb30
	int32_t GetPageTableSize(); // Function Engine.RuntimeVirtualTexture.GetPageTableSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x53aeb00
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x310 (Inherited: 0x290)
struct URuntimeVirtualTextureComponent : USceneComponent {
	struct TSoftObjectPtr<AActor> BoundsAlignActor; // 0x288(0x30)
	bool bSetBoundsButton; // 0x2b8(0x01)
	bool bSnapBoundsToLandscape; // 0x2b9(0x01)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x2c0(0x08)
	bool bEnableScalability; // 0x2c8(0x01)
	char pad_2CB[0x1]; // 0x2cb(0x01)
	uint32_t ScalabilityGroup; // 0x2cc(0x04)
	bool bHidePrimitives; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UVirtualTextureBuilder* StreamingTexture; // 0x2d8(0x08)
	int32_t StreamLowMips; // 0x2e0(0x04)
	bool bBuildStreamingMipsButton; // 0x2e4(0x01)
	bool bEnableCompressCrunch; // 0x2e5(0x01)
	bool bUseStreamingLowMipsInEditor; // 0x2e6(0x01)
	bool bBuildDebugStreamingMips; // 0x2e7(0x01)
	char pad_2E8[0x28]; // 0x2e8(0x28)

	void Invalidate(struct FBoxSphereBounds& WorldBounds); // Function Engine.RuntimeVirtualTextureComponent.Invalidate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53b6860
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x3d8 (Inherited: 0x3d0)
struct ARuntimeVirtualTextureVolume : AActor {
	struct URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x3d0(0x08)
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x30 (Inherited: 0x30)
struct URVOAvoidanceInterface : UInterface {
};

// Class Engine.SaveGame
// Size: 0x30 (Inherited: 0x30)
struct USaveGame : UObject {
};

// Class Engine.Scene
// Size: 0x30 (Inherited: 0x30)
struct UScene : UObject {
};

// Class Engine.SceneCaptureComponent2D
// Size: 0x9f0 (Inherited: 0x340)
struct USceneCaptureComponent2D : USceneCaptureComponent {
	enum class ECameraProjectionMode ProjectionType; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float FOVAngle; // 0x344(0x04)
	float OrthoWidth; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
	struct UTextureRenderTarget2D* TextureTarget; // 0x350(0x08)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct FPostProcessSettings PostProcessSettings; // 0x360(0x600)
	float PostProcessBlendWeight; // 0x960(0x04)
	char bOverride_CustomNearClippingPlane : 1; // 0x964(0x01)
	char pad_964_1 : 7; // 0x964(0x01)
	char pad_965[0x3]; // 0x965(0x03)
	float CustomNearClippingPlane; // 0x968(0x04)
	bool bUseCustomProjectionMatrix; // 0x96c(0x01)
	char pad_96D[0x3]; // 0x96d(0x03)
	struct FMatrix CustomProjectionMatrix; // 0x970(0x40)
	bool bEnableClipPlane; // 0x9b0(0x01)
	char pad_9B1[0x3]; // 0x9b1(0x03)
	struct FVector ClipPlaneBase; // 0x9b4(0x0c)
	struct FVector ClipPlaneNormal; // 0x9c0(0x0c)
	char bCameraCutThisFrame : 1; // 0x9cc(0x01)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0x9cc(0x01)
	char pad_9CC_2 : 6; // 0x9cc(0x01)
	char pad_9CD[0x3]; // 0x9cd(0x03)
	bool bDisableFlipCopyGLES; // 0x9d0(0x01)
	char pad_9D1[0x3]; // 0x9d1(0x03)
	char bEnableAlphaOverwrite : 1; // 0x9d4(0x01)
	char bUseSceneColorAlphaWithFinalColor : 1; // 0x9d4(0x01)
	char pad_9D4_2 : 6; // 0x9d4(0x01)
	char pad_9D5[0x1b]; // 0x9d5(0x1b)

	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x53bcbe0
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x53bca50
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x370 (Inherited: 0x340)
struct USceneCaptureComponentCube : USceneCaptureComponent {
	struct UTextureRenderTargetCube* TextureTarget; // 0x340(0x08)
	bool bCaptureRotation; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct UTextureRenderTargetCube* TextureTargetLeft; // 0x350(0x08)
	struct UTextureRenderTargetCube* TextureTargetRight; // 0x358(0x08)
	struct UTextureRenderTarget2D* TextureTargetODS; // 0x360(0x08)
	float IPD; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x53bcbe0
};

// Class Engine.SceneCaptureCube
// Size: 0x3e8 (Inherited: 0x3e0)
struct ASceneCaptureCube : ASceneCapture {
	struct USceneCaptureComponentCube* CaptureComponentCube; // 0x3e0(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x536f8c0
};

// Class Engine.SCS_Node
// Size: 0xf8 (Inherited: 0x30)
struct USCS_Node : UObject {
	struct UObject* ComponentClass; // 0x30(0x08)
	struct UActorComponent* ComponentTemplate; // 0x38(0x08)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x40(0x50)
	struct FName AttachToName; // 0x90(0x0c)
	struct FName ParentComponentOrVariableName; // 0x9c(0x0c)
	struct FName ParentComponentOwnerClassName; // 0xa8(0x0c)
	bool bIsParentComponentNative; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	struct TArray<struct USCS_Node*> ChildNodes; // 0xb8(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xc8(0x10)
	struct FGuid VariableGuid; // 0xd8(0x10)
	struct FName InternalVariableName; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Engine.Selection
// Size: 0xa8 (Inherited: 0x30)
struct USelection : UObject {
	char pad_30[0x78]; // 0x30(0x78)
};

// Class Engine.ServerStatReplicator
// Size: 0x498 (Inherited: 0x3d0)
struct AServerStatReplicator : AInfo {
	bool bUpdateStatNet; // 0x3d0(0x01)
	bool bOverwriteClientStats; // 0x3d1(0x01)
	char pad_3D2[0x2]; // 0x3d2(0x02)
	uint32_t Channels; // 0x3d4(0x04)
	uint32_t InRate; // 0x3d8(0x04)
	uint32_t OutRate; // 0x3dc(0x04)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	uint32_t MaxPacketOverhead; // 0x3e4(0x04)
	uint32_t InRateClientMax; // 0x3e8(0x04)
	uint32_t InRateClientMin; // 0x3ec(0x04)
	uint32_t InRateClientAvg; // 0x3f0(0x04)
	uint32_t InPacketsClientMax; // 0x3f4(0x04)
	uint32_t InPacketsClientMin; // 0x3f8(0x04)
	uint32_t InPacketsClientAvg; // 0x3fc(0x04)
	uint32_t OutRateClientMax; // 0x400(0x04)
	uint32_t OutRateClientMin; // 0x404(0x04)
	uint32_t OutRateClientAvg; // 0x408(0x04)
	uint32_t OutPacketsClientMax; // 0x40c(0x04)
	uint32_t OutPacketsClientMin; // 0x410(0x04)
	uint32_t OutPacketsClientAvg; // 0x414(0x04)
	uint32_t NetNumClients; // 0x418(0x04)
	uint32_t InPackets; // 0x41c(0x04)
	uint32_t OutPackets; // 0x420(0x04)
	uint32_t InBunches; // 0x424(0x04)
	uint32_t OutBunches; // 0x428(0x04)
	uint32_t OutLoss; // 0x42c(0x04)
	uint32_t InLoss; // 0x430(0x04)
	uint32_t VoiceBytesSent; // 0x434(0x04)
	uint32_t VoiceBytesRecv; // 0x438(0x04)
	uint32_t VoicePacketsSent; // 0x43c(0x04)
	uint32_t VoicePacketsRecv; // 0x440(0x04)
	uint32_t PercentInVoice; // 0x444(0x04)
	uint32_t PercentOutVoice; // 0x448(0x04)
	uint32_t NumActorChannels; // 0x44c(0x04)
	uint32_t NumConsideredActors; // 0x450(0x04)
	uint32_t PrioritizedActors; // 0x454(0x04)
	uint32_t NumRelevantActors; // 0x458(0x04)
	uint32_t NumRelevantDeletedActors; // 0x45c(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x460(0x04)
	uint32_t NumReplicatedActors; // 0x464(0x04)
	uint32_t NumActors; // 0x468(0x04)
	uint32_t NumNetActors; // 0x46c(0x04)
	uint32_t NumDormantActors; // 0x470(0x04)
	uint32_t NumInitiallyDormantActors; // 0x474(0x04)
	uint32_t NumNetGUIDsAckd; // 0x478(0x04)
	uint32_t NumNetGUIDsPending; // 0x47c(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x480(0x04)
	uint32_t ObjPathBytes; // 0x484(0x04)
	uint32_t NetGUIDOutRate; // 0x488(0x04)
	uint32_t NetGUIDInRate; // 0x48c(0x04)
	uint32_t NetSaturated; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
};

// Class Engine.ShadowMapTexture2D
// Size: 0x120 (Inherited: 0x118)
struct UShadowMapTexture2D : UTexture2D {
	enum class EShadowMapFlags ShadowmapFlags; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
};

// Class Engine.SimpleConstructionScript
// Size: 0xa8 (Inherited: 0x30)
struct USimpleConstructionScript : UObject {
	struct TArray<struct USCS_Node*> RootNodes; // 0x30(0x10)
	struct TArray<struct USCS_Node*> AllNodes; // 0x40(0x10)
	struct USCS_Node* DefaultSceneRootNode; // 0x50(0x08)
	char pad_58[0x50]; // 0x58(0x50)
};

// Class Engine.SkeletalMeshActor
// Size: 0x458 (Inherited: 0x3d0)
struct ASkeletalMeshActor : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	char bShouldDoAnimNotifies : 1; // 0x3d8(0x01)
	char bWakeOnLevelStart : 1; // 0x3d8(0x01)
	char pad_3D8_2 : 6; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x3e0(0x08)
	struct USkeletalMesh* ReplicatedMesh; // 0x3e8(0x08)
	struct UPhysicsAsset* ReplicatedPhysAsset; // 0x3f0(0x08)
	struct UMaterialInterface* ReplicatedMaterial0; // 0x3f8(0x08)
	struct UMaterialInterface* ReplicatedMaterial1; // 0x400(0x08)
	char pad_408[0x50]; // 0x408(0x50)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // @ game+0x2c509e0
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh // (Native|Public) // @ game+0x2beff70
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1 // (Native|Public) // @ game+0x1ce9740
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0 // (Native|Public) // @ game+0x2be4af0
};

// Class Engine.SkeletalMeshEditorData
// Size: 0x30 (Inherited: 0x30)
struct USkeletalMeshEditorData : UObject {
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0x60 (Inherited: 0x38)
struct USkeletalMeshLODSettings : UDataAsset {
	struct FPerPlatformInt MinLOD; // 0x38(0x04)
	struct FPerPlatformInt MaxLod; // 0x3c(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x40(0x01)
	bool bOverrideLODStreamingSettings; // 0x41(0x01)
	struct FPerPlatformBool bSupportLODStreaming; // 0x42(0x01)
	char pad_43[0x1]; // 0x43(0x01)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0x44(0x04)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0x50(0x10)
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x58 (Inherited: 0x48)
struct USkeletalMeshSimplificationSettings : UDeveloperSettings {
	struct FName SkeletalMeshReductionModuleName; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.SkeletalMeshSocket
// Size: 0x70 (Inherited: 0x30)
struct USkeletalMeshSocket : UObject {
	struct FName SocketName; // 0x30(0x0c)
	struct FName BoneName; // 0x3c(0x0c)
	struct FVector RelativeLocation; // 0x48(0x0c)
	struct FRotator RelativeRotation; // 0x54(0x0c)
	struct FVector RelativeScale; // 0x60(0x0c)
	bool bForceAlwaysAnimated; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e0c10
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x53e0880
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x360 (Inherited: 0x290)
struct USkyAtmosphereComponent : USceneComponent {
	enum class ESkyAtmosphereTransformMode TransformMode; // 0x288(0x01)
	float BottomRadius; // 0x28c(0x04)
	struct FColor GroundAlbedo; // 0x290(0x04)
	float AtmosphereHeight; // 0x294(0x04)
	float MultiScatteringFactor; // 0x298(0x04)
	float TraceSampleCountScale; // 0x29c(0x04)
	float RayleighScatteringScale; // 0x2a0(0x04)
	struct FLinearColor RayleighScattering; // 0x2a4(0x10)
	float RayleighExponentialDistribution; // 0x2b4(0x04)
	float MieScatteringScale; // 0x2b8(0x04)
	struct FLinearColor MieScattering; // 0x2bc(0x10)
	float MieAbsorptionScale; // 0x2cc(0x04)
	struct FLinearColor MieAbsorption; // 0x2d0(0x10)
	float MieAnisotropy; // 0x2e0(0x04)
	float MieExponentialDistribution; // 0x2e4(0x04)
	float OtherAbsorptionScale; // 0x2e8(0x04)
	struct FLinearColor OtherAbsorption; // 0x2ec(0x10)
	struct FTentDistribution OtherTentDistribution; // 0x2fc(0x0c)
	struct FLinearColor SkyLuminanceFactor; // 0x308(0x10)
	float AerialPespectiveViewDistanceScale; // 0x318(0x04)
	float HeightFogContribution; // 0x31c(0x04)
	float TransmittanceMinLightElevationAngle; // 0x320(0x04)
	float AerialPerspectiveStartDepth; // 0x324(0x04)
	char pad_32D[0x1f]; // 0x32d(0x1f)
	struct FGuid bStaticLightingBuiltGUID; // 0x34c(0x10)
	char pad_35C[0x4]; // 0x35c(0x04)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e9960
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e98e0
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e9850
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e97d0
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e9750
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e96c0
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e9430
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e93a0
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x52e4850
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e9320
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e92a0
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e9210
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e8f70
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e8d40
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection // (Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53e8c50
};

// Class Engine.SkyAtmosphere
// Size: 0x3d8 (Inherited: 0x3d0)
struct ASkyAtmosphere : AInfo {
	struct USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x3d0(0x08)
};

// Class Engine.SkyLightComponent
// Size: 0x4a0 (Inherited: 0x2d0)
struct USkyLightComponent : ULightComponentBase {
	bool bRealTimeCapture; // 0x2c8(0x01)
	enum class ESkyLightSourceType SourceType; // 0x2c9(0x01)
	struct UTextureCube* Cubemap; // 0x2d0(0x08)
	float SourceCubemapAngle; // 0x2d8(0x04)
	int32_t CubemapResolution; // 0x2dc(0x04)
	float SkyDistanceThreshold; // 0x2e0(0x04)
	bool bCaptureEmissiveOnly; // 0x2e4(0x01)
	bool bLowerHemisphereIsBlack; // 0x2e5(0x01)
	struct FLinearColor LowerHemisphereColor; // 0x2e8(0x10)
	float OcclusionMaxDistance; // 0x2f8(0x04)
	float Contrast; // 0x2fc(0x04)
	float OcclusionExponent; // 0x300(0x04)
	float MinOcclusion; // 0x304(0x04)
	struct FColor OcclusionTint; // 0x308(0x04)
	char bCloudAmbientOcclusion : 1; // 0x30c(0x01)
	char pad_30C_1 : 7; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	float CloudAmbientOcclusionStrength; // 0x310(0x04)
	float CloudAmbientOcclusionExtent; // 0x314(0x04)
	float CloudAmbientOcclusionMapResolutionScale; // 0x318(0x04)
	float CloudAmbientOcclusionApertureScale; // 0x31c(0x04)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x320(0x01)
	char pad_321[0xa7]; // 0x321(0xa7)
	struct UTextureCube* BlendDestinationCubemap; // 0x3c8(0x08)
	char pad_3D0[0xd0]; // 0x3d0(0xd0)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x53e99f0
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53e9630
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x53e95b0
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast // (Final|Native|Public|BlueprintCallable) // @ game+0x53e9530
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x53e94b0
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x53e9180
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x53e90f0
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x53e9070
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x53e8ff0
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x53e8e50
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x53e8dc0
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky // (Final|Native|Public|BlueprintCallable) // @ game+0x53e8d20
};

// Class Engine.SlateBrushAsset
// Size: 0xc0 (Inherited: 0x30)
struct USlateBrushAsset : UObject {
	struct FSlateBrush Brush; // 0x30(0x90)
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x30 (Inherited: 0x30)
struct USlateTextureAtlasInterface : UInterface {
};

// Class Engine.SmokeTestCommandlet
// Size: 0x88 (Inherited: 0x88)
struct USmokeTestCommandlet : UCommandlet {
};

// Class Engine.SoundAttenuation
// Size: 0x3d8 (Inherited: 0x30)
struct USoundAttenuation : UObject {
	struct FSoundAttenuationSettings Attenuation; // 0x30(0x3a8)
};

// Class Engine.SoundClass
// Size: 0xd8 (Inherited: 0x30)
struct USoundClass : UObject {
	struct FSoundClassProperties Properties; // 0x30(0x80)
	struct TArray<struct USoundClass*> ChildClasses; // 0xb0(0x10)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0xc0(0x10)
	struct USoundClass* ParentClass; // 0xd0(0x08)
};

// Class Engine.SoundConcurrency
// Size: 0x58 (Inherited: 0x30)
struct USoundConcurrency : UObject {
	struct FSoundConcurrencySettings Concurrency; // 0x30(0x28)
};

// Class Engine.SoundCue
// Size: 0x5a0 (Inherited: 0x1c0)
struct USoundCue : USoundBase {
	char bPrimeOnLoad : 1; // 0x1c0(0x01)
	char pad_1C0_1 : 7; // 0x1c0(0x01)
	char pad_1C1[0x7]; // 0x1c1(0x07)
	struct USoundNode* FirstNode; // 0x1c8(0x08)
	float VolumeMultiplier; // 0x1d0(0x04)
	float PitchMultiplier; // 0x1d4(0x04)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x1d8(0x3a8)
	float SubtitlePriority; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	char bOverrideAttenuation : 1; // 0x588(0x01)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x588(0x01)
	char pad_588_2 : 6; // 0x588(0x01)
	char pad_589[0x3]; // 0x589(0x03)
	int32_t CookedQualityIndex; // 0x58c(0x04)
	char bHasPlayWhenSilent : 1; // 0x590(0x01)
	char pad_590_1 : 7; // 0x590(0x01)
	char pad_591[0xf]; // 0x591(0x0f)
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x48 (Inherited: 0x30)
struct USoundEffectSourcePresetChain : UObject {
	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x30(0x10)
	char bPlayEffectChainTails : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.SoundGroups
// Size: 0x90 (Inherited: 0x30)
struct USoundGroups : UObject {
	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)
};

// Class Engine.SoundMix
// Size: 0x98 (Inherited: 0x30)
struct USoundMix : UObject {
	char bApplyEQ : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float EQPriority; // 0x34(0x04)
	struct FAudioEQEffect EQSettings; // 0x38(0x40)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x78(0x10)
	float InitialDelay; // 0x88(0x04)
	float FadeInTime; // 0x8c(0x04)
	float Duration; // 0x90(0x04)
	float FadeOutTime; // 0x94(0x04)
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x60 (Inherited: 0x60)
struct USoundNodeAssetReferencer : USoundNode {
};

// Class Engine.SoundNodeAttenuation
// Size: 0x418 (Inherited: 0x60)
struct USoundNodeAttenuation : USoundNode {
	struct USoundAttenuation* AttenuationSettings; // 0x60(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x68(0x3a8)
	char bOverrideAttenuation : 1; // 0x410(0x01)
	char pad_410_1 : 7; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
};

// Class Engine.SoundNodeBranch
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeBranch : USoundNode {
	struct FName BoolParameterName; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeConcatenator
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeConcatenator : USoundNode {
	struct TArray<float> InputVolume; // 0x60(0x10)
};

// Class Engine.SoundNodeDelay
// Size: 0x68 (Inherited: 0x60)
struct USoundNodeDelay : USoundNode {
	float DelayMin; // 0x60(0x04)
	float DelayMax; // 0x64(0x04)
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x88 (Inherited: 0x60)
struct USoundNodeDialoguePlayer : USoundNode {
	struct FDialogueWaveParameter DialogueWaveParameter; // 0x60(0x20)
	char bLooping : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeDistanceCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x60(0x10)
};

// Class Engine.SoundNodeDoppler
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeDoppler : USoundNode {
	float DopplerIntensity; // 0x60(0x04)
	bool bUseSmoothing; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	float SmoothingInterpSpeed; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeEnveloper
// Size: 0x1a8 (Inherited: 0x60)
struct USoundNodeEnveloper : USoundNode {
	float LoopStart; // 0x60(0x04)
	float LoopEnd; // 0x64(0x04)
	float DurationAfterLoop; // 0x68(0x04)
	int32_t LoopCount; // 0x6c(0x04)
	char bLoopIndefinitely : 1; // 0x70(0x01)
	char bLoop : 1; // 0x70(0x01)
	char pad_70_2 : 6; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x78(0x08)
	struct UDistributionFloatConstantCurve* PitchInterpCurve; // 0x80(0x08)
	struct FRuntimeFloatCurve VolumeCurve; // 0x88(0x88)
	struct FRuntimeFloatCurve PitchCurve; // 0x110(0x88)
	float PitchMin; // 0x198(0x04)
	float PitchMax; // 0x19c(0x04)
	float VolumeMin; // 0x1a0(0x04)
	float VolumeMax; // 0x1a4(0x04)
};

// Class Engine.SoundNodeGroupControl
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeGroupControl : USoundNode {
	struct TArray<int32_t> GroupSizes; // 0x60(0x10)
};

// Class Engine.SoundNodeLooping
// Size: 0x68 (Inherited: 0x60)
struct USoundNodeLooping : USoundNode {
	int32_t LoopCount; // 0x60(0x04)
	char bLoopIndefinitely : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.SoundNodeMature
// Size: 0x60 (Inherited: 0x60)
struct USoundNodeMature : USoundNode {
};

// Class Engine.SoundNodeMixer
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeMixer : USoundNode {
	struct TArray<float> InputVolume; // 0x60(0x10)
};

// Class Engine.SoundNodeModulator
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeModulator : USoundNode {
	float PitchMin; // 0x60(0x04)
	float PitchMax; // 0x64(0x04)
	float VolumeMin; // 0x68(0x04)
	float VolumeMax; // 0x6c(0x04)
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0xa8 (Inherited: 0x60)
struct USoundNodeModulatorContinuous : USoundNode {
	struct FModulatorContinuousParams PitchModulationParams; // 0x60(0x24)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x84(0x24)
};

// Class Engine.SoundNodeOscillator
// Size: 0x88 (Inherited: 0x60)
struct USoundNodeOscillator : USoundNode {
	char bModulateVolume : 1; // 0x60(0x01)
	char bModulatePitch : 1; // 0x60(0x01)
	char pad_60_2 : 6; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float AmplitudeMin; // 0x64(0x04)
	float AmplitudeMax; // 0x68(0x04)
	float FrequencyMin; // 0x6c(0x04)
	float FrequencyMax; // 0x70(0x04)
	float OffsetMin; // 0x74(0x04)
	float OffsetMax; // 0x78(0x04)
	float CenterMin; // 0x7c(0x04)
	float CenterMax; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x80 (Inherited: 0x70)
struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade {
	struct FName ParamName; // 0x70(0x0c)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x68 (Inherited: 0x60)
struct USoundNodeQualityLevel : USoundNode {
	int32_t CookedQualityLevelIndex; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.SoundNodeRandom
// Size: 0x90 (Inherited: 0x60)
struct USoundNodeRandom : USoundNode {
	struct TArray<float> Weights; // 0x60(0x10)
	struct TArray<bool> HasBeenUsed; // 0x70(0x10)
	int32_t NumRandomUsed; // 0x80(0x04)
	int32_t PreselectAtLevelLoad; // 0x84(0x04)
	char bShouldExcludeFromBranchCulling : 1; // 0x88(0x01)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x88(0x01)
	char bRandomizeWithoutReplacement : 1; // 0x88(0x01)
	char pad_88_3 : 5; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.SoundNodeSoundClass
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeSoundClass : USoundNode {
	struct USoundClass* SoundClassOverride; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)
};

// Class Engine.SoundNodeSwitch
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeSwitch : USoundNode {
	struct FName IntParameterName; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeWaveParam
// Size: 0x70 (Inherited: 0x60)
struct USoundNodeWaveParam : USoundNode {
	struct FName WaveParameterName; // 0x60(0x0c)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeWavePlayer
// Size: 0xa8 (Inherited: 0x60)
struct USoundNodeWavePlayer : USoundNodeAssetReferencer {
	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x60(0x30)
	struct USoundWave* SoundWave; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)
	char bLooping : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Engine.SoundSourceBus
// Size: 0x398 (Inherited: 0x380)
struct USoundSourceBus : USoundWave {
	enum class ESourceBusChannels SourceBusChannels; // 0x380(0x01)
	char pad_381[0x3]; // 0x381(0x03)
	float SourceBusDuration; // 0x384(0x04)
	struct UAudioBus* AudioBus; // 0x388(0x08)
	char bAutoDeactivateWhenSilent : 1; // 0x390(0x01)
	char pad_390_1 : 7; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)
};

// Class Engine.SoundSubmixBase
// Size: 0x40 (Inherited: 0x30)
struct USoundSubmixBase : UObject {
	struct TArray<struct USoundSubmixBase*> ChildSubmixes; // 0x30(0x10)
};

// Class Engine.SoundSubmixWithParentBase
// Size: 0x48 (Inherited: 0x40)
struct USoundSubmixWithParentBase : USoundSubmixBase {
	struct USoundSubmixBase* ParentSubmix; // 0x40(0x08)
};

// Class Engine.SoundSubmix
// Size: 0x98 (Inherited: 0x48)
struct USoundSubmix : USoundSubmixWithParentBase {
	char bMuteWhenBackgrounded : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain; // 0x50(0x10)
	struct USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x60(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x68(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x6c(0x04)
	enum class EGainParamMode GainMode; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float OutputVolume; // 0x74(0x04)
	float WetLevel; // 0x78(0x04)
	float DryLevel; // 0x7c(0x04)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)

	void StopSpectralAnalysis(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x53f7c50
	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x53f7a20
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x53f7990
	void StartSpectralAnalysis(struct UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType); // Function Engine.SoundSubmix.StartSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x53f77b0
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x53f76e0
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x53f7650
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x53f7580
	void RemoveSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixSpectralAnalysisBP); // Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53f7480
	void AddSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, struct FDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Function Engine.SoundSubmix.AddSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53f7150
	void AddEnvelopeFollowerDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x53f7050
};

// Class Engine.SoundfieldSubmix
// Size: 0x78 (Inherited: 0x48)
struct USoundfieldSubmix : USoundSubmixWithParentBase {
	struct FName SoundfieldEncodingFormat; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x58(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x60(0x10)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x70(0x08)
};

// Class Engine.EndpointSubmix
// Size: 0x60 (Inherited: 0x40)
struct UEndpointSubmix : USoundSubmixBase {
	struct FName EndpointType; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x50(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettings; // 0x58(0x08)
};

// Class Engine.SoundfieldEndpointSubmix
// Size: 0x80 (Inherited: 0x40)
struct USoundfieldEndpointSubmix : USoundSubmixBase {
	struct FName SoundfieldEndpointType; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x50(0x08)
	struct USoundfieldEndpointSettingsBase* EndpointSettings; // 0x58(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x60(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x68(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x70(0x10)
};

// Class Engine.SphereReflectionCapture
// Size: 0x3e0 (Inherited: 0x3d8)
struct ASphereReflectionCapture : AReflectionCapture {
	struct UDrawSphereComponent* DrawCaptureRadius; // 0x3d8(0x08)
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x320)
struct USphereReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadius; // 0x318(0x04)
	float CaptureDistanceScale; // 0x31c(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x320(0x08)
};

// Class Engine.SplineMetadata
// Size: 0x30 (Inherited: 0x30)
struct USplineMetadata : UObject {
};

// Class Engine.SplineMeshActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ASplineMeshActor : AActor {
	struct USplineMeshComponent* SplineMeshComponent; // 0x3d0(0x08)
};

// Class Engine.SplineMeshComponent
// Size: 0x690 (Inherited: 0x600)
struct USplineMeshComponent : UStaticMeshComponent {
	struct FSplineMeshParams SplineParams; // 0x600(0x58)
	struct FVector SplineUpDir; // 0x658(0x0c)
	float SplineBoundaryMin; // 0x664(0x04)
	struct FGuid CachedMeshBodySetupGuid; // 0x668(0x10)
	struct UBodySetup* BodySetup; // 0x678(0x08)
	float SplineBoundaryMax; // 0x680(0x04)
	char bAllowSplineEditingPerInstance : 1; // 0x684(0x01)
	char bSmoothInterpRollScale : 1; // 0x684(0x01)
	char bMeshDirty : 1; // 0x684(0x01)
	char pad_684_3 : 5; // 0x684(0x01)
	enum class ESplineMeshAxis ForwardAxis; // 0x685(0x01)
	char pad_686[0x2]; // 0x686(0x02)
	float VirtualTextureMainPassMaxDrawDistance; // 0x688(0x04)
	char pad_68C[0x4]; // 0x68c(0x04)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x540ea60
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540e980
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540e8b0
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x540e7d0
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540e6f0
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540e620
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540e440
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x540e360
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x540e090
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540dfb0
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540dee0
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x540de00
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540dd20
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x540dc50
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin // (Final|Native|Public|BlueprintCallable) // @ game+0x540db70
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax // (Final|Native|Public|BlueprintCallable) // @ game+0x540da90
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d940
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d900
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d8d0
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d890
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d850
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d810
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d5c0
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d580
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d540
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d510
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d4d0
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d490
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d3c0
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d390
	struct FTransform CalcSliceTransform(float DistanceAlong); // Function Engine.SplineMeshComponent.CalcSliceTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d190
};

// Class Engine.SpotLightComponent
// Size: 0x400 (Inherited: 0x400)
struct USpotLightComponent : UPointLightComponent {
	float InnerConeAngle; // 0x3f8(0x04)
	float OuterConeAngle; // 0x3fc(0x04)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x540e2e0
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x540e1e0
};

// Class Engine.SpringArmComponent
// Size: 0x310 (Inherited: 0x290)
struct USpringArmComponent : USceneComponent {
	float TargetArmLength; // 0x288(0x04)
	struct FVector SocketOffset; // 0x28c(0x0c)
	struct FVector TargetOffset; // 0x298(0x0c)
	float ProbeSize; // 0x2a4(0x04)
	enum class ECollisionChannel ProbeChannel; // 0x2a8(0x01)
	char bDoCollisionTest : 1; // 0x2ac(0x01)
	char bUsePawnControlRotation : 1; // 0x2ac(0x01)
	char bInheritPitch : 1; // 0x2ac(0x01)
	char bInheritYaw : 1; // 0x2ac(0x01)
	char bInheritRoll : 1; // 0x2ac(0x01)
	char bEnableCameraLag : 1; // 0x2ac(0x01)
	char bEnableCameraRotationLag : 1; // 0x2ac(0x01)
	char bUseCameraLagSubstepping : 1; // 0x2ac(0x01)
	char bDrawDebugLagMarkers : 1; // 0x2ad(0x01)
	float CameraLagSpeed; // 0x2b0(0x04)
	float CameraRotationLagSpeed; // 0x2b4(0x04)
	float CameraLagMaxTimeStep; // 0x2b8(0x04)
	float CameraLagMaxDistance; // 0x2bc(0x04)
	char pad_2C2_1 : 7; // 0x2c2(0x01)
	char pad_2C3[0x4d]; // 0x2c3(0x4d)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e33610
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d9c0
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d980
};

// Class Engine.StaticMesh
// Size: 0x160 (Inherited: 0x68)
struct UStaticMesh : UStreamableRenderAsset {
	char pad_68[0x20]; // 0x68(0x20)
	struct FPerPlatformInt MinLOD; // 0x88(0x04)
	struct FPerPlatformInt MaxLod; // 0x8c(0x04)
	float LpvBiasMultiplier; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x98(0x10)
	float LightmapUVDensity; // 0xa8(0x04)
	int32_t LightMapResolution; // 0xac(0x04)
	int32_t LightMapCoordinateIndex; // 0xb0(0x04)
	float DistanceFieldSelfShadowBias; // 0xb4(0x04)
	struct UBodySetup* BodySetup; // 0xb8(0x08)
	int32_t LODForCollision; // 0xc0(0x04)
	char bGenerateMeshDistanceField : 1; // 0xc4(0x01)
	char bStripComplexCollisionForConsole : 1; // 0xc4(0x01)
	char bHasNavigationData : 1; // 0xc4(0x01)
	char bSupportUniformlyDistributedSampling : 1; // 0xc4(0x01)
	char bSupportPhysicalMaterialMasks : 1; // 0xc4(0x01)
	char bIsBuiltAtRuntime : 1; // 0xc4(0x01)
	char pad_C4_6 : 1; // 0xc4(0x01)
	char bAllowCPUAccess : 1; // 0xc4(0x01)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0xc5(0x01)
	char pad_C5_1 : 7; // 0xc5(0x01)
	char pad_C6[0x22]; // 0xc6(0x22)
	struct TArray<struct UStaticMeshSocket*> Sockets; // 0xe8(0x10)
	char pad_F8[0x10]; // 0xf8(0x10)
	struct FVector PositiveBoundsExtension; // 0x108(0x0c)
	struct FVector NegativeBoundsExtension; // 0x114(0x0c)
	struct FBoxSphereBounds ExtendedBounds; // 0x120(0x1c)
	int32_t ElementToIgnoreForTexFactor; // 0x13c(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x140(0x10)
	struct UObject* EditableMesh; // 0x150(0x08)
	struct UNavCollisionBase* NavCollision; // 0x158(0x08)

	void SetMinimumLODForPlatform(struct FName& PlatformName, int32_t Value); // Function Engine.StaticMesh.SetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x53cb0f0
	void SetMaximumLODForPlatform(struct FName& PlatformName, int32_t Value); // Function Engine.StaticMesh.SetMaximumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x53cb0f0
	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x540da00
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d770
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d740
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cabc0
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cab40
	int32_t GetMaximumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMaximumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x53cab40
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d690
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d5f0
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d440
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d3f0
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x540d2e0
	struct UStaticMeshDescription* CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x540d250
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x540d090
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x540d000
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x540cf50
};

// Class Engine.StaticMeshSocket
// Size: 0x70 (Inherited: 0x30)
struct UStaticMeshSocket : UObject {
	struct FName SocketName; // 0x30(0x0c)
	struct FVector RelativeLocation; // 0x3c(0x0c)
	struct FRotator RelativeRotation; // 0x48(0x0c)
	struct FVector RelativeScale; // 0x54(0x0c)
	struct FString Tag; // 0x60(0x10)
};

// Class Engine.StereoLayerShape
// Size: 0x30 (Inherited: 0x30)
struct UStereoLayerShape : UObject {
};

// Class Engine.StereoLayerShapeQuad
// Size: 0x30 (Inherited: 0x30)
struct UStereoLayerShapeQuad : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeCylinder
// Size: 0x40 (Inherited: 0x30)
struct UStereoLayerShapeCylinder : UStereoLayerShape {
	float Radius; // 0x30(0x04)
	float OverlayArc; // 0x34(0x04)
	int32_t Height; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x5414770
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc // (Final|Native|Public|BlueprintCallable) // @ game+0x54145e0
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x5414440
};

// Class Engine.StereoLayerShapeCubemap
// Size: 0x30 (Inherited: 0x30)
struct UStereoLayerShapeCubemap : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeEquirect
// Size: 0x78 (Inherited: 0x30)
struct UStereoLayerShapeEquirect : UStereoLayerShape {
	struct FBox2D LeftUVRect; // 0x30(0x14)
	struct FBox2D RightUVRect; // 0x44(0x14)
	struct FVector2D LeftScale; // 0x58(0x08)
	struct FVector2D RightScale; // 0x60(0x08)
	struct FVector2D LeftBias; // 0x68(0x08)
	struct FVector2D RightBias; // 0x70(0x08)

	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x5414220
};

// Class Engine.StereoLayerComponent
// Size: 0x370 (Inherited: 0x290)
struct UStereoLayerComponent : USceneComponent {
	char bLiveTexture : 1; // 0x288(0x01)
	char bSupportsDepth : 1; // 0x288(0x01)
	char bNoAlphaChannel : 1; // 0x288(0x01)
	struct UTexture* Texture; // 0x290(0x08)
	struct UTexture* LeftTexture; // 0x298(0x08)
	char bQuadPreserveTextureRatio : 1; // 0x2a0(0x01)
	char pad_2A0_4 : 4; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	struct FVector2D QuadSize; // 0x2a4(0x08)
	struct FBox2D UVRect; // 0x2ac(0x14)
	float CylinderRadius; // 0x2c0(0x04)
	float CylinderOverlayArc; // 0x2c4(0x04)
	int32_t CylinderHeight; // 0x2c8(0x04)
	struct FEquirectProps EquirectProps; // 0x2cc(0x48)
	enum class EStereoLayerType StereoLayerType; // 0x314(0x01)
	enum class EStereoLayerShape StereoLayerShape; // 0x315(0x01)
	char pad_316[0x2]; // 0x316(0x02)
	struct UStereoLayerShape* Shape; // 0x318(0x08)
	int32_t Priority; // 0x320(0x04)
	char pad_324[0x4c]; // 0x324(0x4c)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5414ad0
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x5414a40
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x54146f0
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x5414660
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x54144d0
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x5414120
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x5413ff0
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413fc0
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413fa0
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413f70
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413f50
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x5413e50
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary {

	void ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x408b730
	void SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5414880
	void HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x408b180
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5413dd0
};

// Class Engine.StringTable
// Size: 0x50 (Inherited: 0x30)
struct UStringTable : UObject {
	char pad_30[0x20]; // 0x30(0x20)
};

// Class Engine.SubsurfaceProfile
// Size: 0xc0 (Inherited: 0x30)
struct USubsurfaceProfile : UObject {
	struct FSubsurfaceProfileStruct Settings; // 0x30(0x8c)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct USubsystemBlueprintLibrary : UBlueprintFunctionLibrary {

	struct UWorldSubsystem* GetWorldSubsystem(struct UObject* ContextObject, struct UWorldSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x541e740
	struct ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x541e520
	struct ULocalPlayerSubsystem* GetLocalPlayerSubsystem(struct UObject* ContextObject, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x541e5f0
	struct UGameInstanceSubsystem* GetGameInstanceSubsystem(struct UObject* ContextObject, struct UGameInstanceSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x541e450
	struct UEngineSubsystem* GetEngineSubsystem(struct UEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x541e3c0
};

// Class Engine.SubUVAnimation
// Size: 0x70 (Inherited: 0x30)
struct USubUVAnimation : UObject {
	struct UTexture2D* SubUVTexture; // 0x30(0x08)
	int32_t SubImages_Horizontal; // 0x38(0x04)
	int32_t SubImages_Vertical; // 0x3c(0x04)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x40(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	float AlphaThreshold; // 0x44(0x04)
	char pad_48[0x28]; // 0x48(0x28)
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x48 (Inherited: 0x38)
struct USystemTimeTimecodeProvider : UTimecodeProvider {
	struct FFrameRate FrameRate; // 0x38(0x08)
	bool bGenerateFullFrame; // 0x40(0x01)
	bool bUseHighPerformanceClock; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Engine.TextPropertyTestObject
// Size: 0x78 (Inherited: 0x30)
struct UTextPropertyTestObject : UObject {
	struct FText DefaultedText; // 0x30(0x18)
	struct FText UndefaultedText; // 0x48(0x18)
	struct FText TransientText; // 0x60(0x18)
};

// Class Engine.TextRenderActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ATextRenderActor : AActor {
	struct UTextRenderComponent* TextRender; // 0x3d0(0x08)
};

// Class Engine.Texture2DArray
// Size: 0x150 (Inherited: 0xf0)
struct UTexture2DArray : UTexture {
	char pad_F0[0x58]; // 0xf0(0x58)
	enum class TextureAddress AddressX; // 0x148(0x01)
	enum class TextureAddress AddressY; // 0x149(0x01)
	enum class TextureAddress AddressZ; // 0x14a(0x01)
	char pad_14B[0x5]; // 0x14b(0x05)
};

// Class Engine.Texture2DDynamic
// Size: 0x108 (Inherited: 0xf0)
struct UTexture2DDynamic : UTexture {
	char pad_F0[0x8]; // 0xf0(0x08)
	enum class EPixelFormat Format; // 0xf8(0x01)
	char pad_F9[0xf]; // 0xf9(0x0f)
};

// Class Engine.TextureLightProfile
// Size: 0x120 (Inherited: 0x118)
struct UTextureLightProfile : UTexture2D {
	float Brightness; // 0x118(0x04)
	float TextureMultiplier; // 0x11c(0x04)
};

// Class Engine.TextureMipDataProviderFactory
// Size: 0x30 (Inherited: 0x30)
struct UTextureMipDataProviderFactory : UAssetUserData {
};

// Class Engine.TextureRenderTarget2DArray
// Size: 0x118 (Inherited: 0xf8)
struct UTextureRenderTarget2DArray : UTextureRenderTarget {
	int32_t SizeX; // 0xf8(0x04)
	int32_t SizeY; // 0xfc(0x04)
	int32_t Slices; // 0x100(0x04)
	struct FLinearColor ClearColor; // 0x104(0x10)
	enum class EPixelFormat OverrideFormat; // 0x114(0x01)
	char bHDR : 1; // 0x115(0x01)
	char bForceLinearGamma : 1; // 0x115(0x01)
	char pad_115_2 : 6; // 0x115(0x01)
	char pad_116[0x2]; // 0x116(0x02)
};

// Class Engine.TextureRenderTargetCube
// Size: 0x110 (Inherited: 0xf8)
struct UTextureRenderTargetCube : UTextureRenderTarget {
	int32_t SizeX; // 0xf8(0x04)
	struct FLinearColor ClearColor; // 0xfc(0x10)
	enum class EPixelFormat OverrideFormat; // 0x10c(0x01)
	char bHDR : 1; // 0x10d(0x01)
	char bForceLinearGamma : 1; // 0x10d(0x01)
	char pad_10D_2 : 6; // 0x10d(0x01)
	char pad_10E[0x2]; // 0x10e(0x02)
};

// Class Engine.TextureRenderTargetVolume
// Size: 0x118 (Inherited: 0xf8)
struct UTextureRenderTargetVolume : UTextureRenderTarget {
	int32_t SizeX; // 0xf8(0x04)
	int32_t SizeY; // 0xfc(0x04)
	int32_t SizeZ; // 0x100(0x04)
	struct FLinearColor ClearColor; // 0x104(0x10)
	enum class EPixelFormat OverrideFormat; // 0x114(0x01)
	char bHDR : 1; // 0x115(0x01)
	char bForceLinearGamma : 1; // 0x115(0x01)
	char pad_115_2 : 6; // 0x115(0x01)
	char pad_116[0x2]; // 0x116(0x02)
};

// Class Engine.ThumbnailInfo
// Size: 0x30 (Inherited: 0x30)
struct UThumbnailInfo : UObject {
};

// Class Engine.TimelineComponent
// Size: 0x1a0 (Inherited: 0xe8)
struct UTimelineComponent : UActorComponent {
	struct FTimeline TheTimeline; // 0xe8(0xb0)
	char bIgnoreTimeDilation : 1; // 0x198(0x01)
	char pad_198_1 : 7; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)

	void Stop(); // Function Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542b240
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542b150
	void SetTimelineTickInterval(float NewTickInterval); // Function Engine.TimelineComponent.SetTimelineTickInterval // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542b0d0
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542b050
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542afd0
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542ae30
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aeb0
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542adb0
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542ad20
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542ac30
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aba0
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aab0
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aa90
	void Reverse(); // Function Engine.TimelineComponent.Reverse // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aa70
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aa50
	void Play(); // Function Engine.TimelineComponent.Play // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x542aa30
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline // (Final|Native|Public) // @ game+0x542aa10
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a9e0
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a9b0
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a980
	float GetTimelineTickInterval(); // Function Engine.TimelineComponent.GetTimelineTickInterval // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a950
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a920
	float GetSimulatedTimlineFloatTrack(float SimulatedTime); // Function Engine.TimelineComponent.GetSimulatedTimlineFloatTrack // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a800
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a760
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a790
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x542a730
};

// Class Engine.TimelineTemplate
// Size: 0xd0 (Inherited: 0x30)
struct UTimelineTemplate : UObject {
	float TimelineLength; // 0x30(0x04)
	float TimelineTickInterval; // 0x34(0x04)
	enum class ETimelineLengthMode LengthMode; // 0x38(0x01)
	char bAutoPlay : 1; // 0x39(0x01)
	char bLoop : 1; // 0x39(0x01)
	char bReplicated : 1; // 0x39(0x01)
	char bIgnoreTimeDilation : 1; // 0x39(0x01)
	char pad_39_4 : 4; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x40(0x10)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x50(0x10)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x60(0x10)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x70(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x80(0x10)
	struct FGuid TimelineGuid; // 0x90(0x10)
	struct FName VariableName; // 0xa0(0x0c)
	struct FName DirectionPropertyName; // 0xac(0x0c)
	struct FName UpdateFunctionName; // 0xb8(0x0c)
	struct FName FinishedFunctionName; // 0xc4(0x0c)
};

// Class Engine.TireType
// Size: 0x40 (Inherited: 0x38)
struct UTireType : UDataAsset {
	float FrictionScale; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.TouchInterface
// Size: 0x60 (Inherited: 0x30)
struct UTouchInterface : UObject {
	struct TArray<struct FTouchInputControl> Controls; // 0x30(0x10)
	float ActiveOpacity; // 0x40(0x04)
	float InactiveOpacity; // 0x44(0x04)
	float TimeUntilDeactive; // 0x48(0x04)
	float TimeUntilReset; // 0x4c(0x04)
	float ActivationDelay; // 0x50(0x04)
	bool bPreventRecenter; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float StartupDelay; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.TriggerBase
// Size: 0x3d8 (Inherited: 0x3d0)
struct ATriggerBase : AActor {
	struct UShapeComponent* CollisionComponent; // 0x3d0(0x08)
};

// Class Engine.TriggerBox
// Size: 0x3d8 (Inherited: 0x3d8)
struct ATriggerBox : ATriggerBase {
};

// Class Engine.TriggerCapsule
// Size: 0x3d8 (Inherited: 0x3d8)
struct ATriggerCapsule : ATriggerBase {
};

// Class Engine.TriggerSphere
// Size: 0x3d8 (Inherited: 0x3d8)
struct ATriggerSphere : ATriggerBase {
};

// Class Engine.TriggerVolume
// Size: 0x408 (Inherited: 0x408)
struct ATriggerVolume : AVolume {
};

// Class Engine.TwitterIntegrationBase
// Size: 0x40 (Inherited: 0x40)
struct UTwitterIntegrationBase : UPlatformInterfaceBase {

	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // @ game+0x5432140
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI // (Native|Public) // @ game+0x5431fc0
	void Init(); // Function Engine.TwitterIntegrationBase.Init // (Native|Public) // @ game+0x2c57f60
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts // (Native|Public) // @ game+0x4785c90
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName // (Native|Public) // @ game+0x5431e40
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI // (Native|Public) // @ game+0x2dab440
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts // (Native|Public) // @ game+0x2b7e180
};

// Class Engine.UserDefinedEnum
// Size: 0xb8 (Inherited: 0x68)
struct UUserDefinedEnum : UEnum {
	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x68(0x50)
};

// Class Engine.UserDefinedStruct
// Size: 0x110 (Inherited: 0xc8)
struct UUserDefinedStruct : UScriptStruct {
	enum class EUserDefinedStructureStatus Status; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	struct FGuid Guid; // 0xcc(0x10)
	char pad_DC[0x34]; // 0xdc(0x34)
};

// Class Engine.UserInterfaceSettings
// Size: 0x2c8 (Inherited: 0x48)
struct UUserInterfaceSettings : UDeveloperSettings {
	enum class ERenderFocusRule RenderFocusRule; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x50(0x50)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0xa0(0x50)
	struct FSoftClassPath DefaultCursor; // 0xf0(0x20)
	struct FSoftClassPath TextEditBeamCursor; // 0x110(0x20)
	struct FSoftClassPath CrosshairsCursor; // 0x130(0x20)
	struct FSoftClassPath HandCursor; // 0x150(0x20)
	struct FSoftClassPath GrabHandCursor; // 0x170(0x20)
	struct FSoftClassPath GrabHandClosedCursor; // 0x190(0x20)
	struct FSoftClassPath SlashedCircleCursor; // 0x1b0(0x20)
	float ApplicationScale; // 0x1d0(0x04)
	enum class EUIScalingRule UIScaleRule; // 0x1d4(0x01)
	char pad_1D5[0x3]; // 0x1d5(0x03)
	struct FSoftClassPath CustomScalingRuleClass; // 0x1d8(0x20)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1f8(0x88)
	bool bAllowHighDPIInGameMode; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	struct FIntPoint DesignScreenSize; // 0x284(0x08)
	bool bLoadWidgetsOnDedicatedServer; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct TArray<struct UObject*> CursorClasses; // 0x290(0x10)
	struct UObject* CustomScalingRuleClassInstance; // 0x2a0(0x08)
	struct UDPICustomScalingRule* CustomScalingRule; // 0x2a8(0x08)
	char pad_2B0[0x18]; // 0x2b0(0x18)
};

// Class Engine.VectorField
// Size: 0x50 (Inherited: 0x30)
struct UVectorField : UObject {
	struct FBox Bounds; // 0x30(0x1c)
	float Intensity; // 0x4c(0x04)
};

// Class Engine.VectorFieldAnimated
// Size: 0x90 (Inherited: 0x50)
struct UVectorFieldAnimated : UVectorField {
	struct UTexture2D* Texture; // 0x50(0x08)
	enum class EVectorFieldConstructionOp ConstructionOp; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	int32_t VolumeSizeX; // 0x5c(0x04)
	int32_t VolumeSizeY; // 0x60(0x04)
	int32_t VolumeSizeZ; // 0x64(0x04)
	int32_t SubImagesX; // 0x68(0x04)
	int32_t SubImagesY; // 0x6c(0x04)
	int32_t FrameCount; // 0x70(0x04)
	float FramesPerSecond; // 0x74(0x04)
	char bLoop : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct UVectorFieldStatic* NoiseField; // 0x80(0x08)
	float NoiseScale; // 0x88(0x04)
	float NoiseMax; // 0x8c(0x04)
};

// Class Engine.VectorFieldComponent
// Size: 0x570 (Inherited: 0x550)
struct UVectorFieldComponent : UPrimitiveComponent {
	struct UVectorField* VectorField; // 0x548(0x08)
	float Intensity; // 0x550(0x04)
	float Tightness; // 0x554(0x04)
	char bPreviewVectorField : 1; // 0x558(0x01)
	char pad_560_1 : 7; // 0x560(0x01)
	char pad_561[0xf]; // 0x561(0x0f)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // @ game+0x5431f30
};

// Class Engine.VectorFieldStatic
// Size: 0xa0 (Inherited: 0x50)
struct UVectorFieldStatic : UVectorField {
	int32_t SizeX; // 0x50(0x04)
	int32_t SizeY; // 0x54(0x04)
	int32_t SizeZ; // 0x58(0x04)
	bool bAllowCPUAccess; // 0x5c(0x01)
	char pad_5D[0x43]; // 0x5d(0x43)
};

// Class Engine.VectorFieldVolume
// Size: 0x3d8 (Inherited: 0x3d0)
struct AVectorFieldVolume : AActor {
	struct UVectorFieldComponent* VectorFieldComponent; // 0x3d0(0x08)
};

// Class Engine.ViewportStatsSubsystem
// Size: 0x58 (Inherited: 0x38)
struct UViewportStatsSubsystem : UWorldSubsystem {
	char pad_38[0x20]; // 0x38(0x20)

	void RemoveDisplayDelegate(int32_t IndexToRemove); // Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x5438bc0
	void AddTimedDisplay(struct FText Text, struct FLinearColor Color, float Duration); // Function Engine.ViewportStatsSubsystem.AddTimedDisplay // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5437ec0
	int32_t AddDisplayDelegate(struct FDelegate& Delegate); // Function Engine.ViewportStatsSubsystem.AddDisplayDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x5437df0
};

// Class Engine.VirtualTexture
// Size: 0x30 (Inherited: 0x30)
struct UVirtualTexture : UObject {
};

// Class Engine.LightMapVirtualTexture
// Size: 0x30 (Inherited: 0x30)
struct ULightMapVirtualTexture : UVirtualTexture {
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x118 (Inherited: 0x118)
struct URuntimeVirtualTextureStreamingProxy : UTexture2D {
};

// Class Engine.VirtualTexture2D
// Size: 0x128 (Inherited: 0x118)
struct UVirtualTexture2D : UTexture2D {
	struct FVirtualTextureBuildSettings Settings; // 0x118(0x0c)
	bool bContinuousUpdate; // 0x124(0x01)
	bool bSinglePhysicalSpace; // 0x125(0x01)
	char pad_126[0x2]; // 0x126(0x02)
};

// Class Engine.VirtualTextureBuilder
// Size: 0x40 (Inherited: 0x30)
struct UVirtualTextureBuilder : UObject {
	struct UVirtualTexture2D* Texture; // 0x30(0x08)
	uint64_t BuildHash; // 0x38(0x08)
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x48 (Inherited: 0x30)
struct UVirtualTexturePoolConfig : UObject {
	int32_t DefaultSizeInMegabyte; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x38(0x10)
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x30 (Inherited: 0x30)
struct UVisualLoggerAutomationTests : UObject {
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x30 (Inherited: 0x30)
struct UVisualLoggerDebugSnapshotInterface : UInterface {
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x30 (Inherited: 0x30)
struct UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary {

	void RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f1ef30
	void LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5438960
	void LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5438650
	void LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float Radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5438390
	void LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x5438110
	void EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x52c6b10
};

// Class Engine.VoiceChannel
// Size: 0x88 (Inherited: 0x78)
struct UVoiceChannel : UChannel {
	char pad_78[0x10]; // 0x78(0x10)
};

// Class Engine.VOIPTalker
// Size: 0x120 (Inherited: 0xe8)
struct UVOIPTalker : UActorComponent {
	struct FVoiceSettings Settings; // 0xe8(0x18)
	char pad_100[0x20]; // 0x100(0x20)

	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x5438b30
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2d28370
	struct UVOIPTalker* CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5438030
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0x2b32e50
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0x2bbe5e0
};

// Class Engine.VOIPStatics
// Size: 0x30 (Inherited: 0x30)
struct UVOIPStatics : UBlueprintFunctionLibrary {

	void SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x5438ee0
};

// Class Engine.VolumeTexture
// Size: 0x148 (Inherited: 0xf0)
struct UVolumeTexture : UTexture {
	char pad_F0[0x58]; // 0xf0(0x58)
};

// Class Engine.VolumetricCloudComponent
// Size: 0x2d0 (Inherited: 0x290)
struct UVolumetricCloudComponent : USceneComponent {
	float LayerBottomAltitude; // 0x288(0x04)
	float LayerHeight; // 0x28c(0x04)
	float TracingStartMaxDistance; // 0x290(0x04)
	float TracingMaxDistance; // 0x294(0x04)
	float PlanetRadius; // 0x298(0x04)
	struct FColor GroundAlbedo; // 0x29c(0x04)
	struct UMaterialInterface* Material; // 0x2a0(0x08)
	char bUsePerSampleAtmosphericLightTransmittance : 1; // 0x2a8(0x01)
	float SkyLightCloudBottomOcclusion; // 0x2ac(0x04)
	float ViewSampleCountScale; // 0x2b0(0x04)
	float ReflectionSampleCountScale; // 0x2b4(0x04)
	float ShadowViewSampleCountScale; // 0x2b8(0x04)
	float ShadowReflectionSampleCountScale; // 0x2bc(0x04)
	float ShadowTracingDistance; // 0x2c0(0x04)
	char pad_2C8_1 : 7; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)

	void SetViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5439460
	void SetTracingStartMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x54393e0
	void SetTracingMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5439360
	void SetSkyLightCloudBottomOcclusion(float NewValue); // Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x54391e0
	void SetShadowViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e9430
	void SetShadowTracingDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowTracingDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5439160
	void SetShadowReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x54390e0
	void SetReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x53e97d0
	void SetPlanetRadius(float NewValue); // Function Engine.VolumetricCloudComponent.SetPlanetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5438fe0
	void SetMaterial(struct UMaterialInterface* NewValue); // Function Engine.VolumetricCloudComponent.SetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5438dd0
	void SetLayerHeight(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerHeight // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5438d50
	void SetLayerBottomAltitude(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5438cd0
	void SetGroundAlbedo(struct FColor NewValue); // Function Engine.VolumetricCloudComponent.SetGroundAlbedo // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x5438c50
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x5439560
};

// Class Engine.VolumetricCloud
// Size: 0x3d8 (Inherited: 0x3d0)
struct AVolumetricCloud : AInfo {
	struct UVolumetricCloudComponent* VolumetricCloudComponent; // 0x3d0(0x08)
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x410 (Inherited: 0x408)
struct AVolumetricLightmapDensityVolume : AVolume {
	struct FInt32Interval AllowedMipLevelRange; // 0x408(0x08)
};

// Class Engine.WindDirectionalSource
// Size: 0x3d8 (Inherited: 0x3d0)
struct AWindDirectionalSource : AInfo {
	struct UWindDirectionalSourceComponent* Component; // 0x3d0(0x08)
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x2b0 (Inherited: 0x290)
struct UWindDirectionalSourceComponent : USceneComponent {
	float Strength; // 0x288(0x04)
	float Speed; // 0x28c(0x04)
	float MinGustAmount; // 0x290(0x04)
	float MaxGustAmount; // 0x294(0x04)
	float Radius; // 0x298(0x04)
	char bPointWind : 1; // 0x29c(0x01)
	char pad_2A4_1 : 7; // 0x2a4(0x01)
	char pad_2A5[0xb]; // 0x2a5(0x0b)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // @ game+0x54394e0
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength // (Final|Native|Public|BlueprintCallable) // @ game+0x54392e0
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x5439260
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x5439060
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x5438f60
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x5438e60
};

// Class Engine.WorldComposition
// Size: 0x70 (Inherited: 0x30)
struct UWorldComposition : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TArray<struct ULevelStreaming*> TilesStreaming; // 0x50(0x10)
	double TilesStreamingTimeThreshold; // 0x60(0x08)
	bool bLoadAllTilesDuringCinematic; // 0x68(0x01)
	bool bRebaseOriginIn3DSpace; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	float RebaseOriginDistance; // 0x6c(0x04)
};

// Class Engine.HierarchicalLODSetup
// Size: 0x70 (Inherited: 0x30)
struct UHierarchicalLODSetup : UObject {
	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x30(0x10)
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x40(0x30)
};

